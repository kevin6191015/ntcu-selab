<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1174.vdcb_d054cf74a_">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.29">
            <gitLabConnection>gitlab</gitLabConnection>
            <jobCredentialId>gitlab</jobCredentialId>
            <useAlternativeCredential>false</useAlternativeCredential>
        </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.29">
                    <spec></spec>
                    <triggerOnPush>true</triggerOnPush>
                    <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
                    <triggerOnMergeRequest>true</triggerOnMergeRequest>
                    <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
                    <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
                    <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
                    <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
                    <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
                    <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
                    <triggerOnNoteRequest>true</triggerOnNoteRequest>
                    <noteRegex>Jenkins please retry a build</noteRegex>
                    <ciSkip>true</ciSkip>
                    <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
                    <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
                    <setBuildDescription>true</setBuildDescription>
                    <branchFilterType>All</branchFilterType>
                    <includeBranchesSpec></includeBranchesSpec>
                    <excludeBranchesSpec></excludeBranchesSpec>
                    <sourceBranchRegex></sourceBranchRegex>
                    <targetBranchRegex></targetBranchRegex>
                    <secretToken>{AQAAABAAAAAQLgE3hshi0cfnoHRDPJ70dMGRS3z0O377BYVVouAkL38=}</secretToken>
                    <pendingBuildName></pendingBuildName>
                    <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
                </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2686.v7c37e0578401">
        <script>import groovy.json.JsonSlurperClassic
            node {
            environment {
            String input_or_not = &quot;[0]&quot;;
            String compile_result = &quot;&quot;;
            String test_result=&quot;&quot;;
            String token = &quot;&quot;;
            }
            stage(&apos;Clone the Git&apos;) {
            //clone git project
            String url = &quot;{GitLab-url}/root/&quot;+ env.JOB_BASE_NAME +&quot;.git&quot;
            git branch: &apos;main&apos;, credentialsId: &apos;gitlab-cridential&apos;, url: url
            }
            stage(&apos;Prepare testfile&apos;){

            //get token to call api
            String response1 =sh (script: &apos;&apos;&apos;curl --location --request POST \&apos;{Spring-url}/login\&apos; \\
            --header \&apos;Content-Type: application/json\&apos; \\
            --data-raw \&apos;{
            &quot;username&quot; : {SPRING_ROOT_USERNAME},
            &quot;password&quot; : {SPRING_ROOT_PASSWORD}
            }\&apos;&apos;&apos;&apos;, returnStdout: true).trim()

            echo &quot;response1 : ${response1}&quot;

            def json1 = new groovy.json.JsonSlurperClassic().parseText(response1)
            env.token = json1.data.token;
            echo &quot;token : ${env.token}&quot;

            //get project name
            String NAME = env.JOB_BASE_NAME.substring(0, env.JOB_BASE_NAME.indexOf(&apos;_&apos;))
            echo &quot;Project name is ${NAME}&quot;

            //get question data to test whether need to prepare test file
            String response = sh(script: &quot;curl -s &apos;{Mysql-url}question1/${NAME}&apos;&quot;, returnStdout: true).trim()
            echo &quot;${response}&quot;
            def json = new groovy.json.JsonSlurperClassic().parseText(response)
            env.input_or_not = json.input_or_not;

            //print jenkins workspace
            env.WORKSPACE = pwd()

            if(env.input_or_not.equals(&quot;[0]&quot;)){
            //if don&apos;t have to prepare test file quit stage
            org.jenkinsci.plugins.pipeline.modeldefinition.Utils.markStageSkippedForConditional(&apos;Prepare testfile&apos;)
            }else{
            //check if testfile directory is build
            if(fileExists(&quot;${env.WORKSPACE}/../testfile&quot;)){
            echo &quot;Directory ${env.WORKSPACE}/../testfile exists.&quot;
            }else{
            echo &quot; Directory ${env.WORKSPACE}/../testfile doesn&apos;t exists. &quot;
            echo &quot; Create testfile directory. &quot;
            def file = new File(&quot;${env.WORKSPACE}/../testfile&quot;)
            file.mkdir()
            }

            if(fileExists(&quot;${env.WORKSPACE}/../testfile/${NAME}&quot;)){
            echo &quot;Directory ${env.WORKSPACE}/../testfile/${NAME} exists.&quot;
            }else{
            echo &quot; Directory ${env.WORKSPACE}/../testfile/${NAME} doesn&apos;t exists. &quot;
            def testfile = new File(&quot;${env.WORKSPACE}/../testfile/${NAME}&quot;)
            testfile.mkdir()
            }

            def AppTest = new File(&quot;${env.WORKSPACE}/../testfile/${NAME}/AppTest.java&quot;)
            AppTest.createNewFile()


            dir(&apos;./.validate/&apos;){
            sh &quot;javac -cp json-20220320.jar testfile_generator.java&quot;
            sh &quot;java -cp &apos;.:json-20220320.jar&apos; testfile_generator ${NAME}&quot;
            }

            String testfile = readFile &quot;${env.WORKSPACE}/../testfile/${NAME}/AppTest.java&quot;

            echo testfile

            writeFile(file: &quot;${env.WORKSPACE}/src/test/java/edu/selab/AppTest.java&quot; , text: testfile)
            sh &quot;cat ${env.WORKSPACE}/src/test/java/edu/selab/AppTest.java&quot;
            }
            }

            stage(&apos;Compile&apos;){
            def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
            try {
            sh &quot;${mvnHome}/bin/mvn clean compile&quot;
            env.compile_result=&quot;1&quot;;
            } catch (err) {
            echo &quot;compile fail&quot;
            env.compile_result=&quot;0&quot;;
            }

            }
            stage(&apos;Test&apos;){
            if(env.input_or_not.equals(&quot;[0]&quot;)){
            org.jenkinsci.plugins.pipeline.modeldefinition.Utils.markStageSkippedForConditional(&apos;Test&apos;)
            }else{
            try {
            def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
            sh &quot;${mvnHome}/bin/mvn clean test&quot;
            env.test_result=&quot;1&quot;
            } catch (err) {
            echo &quot;test fail&quot;
            env.test_result=&quot;0&quot;;
            }
            }
            }
            stage(&apos;SonarQube analysis&apos;) {
            def scannerHome = tool &apos;sonarqube&apos;;
            def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
            withSonarQubeEnv(&apos;sonarqube&apos;) {
            sh &quot;${mvnHome}/bin/mvn sonar:sonar&quot;
            }
            }
            stage(&apos;Get Sonar report&apos;){
            //echo &apos;${env.WORKSPACE}/target/surefire-reports/TEST-*.xml&apos;
            def summary = junit testResults: &apos;**/target/surefire-reports/TEST-*.xml&apos;
            echo &quot;${summary.totalCount}&quot;
            echo &quot;${summary.failCount}&quot;
            echo &quot;${summary.passCount}&quot;
            env.test_result=&quot;Total:&quot;+summary.totalCount+&quot;,Failures:&quot;+summary.failCount+&quot;,Passed:&quot;+summary.passCount
            echo test_result
            String NAME =  env.JOB_BASE_NAME
            String submit_times = env.BUILD_NUMBER
            dir(&apos;./.validate/&apos;){
            sh &quot;javac -cp json-20220320.jar sonarqube_report_analyzer.java&quot;
            sh &quot;java -cp &apos;.:json-20220320.jar&apos; sonarqube_report_analyzer ${NAME} ${submit_times} ${env.test_result} ${env.compile_result}&quot;
            }
            }
            stage(&apos;Post Process&apos;){
            String NAME =  env.JOB_BASE_NAME
            dir(&apos;../&apos;){
            sh &quot;rmdir ${NAME}@tmp&quot;
            }
            }

            }</script>
        <sandbox>false</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>