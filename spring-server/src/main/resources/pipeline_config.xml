<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1174.vdcb_d054cf74a_">
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.29">
            <gitLabConnection>gitlab</gitLabConnection>
            <jobCredentialId>gitlab</jobCredentialId>
            <useAlternativeCredential>false</useAlternativeCredential>
        </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.29">
                    <spec></spec>
                    <triggerOnPush>true</triggerOnPush>
                    <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
                    <triggerOnMergeRequest>true</triggerOnMergeRequest>
                    <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
                    <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
                    <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
                    <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
                    <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
                    <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
                    <triggerOnNoteRequest>true</triggerOnNoteRequest>
                    <noteRegex>Jenkins please retry a build</noteRegex>
                    <ciSkip>true</ciSkip>
                    <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
                    <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
                    <setBuildDescription>true</setBuildDescription>
                    <branchFilterType>All</branchFilterType>
                    <includeBranchesSpec></includeBranchesSpec>
                    <excludeBranchesSpec></excludeBranchesSpec>
                    <sourceBranchRegex></sourceBranchRegex>
                    <targetBranchRegex></targetBranchRegex>
                    <pendingBuildName></pendingBuildName>
                    <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
                </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2686.v7c37e0578401">
        <script>node {
    stage(&apos;Clone the Git&apos;) {
        String url = &quot;http://120.108.204.152:10085/root/&quot;+ env.JOB_BASE_NAME +&quot;.git&quot;
    git branch: &apos;main&apos;, credentialsId: &apos;2559ce4a-61fa-4a9b-af93-23a90be8dd9b&apos;, url: url
  }
  stage(&apos;Prepare testfile&apos;){
    env.WORKSPACE = pwd()
    String NAME =  env.JOB_BASE_NAME.substring(0, env.JOB_BASE_NAME.indexOf(&apos;_&apos;))
    echo &quot;Project name is ${NAME}&quot;
    
    if(fileExists(&quot;${env.WORKSPACE}/../testfile&quot;)){
        echo &quot;Directory ${env.WORKSPACE}/../testfile exists.&quot;
    }else{
        echo &quot; Directory ${env.WORKSPACE}/../testfile doesn&apos;t exists. &quot;
        echo &quot; Create testfile directory. &quot;
        def file = new File(&quot;${env.WORKSPACE}/../testfile&quot;)
        file.mkdir()
    }
    
    if(fileExists(&quot;${env.WORKSPACE}/../testfile/${NAME}&quot;)){
        echo &quot;Directory ${env.WORKSPACE}/../testfile/${NAME} exists.&quot;
    }else{
        echo &quot; Directory ${env.WORKSPACE}/../testfile/${NAME} doesn&apos;t exists. &quot;
        def testfile = new File(&quot;${env.WORKSPACE}/../testfile/${NAME}&quot;)
        testfile.mkdir()
    }
    
    def AppTest = new File(&quot;${env.WORKSPACE}/../testfile/${NAME}/AppTest.java&quot;)
    AppTest.createNewFile()
    
    
    dir(&apos;../&apos;){ 
        sh &quot;javac -cp json-20220320.jar testfile_generator.java&quot;
        sh &quot;java -cp &apos;.:json-20220320.jar&apos; testfile_generator ${NAME}&quot;
    }
    
    String testfile = readFile &quot;${env.WORKSPACE}/../testfile/${NAME}/AppTest.java&quot;
    
    echo testfile
    
    writeFile(file: &quot;${env.WORKSPACE}/src/test/java/com/example/AppTest.java&quot; , text: testfile)
    sh &quot;cat ${env.WORKSPACE}/src/test/java/com/example/AppTest.java&quot;
    
  }
  
  stage(&apos;Compile&apos;){
      def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
      sh &quot;${mvnHome}/bin/mvn clean compile&quot;
      
  }
  stage(&apos;Test&apos;){
    def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
    try {   
      sh &quot;${mvnHome}/bin/mvn test&quot;
    }catch(err){
        step([$class: &apos;JUnitResultArchiver&apos;, testResults: &apos;**/target/surefire-reports/TEST-*.xml&apos;])
        throw err   
    }
 }
  stage(&apos;SonarQube analysis&apos;) {
    def scannerHome = tool &apos;sonarqube&apos;;
    def mvnHome = tool name: &apos;maven&apos;,type : &apos;maven&apos;
    withSonarQubeEnv(&apos;sonarqube&apos;) {
         sh &quot;${mvnHome}/bin/mvn sonar:sonar&quot;
    }
  }
}</script>
        <sandbox>false</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>