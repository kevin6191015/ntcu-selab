-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- 主機： mysql_server
-- 產生時間： 2022 年 10 月 24 日 16:26
-- 伺服器版本： 8.0.30
-- PHP 版本： 8.0.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 資料庫： `project`
--

-- --------------------------------------------------------

--
-- 資料表結構 `question_bank`
--

CREATE TABLE `question_bank` (
  `num` int NOT NULL,
  `question_name` text NOT NULL,
  `question_description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `image1` text NOT NULL,
  `image2` text NOT NULL,
  `input1` text NOT NULL,
  `input2` text NOT NULL,
  `input3` text NOT NULL,
  `input4` text NOT NULL,
  `input5` text NOT NULL,
  `input6` text NOT NULL,
  `input7` text NOT NULL,
  `input8` text NOT NULL,
  `input9` text NOT NULL,
  `input10` text NOT NULL,
  `output1` text NOT NULL,
  `output2` text NOT NULL,
  `output3` text NOT NULL,
  `output4` text NOT NULL,
  `output5` text NOT NULL,
  `output6` text NOT NULL,
  `output7` text NOT NULL,
  `output8` text NOT NULL,
  `output9` text NOT NULL,
  `output10` text NOT NULL,
  `input_or_not` int NOT NULL,
  `id` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- 傾印資料表的資料 `question_bank`
--

INSERT INTO `question_bank` (`num`, `question_name`, `question_description`, `image1`, `image2`, `input1`, `input2`, `input3`, `input4`, `input5`, `input6`, `input7`, `input8`, `input9`, `input10`, `output1`, `output2`, `output3`, `output4`, `output5`, `output6`, `output7`, `output8`, `output9`, `output10`, `input_or_not`, `id`) VALUES
(1, 'Fibonacci_Number', 'Sample Input 1\n3\nSample Output 1\n3', 'https://i.imgur.com/R01vVO4.jpg', '', '12', '33', '1', '16', '26', '11', '41', '43', '28', '12', '233', '5702887', '1', '1597', '196418', '144', '267914296', '701408733', '514229', '233', 10, 'a0001'),
(2, 'Matrix-chain_Multiplication', 'Sample Input 1\n6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25\nSample Output 1\n15125', 'https://i.imgur.com/echAQm7.jpg', '', '68\n25 97\n97 43\n43 94\n94 18\n18 66\n66 23\n23 98\n98 27\n27 15\n15 73\n73 99\n99 38\n38 40\n40 64\n64 81\n81 3\n3 21\n21 94\n94 20\n20 97\n97 27\n27 96\n96 27\n27 7\n7 88\n88 79\n79 11\n11 7\n7 32\n32 62\n62 6\n6 87\n87 75\n75 70\n70 40\n40 100\n100 97\n97 38\n38 52\n52 33\n33 89\n89 89\n89 57\n57 15\n15 76\n76 33\n33 88\n88 73\n73 91\n91 98\n98 98\n98 75\n75 64\n64 8\n8 99\n99 62\n62 79\n79 81\n81 26\n26 32\n32 7\n7 6\n6 50\n50 86\n86 57\n57 67\n67 62\n62 61\n', '69\n22 25\n25 64\n64 41\n41 70\n70 11\n11 19\n19 70\n70 73\n73 40\n40 18\n18 54\n54 46\n46 100\n100 5\n5 76\n76 89\n89 88\n88 11\n11 91\n91 65\n65 90\n90 19\n19 64\n64 98\n98 80\n80 25\n25 84\n84 67\n67 1\n1 1\n1 80\n80 50\n50 12\n12 36\n36 51\n51 69\n69 19\n19 49\n49 64\n64 27\n27 39\n39 57\n57 69\n69 23\n23 100\n100 37\n37 33\n33 75\n75 57\n57 66\n66 56\n56 21\n21 22\n22 68\n68 6\n6 27\n27 65\n65 48\n48 55\n55 17\n17 16\n16 100\n100 24\n24 77\n77 14\n14 8\n8 27\n27 80\n80 91\n', '1\n57 14\n', '44\n80 8\n8 58\n58 61\n61 4\n4 64\n64 15\n15 64\n64 49\n49 63\n63 89\n89 8\n8 16\n16 51\n51 56\n56 46\n46 19\n19 10\n10 81\n81 45\n45 41\n41 20\n20 94\n94 19\n19 36\n36 10\n10 37\n37 46\n46 17\n17 3\n3 78\n78 45\n45 91\n91 30\n30 85\n85 84\n84 7\n7 99\n99 68\n68 10\n10 95\n95 16\n16 47\n47 94\n94 32\n', '94\n7 6\n6 85\n85 93\n93 27\n27 69\n69 68\n68 78\n78 92\n92 28\n28 22\n22 3\n3 59\n59 83\n83 1\n1 92\n92 28\n28 90\n90 16\n16 83\n83 49\n49 86\n86 75\n75 27\n27 55\n55 56\n56 39\n39 57\n57 58\n58 37\n37 56\n56 48\n48 23\n23 94\n94 64\n64 98\n98 49\n49 49\n49 88\n88 26\n26 16\n16 42\n42 38\n38 40\n40 47\n47 71\n71 82\n82 59\n59 29\n29 14\n14 54\n54 71\n71 82\n82 35\n35 39\n39 96\n96 10\n10 51\n51 43\n43 92\n92 16\n16 44\n44 100\n100 6\n6 15\n15 81\n81 75\n75 15\n15 23\n23 94\n94 16\n16 9\n9 90\n90 42\n42 70\n70 14\n14 31\n31 12\n12 65\n65 83\n83 7\n7 62\n62 73\n73 74\n74 15\n15 14\n14 38\n38 52\n52 32\n32 100\n100 59\n59 98\n98 99\n99 5\n5 11\n', '17\n57 13\n13 15\n15 39\n39 63\n63 98\n98 65\n65 18\n18 42\n42 39\n39 55\n55 90\n90 21\n21 29\n29 8\n8 48\n48 96\n96 43\n', '84\n1 40\n40 16\n16 100\n100 76\n76 7\n7 43\n43 32\n32 46\n46 95\n95 59\n59 54\n54 78\n78 80\n80 4\n4 17\n17 59\n59 55\n55 44\n44 69\n69 59\n59 81\n81 69\n69 52\n52 22\n22 43\n43 14\n14 29\n29 93\n93 44\n44 41\n41 33\n33 3\n3 1\n1 62\n62 44\n44 70\n70 12\n12 60\n60 98\n98 12\n12 83\n83 80\n80 71\n71 87\n87 39\n39 82\n82 91\n91 39\n39 96\n96 73\n73 60\n60 28\n28 68\n68 62\n62 49\n49 80\n80 5\n5 7\n7 87\n87 11\n11 13\n13 81\n81 2\n2 37\n37 21\n21 22\n22 98\n98 19\n19 57\n57 36\n36 9\n9 5\n5 26\n26 42\n42 24\n24 99\n99 12\n12 48\n48 56\n56 92\n92 68\n68 91\n91 75\n75 10\n', '98\n25 69\n69 7\n7 69\n69 57\n57 22\n22 7\n7 67\n67 77\n77 69\n69 60\n60 13\n13 9\n9 52\n52 21\n21 24\n24 50\n50 22\n22 52\n52 47\n47 71\n71 74\n74 99\n99 71\n71 78\n78 75\n75 44\n44 35\n35 27\n27 75\n75 23\n23 8\n8 79\n79 17\n17 93\n93 36\n36 97\n97 18\n18 100\n100 35\n35 92\n92 27\n27 50\n50 26\n26 22\n22 24\n24 64\n64 10\n10 13\n13 63\n63 57\n57 75\n75 29\n29 17\n17 55\n55 8\n8 10\n10 2\n2 36\n36 6\n6 3\n3 54\n54 63\n63 16\n16 60\n60 31\n31 64\n64 82\n82 70\n70 16\n16 32\n32 46\n46 93\n93 21\n21 83\n83 65\n65 87\n87 81\n81 17\n17 76\n76 30\n30 24\n24 32\n32 46\n46 31\n31 30\n30 8\n8 37\n37 66\n66 22\n22 66\n66 21\n21 61\n61 88\n88 41\n41 92\n92 37\n37 93\n93 82\n', '89\n48 98\n98 22\n22 57\n57 65\n65 66\n66 64\n64 64\n64 96\n96 37\n37 3\n3 34\n34 67\n67 87\n87 95\n95 74\n74 37\n37 22\n22 90\n90 87\n87 38\n38 44\n44 74\n74 95\n95 31\n31 35\n35 87\n87 91\n91 4\n4 93\n93 99\n99 92\n92 26\n26 12\n12 62\n62 48\n48 48\n48 82\n82 61\n61 80\n80 53\n53 82\n82 9\n9 38\n38 50\n50 48\n48 30\n30 33\n33 27\n27 53\n53 77\n77 98\n98 50\n50 4\n4 48\n48 32\n32 65\n65 8\n8 48\n48 61\n61 4\n4 50\n50 54\n54 36\n36 73\n73 52\n52 10\n10 5\n5 45\n45 6\n6 54\n54 44\n44 78\n78 11\n11 82\n82 27\n27 41\n41 59\n59 100\n100 90\n90 5\n5 51\n51 97\n97 55\n55 21\n21 74\n74 76\n76 56\n56 90\n90 65\n', '49\n14 7\n7 21\n21 7\n7 22\n22 9\n9 44\n44 56\n56 42\n42 89\n89 95\n95 65\n65 53\n53 50\n50 9\n9 66\n66 78\n78 63\n63 71\n71 41\n41 1\n1 80\n80 8\n8 72\n72 10\n10 21\n21 38\n38 19\n19 34\n34 91\n91 57\n57 54\n54 14\n14 27\n27 57\n57 4\n4 8\n8 93\n93 83\n83 74\n74 3\n3 57\n57 55\n55 33\n33 39\n39 92\n92 40\n40 7\n7 83\n83 67\n', '643638', '161580', '0', '250962', '236677', '326936', '206233', '431762', '793521', '103376', 10, 'a0002');
INSERT INTO `question_bank` (`num`, `question_name`, `question_description`, `image1`, `image2`, `input1`, `input2`, `input3`, `input4`, `input5`, `input6`, `input7`, `input8`, `input9`, `input10`, `output1`, `output2`, `output3`, `output4`, `output5`, `output6`, `output7`, `output8`, `output9`, `output10`, `input_or_not`, `id`) VALUES
(3, 'Longest_Common_Subsequence', 'Sample Input 1\n3\nabcbdab\nbdcaba\nabc\nabc\nabc\nbc\nSample Output 1\n4\n3\n2\n', 'https://i.imgur.com/A2RXrRx.jpg', '', '6\nfxsrycwourljpwevstrpsvyzzgaijbcvqvbamqwwgvhifsjcppitxaictajyxncuvjakuoduwsjhkuesdgyxiwjdaozvlvwtqrgmhlgmwsztbkfqfalareiuqmnnegsxwqhyldrtktlpxbuylfjiswnoiqkcpofzosvnasbbrgzhfqvpznqgivpkaiyqukevldwwsrfhkkpybtcmrffvibrakqjdebbxizxuzbyogbyjfrykespqpmhekypevuuopmauqjqyvdytilhblhqqjzwfxzkggtufkibqsbebxmyijagpfoeyajbtlzidscoqcqvvgsmazuxvytsifdvemtrdaowdeicebmgrgxeduaqbdamfc\nhrlphwuahtyrzzkphxlprqdjygzpuzoentvxqpoqrmcealpwgigbnggpqogwjhoatlrblxrzhdstwxsugqqyfarqaljjsdrmbkeihuvp\nlrygkfrflels\nippjktqpkmptjivcdgsfotcphrjcbvqeqxitzltwfiblmzkbspcqjnsjebmlgtohqcmpuaogfmhagxhlcjfhtiohxrhplgfhibdlshyihewamqoeihwaoalaofaiuxupvrsmjicpjchjjcmwumgxdejdalmteoqmdhftjdzncfythtijyyyabwidksvfrphqqhrkojxyrbelesqbzjwykvcfnkfmcsqnsxwseepuxcdqjgyzdbtuohtcdxtrrmxowxzuhdcarvnasfirqujmrihbsragkgglksdrgcyvzjzsokwduxealmdzvqninthqnhojqkeqfzilvsrbhrslhgucexjqsxnlopfracylhdlopdasjwqwvfsuuleovzdftfrpgctsmeswerorndnzjzzyjcamnctfskzlwkusrnbvehdavexyoblsbezqhczdqocsnsya\ncgpcfjnbbrastdlnuulngsoregmvpkfavbbglsdzkgbpxhyjljbcgdmugnxhjvqeexlzylclyyqtymvcelvcwgcknhnmiuaaugfhabtigxpvfbaebkvxlgvygztdcdzkhjlcebqvmzwbzcurvikcxiisxyfrvsfabromhplpxayrholnczdmkgxzjoelsbvjazypwvfpsehjjnwjbyqzxkagzweeefcblquogyguvbfqrflauitoooelqivtyoxorfifirmgxfirzyjxqetxpeexyirwguxtbabltrxbxbhwxzkfeytrazxagpukvu\ncxmbobyzmmhazuxizvozfazdgcgnlayslemrcaxazperpejruzfwhqezqmefqauajgypdaakvhbqawghedmuageijbbotzrwglgikmpakpuuymixecjrvyfzjynsxvptbzwtblyiqwahhirjinxuwioqoirhpkddslaikusqepgtbdwtniypwyjpcwnjbrcbgwdkstynvwezeujukevczfpnfprorviwsnphbwvkspghrafcajtxyjhevqhhikjhxtkutsidtpjznajjvvhzgaqgwdpsydxzgltccprfsbulmrvxcqymwyjxtabnhzhngzmlijigarfjeogbaegczskekuytfkjoesxalvssgnmcoxzjbhbcuxhudgzyoeaeclrtutoxuiavnafhsfiducgwttyze\napwtejaqwdqqhhzymhkimpathfywbtzwrcnydwlefrklkovtkgiotxojapbkiextjoxnwslzpmiaipkkborvnhepjarlawmrsomnrknrcwenbutbayaithvcnmegvueroanobrryzhvxhjhqdotyqaepduqgxvusecbzetqfsscxycpujubkvkhgalmymvftvtvqakefark\nluqzwhkobpylvgzbrxlvwxafihdaha\nodcojnkqkpkdklcdibqldzolbpmnbupllgzcvryzoiqcoqfwyappaigwmspzdufkqufldksllvlulonjppyqhsjekfpqvgwtpndhofvzzjcwecwijjsvzqgpsiifsdrifntobzxxzcoxtigqacdocgcovfdcttbvonkuzxdhdwgfsjcuohxpraokbvclrmszeshhllppeeoectzzngpudirgpvleasocjgzmzkoqkgwbnvqnshgdlsmcsbupqzbdetaaplieynzehbxrqqsmoataesxwuqrhuyvirkhtqfvohkaltgyrohztfrupsbnpwvaytqrgjhynukgzyjaowiatderlfhjjvoiv\nftyaduxrqyuokvomsvvgrsmbvvmjoltxpdmuftfflmxybqzxehdzyetbqqtlzvqhexvshubrikkwlmgdzbvcraxwdqliefxemaeatbklskglcraaznaswfztgrijcqcmnwbhzeyxrpacmdstodctpfunehmicjuxrzhxuryowmnsxieolbqmfoozganaknfgforqplfblplfhrenmvxwxgeeemdxlbcqqnemavfgzktacncbnjaasijndrhmsoqwxcbellpswkvjrgphftjcklvfcnrfzcbywzzgfzcvmdpzyletrqojatggvmpaqejmfsrlmtmaxsnfjpvhqpxxlbfm\nwllgohfccekvazsqbmzbwfkcacmozjhzxstozykmjdzdodxzuutysekpolrttwwvjdruucwyzoffmtqbqujauuglpliekjqpvvyphtftkrtwhkozauxesgwmycycovuwlelqzrqxgaixktmhmgjuztxvgulkmrimxtnjljruikioxjinbfcqxmgrfk\nfhdamupzdoeyarbifccjlwmhnymtpxbmacxnhiteexqwpmyqhuegqkchgusicqvexttjsbeomrhedyeuveoofqgrxbeymbjgdismyxwupdnop\n', '64\nndhnvwhckcipfwcduldordsqempwdlhzukqgryjpihnnmmjlhmtrzlwzsesfxxmgidatdcmwiijylxzcxgmaizumbmmwqamtgswqyycjxxegsnn\nthkuvptcxmoztydtdiynnklqemjpdmgpozsayvuptlvldobeitcynxihshjgrzddjvlusjadatcydwdsbykuiijbwmjbmavloldqrpybggxooeaqhhqxupaqmigtywfjmlbtcianiuadswwkojqyacjxpbbzseavacofqmxmhjlbnmzacgmjgmzbvjdyjagstvbbvpvfwmreeewilbijrzxngrlyevigrkfgvoatfkulqrlvwgudvwhfivobvcarszdlcwqgpaanbmqxpkaebflfhymdgfdnbiovfjexxrieyumdkyjoyusenoctgnnoaftxbacpumctrmcgqxbphprbbypprlnqiwfedowttsslkahfgnycyuungbdgoseh\naauewtjbtqumnrtuamnozlglppoubmvpmijfhvpazfzatdxbmyhelffjaeaxkopumbhgbatglzmxshbjzjujwyumfwzptooopvthabxdlikqntizmcqkpgbnywynykqebfmtvtocdlojgmjyxdhqbcixlg\nlbizpizkqteixshtzgnomsvdsfyvrtaylprfmddgmtinprtpbgdviejoiqbbclvgxtyjrzstzxuzdtpmdidypyhzgsleyntnmolosncwzjcuqcnfyphkqrybjmbygowbqsocmxpmptwpdhbfqaztqaijvyavuiyiqainueifygchkqsajjulivpkssflaexdebhqbpvysppwrbgnnwghsxzehhecxisykwufbkujsioadslevlcxfvvccjubcngevpxirpmbueqpphcqgpaddbaungjamppcnuoncvgotkvcgwwdnzswmnobmxbuxycmxmpsasyqpwcnslkpkowifvqtmremqlgkxtifpmpucbubfbcrfkkiunlgvkyntgatxvdvgnrpjveoztqrtrqmp\ngwmscljflwyzsbxrrdxjiguskbahuediteqtkcqcihdkadmchysnjdnvfgwyvrvwiepdeomgryouahwafelhkjdwlarfqqbljfdwlvhdpwttsojddsqciyaftcabkqhoxihdxvdtnocpgjqprdmzljcvmqltgeprmuturgburedrffptdfnahedwoevlefoqospgcfmnizjnahifzmxxdjlcygbukygndxqdvutgaxwktlboyjawzyquqbxodttlkucvaxkmydksiwmeyzjanzoevzriltlozrasorfjkdbqqnndgveblfmoxetuyfqxpgihallxsnxxrtlwxkuouetznodjxlsieyrlurxxg\nqpcosfsonpptrhslklrgnxdryuxtvgkvochcyzkjhjjjtwaapetzmhpuuuhkshctnvnafypxmbxaqzfikpdxjosiwncixnrqmeuqjrmqehmjmllnwaayogkmnsnjdcnuyqvkeqxxvdmgglriqpzylgnkosrurkqjcphgyvqrqvyjnfkyjahfplngauwpupywqvgwdrunhamsjkvtspklqqnytvuguzdmhhmrxkhtjglmikosxmqdzvbzxkmdzmxpbbxtxqjhpjfmordctcbplukimprydnutgwvxqgxdxnvcwzbpaslnrxbbeojayb\nkhvzkpvmeodlvtzxzerwixxmhmszrekwdrosjdvtgvfgyckfindpfqgzmknuulizvcwvhnufjxmonzfzgotslfvrwievcahftmmgytwjboidicffxbqhxrbxtrxaoduribevutiwkvrihkphhfwegxqwimwtgxfoicyeniusfrpgebxdwrzzswqchcvzlrjjfhqcbuyiycswotqjugsbywconbfxklkxnsblfpzmefyqkkalsmbxmdocahcvharqlerkohhivwodipuuhhukhwwxdogasvqgutywxcgxgyzmgpumgxakifbvgrizmpmhslavoevgnuqytcspogbsqiadqkhhvarysjiwnjmqkizfcrrpjmbvyyidkiqegkvdpojfbufmlabdlhfwfxivqufogxzukrrwhwtjubdmtjipjdxjyxkburzfhbowaquhxvshtnlgtoqvobrhedklkq\nifrdrzwktuxpylyaeihzorvjrizifwtvezlanvrdrdyxzikgiytjvajshunaammtodqrkknolmeevzdblmyrvdmnsszlknohallfplprlckvwvpkcrrnhhgbynjhayqghnyqltaqlfragtrlzwevnxuswngawfxnpujjuecblylkkdcuwsxlrelrdglclgqhaqfcgllewoltmxxrtifafirkyzbmgysttccgeunothldodqyuvqgiordmjckzielbdngzrthisnokivbxgfswibfc\ncfmxzglklfainckqicrcwhpmvnhfpzmyfnepuyifwbjsfpokbxouvrhmzfvitqbtiitcsgsacufduschrlhykxuszqzhkretcarhgyrrsuckshmcutrhiptsarolsgdvfzmdebaitqpgwrvgeysyuazdplbbisrfleofcaawkyweahkhlvwxyqlafvurismjpegznofjrimhioretrgsaztjesewtrqgntogaaqhqeewbsxifnkl\nsseouclscouotxkuohzdgqyncrxlijdwghdykqkoqeghectghtfaxjvqopinntszlknirhmumhmpeeirllblrmjxptimjfjppmdnhiejdotqagziqvoujotamobihzmzygbdcbpsejnpqirmmswvsjkwpaxbghlsurluqwwubkljfxtevddjrcpucjkfalyrumscdewhxcmizbmlzmazvndysojmccawwoyghkjznaxvdqqyiiorttsuvofphcmsfkykmmmibsixagdlbqjhhqmrlrpsehjwigfhedrzunphocdhhukjkawdfrlwjpsegr\nlidmmkxfjxyxxbbejbrtfiqjgbmrjmvfkivehjmnrrltmwketcstegixyrowuxzimsiljhgwlweiyggblpndacbayhmfwfpnifclobjjsjtqmrvvzuwkzicgvwbvptxfahmbogehgyvhklapvjyfkmkmvhvtqrvcngmfjtcxqiiqzfaguykwmzhviqfkqfojawtutmbabfhknupmwqrpjqkvegjmvvibgjzbbomzysyxewuxmwjvhqulkddrcsimcwltudayxhcznshwfjjegshcsbyyeddpjkf\navautvkkiyrrdypkqbjfmowwphjghkneadseokexnjntnxwfvobvczjzctpzzhduftbsppghzsnusvlybcmxxjuueqdfirmwdabldbqcnwpdgysyuipjxxvpawnmbugafgrrzfvhqdkkoypzhxwddjwnghs\npmdxcppaexzjqcjagshrsfqpttoxttnaoushhfrguxztcpgooqhctzcnzlvwakbnpbqlptxgsfqhcmeymhrhstyoxvvlddekousvoisxdkumxniwysjmpdceddzqchlhmgdizoyydoscwwjdrpzthkvdaelpkrgdgxsejvtvcfwvzmrcegfzycvgnvcrssniaiseovcwgxqzlnyosduqygnrjgjpecwvzrmezcxhwdovipviprkpemagwkcfftmoihvehlplhjpp\nommxxbjekmowgbbrtirauottrxbxhjhjcxjrywuphgqddcyqyeuedoatkmqwuamykkstuspvmdqvqdnwlcjzeqnqsstjwazunrerdcslyyzaxdolmiuwbgpnfdallfmgaohnhzfhnwofrdsvzbdmicdwwevxenpvbkozvynplajkjtkqvbszjqusdhuoyrgwecfytebabwomknttrtdbjuczspanwnrvqjpptlsjfliirbuucthncapvisoopxdiwvetriossfutsthgiggoukhejcbagimsplzxjjzjciucaepeivdfwnzvbufakgwtfsypvtzgvawhnvrybujqtpippmmvrkjfnuenntfpghjgdzkjtcxlsfjbengwrxsthziwsakqqgvrwddslblkgwiyhtqmivlakwvjfztifudykyxaindudfzkzlizleeooskcqfrnvfawsxpqptrnzxnufsdhgebrrkl\nnbxsvkjzdmitqsnhtoigknusekmmyejjldavfkkyjcdknwkbztamoovpbcxxlfnsqjfnoidqrxljkjxibejkuxpgjqbecuzdmpjeequvjnkilhquhcoqitlrhrocfqliofmnrfccwwthtehjabgnlitxgofelawlszfkvhipdrezhoulelrdcqdiawmeylppjlrbjknchvtagnweodrummwubbcpfagzgkuvrfzxcobdtoovemmtsgygimybqhsgjptefpprdrvgbxiugibylvafyjjaukinonxfxvpjormpqcaglxnpkxltogiyxvujqjokhevwvtgycizowojmojorkv\nseogsk\noydoivasxkqgtgrivhnvwzwdfttzbqlklojycrgxxbbwh\nsusdekdusjnpgeubhdlxgjcxdkrbrwctwmistbkgxrwfymjxzmrbbufeaksdvnrdgsrzkfkyqqwytedqpjohqhqnfhxzepwhtqgqrreuaxohjovwolwoflssupsaompambnscmzdgzqsfkuwujbvumjhmpyccpmynhuozuutpwdtodwapoiztjdameqjmfxanytoqarxiiukpendjhcgcdtuvbnvogbtypnsiyvkzshfzlrikwoijcdtbbfcnuuqsyuvslnswwrpdrmnoqpnqgwbrxwskqpastbhgaksmlrfirymbxoaltjcjkrjhdbcbjkbttjskthtkvbtugajcqthmjydpzamsextltbtbtolqufjjizlsrtkxpgagdmiujhuaojualcsrtbucrekcrawfvevftqkhyltokghwrwpveannanxlqjjyyqpbeyspsfgwhcchs\nmeutkluefennoduiviqtgrhaegibmyysjtufqkvvepbonddbkdoykwlowhbfgpwlklmkrkmnfaxetfdkpbadtvdmdfrbjmyzuoiyxrkhmxtqjyzykryimqsgyzbqjvpvbtzrgoamqtwabmrxyvirzhyymgnxdbhmuasbtptsuafizyunecqhgqizqwqlombsgnpyxiyezueguyzlivotfydtdalsudxsgvaeoekwjnjtkulitakjazysrmmvlfrczularjjxmtwhajxoxtwctjykvurmcjnedmnqriwgdqhafepcoqfqrbmjhqwghqygsbwrmsduiotszbkq\nmhdcgnzmighwglxatoepslhvywyozmlmwqftfdentgow\nvilvtaosxheepuyeqqcqdimbjuxlkbdvmwwyladmyinlqlqyelyenazjfnaxcuxrrmqfjszryitwcnjezxy\nvnvexpuhqofjvrknmfatnkbevoekqvqjukqqbjizjojhdogfukfjocdbzbgybvbwtdrweeazaxkuurnhkkcbbdywhtfozyuihwakvpiukglhtyqvniukvxxmjfqkxtvqwe\nqpwtnyjxmnsxzsgxclgnwuginfsixlknkcsafbjaukfhwbdmqibejnruseumpqpqrmgyklytoczntqcuxdihtqrsgxxkxkkgpooriidaiiskwopy\nqqkmjxbrepjqabbdmchfzdwealg\nwullxkjcabaxvxpeezwyxkrmonyuofsldemhdwyejflgfsbwcqqgidxgqwoechnfnrvvhowoqtxzocxnzstdiabujvvjhlfuqkshtglueilfronisaulzpzzkjaigysestcxgqgetksvswjn\nwrfpinkghcupaknqkepyasjbllnfvkjjskpjkokkvjymehmauuqnrjqygppbmyswuxnnainvflnuzhqifdxakmppqmxaonpnsvozvuhpiqlgerayyldompiyezdcdgptavnjdahjlfsymbjzckqyzfprgbfsfixpordyhrlmlkmsuoasxkrbwqptrcmdotayxevfawlgmkdvxuvzsogtbpvddyqofbenduatcvljylgwlmlblmdyuqtzoiqulwhdrywqpmqzfiyudgeebqilkapwxjmwgfuygrwvnvyieitzgzfzxqlaefrzovjzorolctmdkvsghhybvqqgqhpgpjiwvzfnwvssmngppunzcubvraunqrlmsscdpcqhjckr\ndajtwtfpcncjcswowuakanyfzakdmkvruudpwiykevwwdyzrbopwyrjfdkbmrvuhsjqcjslwyxtaycbaeiepjrgwacnuy\niunxfexqchzucgfdoormxboqrhxoaxlzjsbmaowmbypcwpewvxhmhrzduluuicsunbrvdn\nzytzratqqmbgvwcrcgzrbgbmdqtjdkcozgiccgfrwtpgwcqnloojgnkyfxarrpxdxzzxdsnxvrjgdossztaexrupwrsoyarvggtpodhvwvrzgaqjbumypeaikqnyyjzhzdlujvvlbnaennrhkxqzhqeowkgettnbhtqevshoxtqahvbawsuhcihqtyonkqlabnzdwiticafepvlmoibijdxnzwhqpiztgzbiyxermfnqstpumgqrnaqznkzcbmiwplyhfxoqyheqzcsstnegpbfimbwvujcdxiqickdgguuyzqinlmzfcwksefkhlrjzdwtbugxtsfjajnbvbnovevstnxobhfbwxtwbaadeczbdhrqdrmkonyhziiotwqtmamjwzffqcgetkyjvydtlfyflevxuwqnl\nxgleqeharrjwlodooixuoixggyscyvznvjcpkzhcapbhyludfgncbdcwvznuobdzefrkyousormikxilwjerbdwexagil\nsskgzuunuuorhjvnbaeldpuhdqyqlxkdvazhmjlurqxhywvvyfxvossegilwlamuhufp\ncgxzttrpiehoufhvjwvtkkxjkym\nvbhtlsfjiegihmfyksbvxpgntpscauldjgbfmgjpolhcfiwrskunzmgnsdqxkochtwnehufahaoymsmahubktljpwnxvqjkmelfxrqmusueskoticfzwdtwrikcyotshvuepzdfzmpcbpotxlegrxwltnogplzhegprxxlpjsnduuptwogottdqpbcvcnlwgxsihgwijgnqtpmznkflzjtkxtvqpvxzjyhnqhqttanmynjcgdtrujhlorharartdmblldaasfpkwjoktfybtrsidnivzapeqjcaxykrjitfpeupjncnmkxfqnphexoasiawrxiguijfophuflcphtdjtscniqvypiefmcnsotoqtzg\nuydxszjbehoxwukehffkliinqfavvdftljsklxjmsgagduycgqy\nswjfmivuijpidyzpspupznccuhppnvddxnmdzydalpbhqxtzcklzccxicfqdychuxsqmhhgnikerrpkclmytzrfwppdcqxzbdnivksdpwxgxwsnzpchqvgjkylcbvsimjrduqeagpctccjoeybgqxseswfqvgkzykqzzeydylsfzpkwthxvqhnhutbpclhmgfnqdbqozfehkqekmvtilyvyutrkgmdtgdpdic\nxcotyadxtfyzzldtehpvlzthvkjbozqqxrhlearybxngcluljcmoywanqjorkekwtnojycilpgltxnpzjgvqdmvoftlzqnxqbmuwhoxrlqrrjljndleucmyytdgdorid\nqsowzoxkgtoygplhnnpquhldbyllgiomqpnewxiqrwsddtty\ncmvomppgysvxzceuxiqcpdwgibcfykpvzmltkmdbhxqapymswuxmnggzhwbkoxvtwqsxcgogpacwqqejkcoggzfhpegaemvefaorzceuitwcotxdnpghywcfsfevgmzjzvwvcyjxxgsnbxhmsmjosuhqrjpwccqiigsiwlucnqmnrarjvkcpaodkkaalrmgllspiergwjkjaidikwlwmvnzkgxfiomsdjhymfcpnbeafyftyjjjkltslzitjaambu\nyrussdmqrsneruuceqquuxunviaqhezqqvahvwautstzltqcykhuufjfhpnbzhscmcrjlskpbssyzncrafwvzjsqmobzrhgxzsxwhnwbxofbeviagguuvvlvwsxkosleenaqwdrppzxpvfsnotfenvbbckprnaxonjnjdygxmkrbjiwasbrxrcxooaqaucnwydybtecnvqgfkklnncjrjbazgksiieyhfmvfwhtofghoytccpchxpbdxiyssnszgxkwcarbwoczwsvywbnvyglwkfpmhrzfvibwslxvbjnrgppydwcjcmqookovhaiyxqsydrspwgswtvzuscxjjqdneyrurvcjsqwppbvlujpqqafmhxt\nocsbtzebwmbnpkljhziyjuxbudazgmwvwbghpkhmszzbwpitsatihzjmmeykcuvsrvjaejpxihzdjxofpubcijotdvmtaafmipkbycdeimtxbyblzrhimkyosittakskwfcrfiqvhzwejlpsyfkvtrqzgeluwrfcfhxidfafxpqnaqoediepchaipaiusifwhfrcbiqnrtyznmhbjhpamvlbirgbiusipqotqgodqjenijwnetzvvfwzxxpmzzhmymegjuwqnczsbjmspcexbisbqlztovbekxv\nlorszdicaxmidnmvdnmfhqspjyhmuqxvupixprtdrlmxxxswfiugjbxaahpnltpwdiflgthbzsqpkjplznowpkmltemqxcimzqmewybuqoknqgoortvpmihtpvkbpvxyqyubjimjothcsnnbgdkvhnpmyxvjtqqoxpsxsuwkgapguafkpuuywugssrbmgccyzlbmfwssjqymsdhsnhgoruakvstfwyusyheibbkfcaxxdurdnjtwujpsmyeallavdmuzvetwrzvkykxtxxlqgrvawjktvbqnjhxsoxrtyildbbulvhwzugtlchwafjbmldkdlnkhrvbydjjlqcnbjkylomztamujgurhbooqdfsutaclrzpsdhkqxtzmjfdbrfglruqljzgzpszdzqsxuepgamnsgcfxfmqgnyebphudfxifcqsifco\nmqowanytivxmnfrhtppvjvdzwonkiliwjglysginmcxuichkuprkruuimexaluclwuifqpxpqlvcffaehyvkjitlgtiqgbmrmbbbwrfattyyrvfexhfurelydrrpcuycnbhyrobzxanhnlezjbexxlzuoczglyblzhxubwajtzpzacrhyrdwvodcfquhuvojuyvffudcaxcvzcjccgubtdfdzbmlrnlagkgkfwskgdnmeybwpgyfpqpvwtiwbimxlnjixmbxowqsrelcagnjsjjnkgbhwdvhntfxwicqomteqbvevzwzjokzurxweuvfrcbhqukmzztwdrwcodofydyvobkmnlodwuvwvfrkblhzaxcbddzkbzwjnjkqyhurfimlfpcevhigyicfltypeiqgxbdvjirksrciujltivgilecyuachfnhurtjpeovdpmfcstoqltfutcwnlecphf\neptytuurhgpbbttpasiegnrogswbzyotmkxzpmjfuxmocfejmftzlddtwpfqtabsfjwycxsbvaalrtyruprvvzukbgmsaqitujqbgtorlvdtijyllsjafrwbfedrpr\nyzelurcrearzkafhxxqtuyvohzghwrkpprnhkzpozetlpsjpnjyfapyefjizzqqflqqhyjbeyivfsfhqpezjytxirxnucugulqblegwxwhkhiuhjwebddroncanucepfrjptqakhyxrgltxpwepdxgvybldkytbdchfoemcpxqobiuhhrjyfgnfffzxsfpeukntwurtczwfwywcsngejziblyyosyajoyqkpwnrmvzojhjxqvmdvcqhfdtwpfzqbmebwnpjeofoyzizefhygspzymmcktkbevswboqrwhjoyaxihxxdofozpseivhmblmelnwzhqwlpkiielcixxiiwycexgzehdoayovnldzttyravumu\ncvipliavtmvhdrlvgpmwnsynmaqegfnukukwruyzfgmuxqtlbgrowveuofljfuktboklymhtnndkacciwhczouazibutrqhlcoghmkdmdpkitsxwwtdhcymwafuexsdaguundqmrzbljqsflraxkoxkehlgnhcfmatueoubvmgfrnqbqpplxkttzcwlggbuqcrdjtnjivprbmquykmlcpxcsbjdszbswmtremiwzpsxxqczqcrmjgzqfpnfpejbefixillafzeygsiwiinpqtwcbumvobxqhykcjcvsxmpmkvbvprrsj\nqqugkwjvttoiebkywuolzkryksbnbodleawzrovgzcjxpphibisxkqymklqbsegcvezfqkxobdjarjgftfeblxureosojovaenngtvfhuyntceqcqhpymszcteohjmveiflrvbtzthxossjyrnswkhxriacbiovwkpzkogmhspjozuwenwrsjximazttxqaqgzyjfnyyprdnqvnyxkeqgmjyajpflevxqlxhqdenyacvexzijajqfxmxqowxetifjdyyogebdkkgdftmbnseebheaeijkepaqhxrvyzgmdqzkaldzztpzxyrunyqdhjlbwscdyulntaipjoeocsmnivtaigcnkfzytliboyxvqooerbpndefadttiiivlikkhuhmygchnhesjgbjieicxlmokmdswmzmcidlcbv\naacdidvufbhezvjnexvabfqbnqyhngkjdghsuqaczioxudaxqtjqzlfyksftycilbofolccrhxeckuptxzafyxfynwkvdfgsfddbvnnatoniftfeduhxahhwzazgzwtocngrlpgxnvrnzzumcomjngvizdaadypjhqhiafvhbzlubsyjxvfcioxcdasfyihbdqsrafgqzwefzkzcjevadmmsyatwepmqcmjifrqjdmhnlcmqcreryvxshqagjxtmfosyucnuzcfqatifdmcuvyupurzextishoomyttnvausldoslngvmzrfglwtwcufubayawdqaknmtihdwiwfffhngzxxpmhugpqeistzdlqlrposnrmproqjnvempbvemjpepyloemymzgyobuvyyaduyagzrjvghxftvdmh\ncrnklmbxziwitltudcqotxcciyhiolbxkotkciwwgfjvinylcerltjfbtavennvqyfcsxyptsassspegiotrqyiicmnfufljzcgiwuvxxfdkmgonqwkjnyirpaljhfqrqbcqbhwdadyfrktpggscbaiarxfxstfvnbznvgckdtxgsdopvejnaqxvmflzymnphqeywzvbgrnkgbmqfazknqxdebtwvynaxytjaayissxwvkiuecgcrqlskhbczxzcszwkxwiuhpps\nzhzsdrtbdbteijmcfdnmrlzssrwpztdookfjiemyiwdqjiixoioznmjgfpsgqnwxetpnuajdmpufcicwpirgeglcgiwzbtkwubwxmhuhbmnvviyiqzywxvgftyvobwybkmrysosyat\npgubjzefccvooakrevmpvwdezltpnqhlmabuhckztjjkgnwcudzvufmyqnvbqgulgodmftuvbusdmlnqxmsernghiadkoabhssbnxpzszpgykunpryjvqyjujxxcdixmxsimablrongnfzysemikjspahvurqhuenvfmeprnnlghstowawomqheztdsyzigefldfvnuwwapyzxjrxgfjczrlbqlrayyitpcekvwjgsxsodqbcccrsioojeatbcvxaqhgkwhyvrycikudumgqtmnlkozqwaikwhlqrbugckhzcwppeyryvcqrnbzkljvgyitsaveukfpabjhbzlddcphpcpwktxqpglnmplhudmierecxnbqcjecgpuipii\njdfzmlukkjhf\ncdvfqjhnkxfgldsicdwsbsozhvjsczwiglxbppjjednxsqgxlvsonmaocdaqvrkcrdqiyaydvfelknkkvvkysziofmywxgiectlzhlhazhlgzyixocfevoottdilgsasjnxboxmthwrqrnpwsdpoocnohnithkgsjnisjgfyfkzwkpwsozapmwgpczdebvwymlbcodtsltzpnbzasxamfriglmfsneddswakluwgpleejdiazrtjfrhlfutpnzcvbjxetynulxbcikudymhtujmiouhyhricnxmdvmvisdgkhbnpyuyrtpwlwpibdigehkajtgnnqjibvnbiqafrgkcqaplyfgjjwjvnuhbymbhkshppdmqjqakipdadpzycmpcduvdvexgdtvnqgggfpckasrjuxgcgfpcsu\npyrzrzkasnnlqqrofghkifibbluxcintcbbwqrwndokfjwtqzywckztryxvabjmiabjxbwuyhlsijdxvlcxfplrjgwyptyomztgvafzairibctcssytfmkszfzrgjvvwephaenwjnnvtcppmsudxkupynrguiifjaxlpquoulsstgoejpjjffiqwboisaxqclnlskvcsinslgihlcdcfvotwsspnupyeyaszfnorlnzclyzkirrxfgrqpvyzypozgmjskzzkoobtemsleeuchrndirspgrohusoxddxlrqxgmijsuxqlreqtha\nimicsbxrrfaxfrwbcaxhhpmhnmtaorunoxkmesdgkpjzgkrguoftqgncjfgimismhkibfbjfkehrrsehclfauetkqmsausacmuukczakmgdohidxcwybwlcoijspjjpbhzgfjjuthjsrbysagkzaihmzdrxozaerpoqgeupfhwbmhjzmomaowfjnnbafgfrqhezxyvujddvpdedohzqxmbsuoejvtaerrqwfnbwbwvgwocvoxvrsdcwzfobnntv\njflznztzudjwcwxpqetptzcxireszweaimieuhuaoalsemlwnusqtbefywcazroturfkyegrcuctfufrxgjnbbkgwndmnldegqfivcnlnlrhqecfrzrghcavnfiutumucasnekpxgnrxmvtnuhjwmugpuaegwtxqcutrejzhexblmjoyufepemiomgiscsfudzjwrsozojmoqvfcthycnnpjoidxwwpmrpzcsaeehzsllzdgsnwvovth\nubcubdbfrbhzxyjsxtmovnjfaakslvkztrybmqxxunsswyftetwwbbvyyvplqoobhtybkapbkqtudieygqiqbmruvuvnglfsputrwrvnqhuntehgpqinwmoqecwjrqqqfzbdeltswcgjwkqng\nwgfegktqlrqccimhdxrlnxgdkrasdtjfnwxfnfnqevgmmhehyyubrijckjpwilockktzjsefwgfzugodhttpjmhnmgnmduukbhugpqauq\nukqgwcunnunvkzkymoefjbejlkueuocaslcubxllwrondmmmbbyoybuoggnfszxnbgytfcogjgqebqeiazyzherhkfymiqlonkqxbyxnc\nfxmulnupvlevmijedpseeityyzwdwydqokrvietdiysaagcaahhrxoqdwjuvhfanxejighiorjvtzmhnnbarefybukwaqtxjyyhmljtzxsawuuokgdqriwvknanxdnzjyveuvkaismlztelgeatkmlwclhqzokrvvunsxwyaxbhupfjnbesfkvrtiuymovrsgxkzemswllaxty\nxyxytdskpmkzjtqdfmdazvteroxcjqnlepblxoezacwypwvtgiuqgkbciqotezmhzbjqguhpoomfqjvzppvmbesvzmqxclvnxaewstrcwslfddckrpjfkwbgzxhumcnhpjrmmmzlgez\nhsagicumwwsqhhmvhdafolymtquhyobcgmiutwuabnxdpwtfluugbmcxfteivnyabspybhljzunybjyboutovopevmhdlluydiawouuiydscyeprptkmllivswbjgvhbdfipzjudgfhkceiyfqgszfopacifkdsnmuqdethwvgztiecuefwjiqawbzbqgazjbsvahdxjmnfdfprbmhejjtfgbainguesdolsnztgropnzpesvldobnudwuopxbswzamhvlnnsxxsoazvdwkntpatbufhhhhcazgwkozzjshfzgitekohnyjxgdatjyddn\nzekugidkitcpghxpgywcgfmvwektrwfeqowcguqlpeooupeaclbicksfbszyjigqbpjuzkjgihuohlaalyyqzbfemucwjyazwfmuabjhqfrjltcvwmnjlsqptxdkuximcvjnxracngmewduevoueducubszxmbnxtygkkfbqikdqxbwvpxxlxjvmrtkisapzxroelcgumuszegbkpnyhnuajrxprvqjqqaxahqijpjhjlelieskvqhuhmktalwljfrfuhwrnhjfyawwvjxlctzimzzlvnzdszxeqecegcbfeoswpbcqjbwmyefsgbfrvufwtwrqrmohmedoscspnlazqggebsccxjxswaotathfqziolidnaurrkvvblcuuwodgdjtpwuwreaeznyfrrsssqc\njxxsjjojaorqjmppvaxcqjeqtdoblugspycijuxltnfbgejqnohkjmlodomgsvteeegzwmldabcwkzdfamnhlahwlvmgflimvivgctczkjtviqqniqlpkbmtpvkqlcqnkbazbwsmtvbmbywbzamkvmbrspaowuxildhvinunvsjjfianwyswpsybzngbasjtlxxrxdxrfawejbnhjnqebcurctorjpwaqqssohiwizmpelpjxwitcwuoqfqbnnxalgyzcaremlxsumssbexaczpnkawtpouqrtqmldycrjiruayeeqjrgfztcbuwrmzzygozcxkwvlrxvmvvzhexfuohmjdrvknqcpnfimvklhwzggdnzwbsyutfaphlmxnztuijdgwopapvddwjpnofjttvcqenmgwasvnurdkmeygeltzmpnhapgfuytnysxolkgxjheuwjbpmwhczxcrrjnligxrycy\nboltddxwuadnndaewsyccyrwmmnofebngqmebfzqzbszngnscfumycrbdbfhafllowxelbvrqaadupnngyfzjkfbbtshugtszgmevlilnewkzvabwyskskyvcbkuznpkaetudoqrulgrfmpcvqzhbxlpfpwgyvowjalhjgrlhwbflgenqtzrtvrrqawzyjidwvtuegnnfdrognxtvwachttglubibellgtlzlqcvslfzbctdnzslgzawymktdwazgojsbleciub\nwerhdfvrfkmxgvpnatjquvdbajmgvqpshsmtwlsmtokzdfhblvvhqjypwvdprvqqeaqrimngiyyoyspimfyzorlkhpkgjcbfuyqebagvthwnczgedkcxcaaljyrlurqzlryzabxcgnpkrxuwdtbscmsbpbpidvrpkdkwkjrdquooqblunqkjjykkxgtwlyeakdotbqcuemugyqykbnjmcsgrkackqcxrhcygvqntosxblmimhaznmrgkenkeeqotlontdnbdzksojrfzsqpjlokhiswnykvfniokktogwiczwpvmuetwmciivxyxwlegiesxbeptrlckayqjbhksaenzbreufdayucgvrinrdqaghuocprztxqtkbqgbzathn\nywvrhthlhynbeiuabxkgrqcmxvqxbhrxedmourlfyglypmghsvavkykefoi\naoyhdbzfrysyxtqcoixbbrzedkebdazjeqqsxmtqpaslpkshbfxnykusasduttjjbzxpgbnepeoaerygcbcjmznlfuypswzeyfwkclsjxakpdvsqpunarpaspgipfwyrfycvsroabkcmkcgnqhjkmqotwlszersimlnqkbajbdbrrobueyaqlleoapdlzbdpcrgebrgszhohvbtoaphnynowndrkpnuxvlruigpdzjyfnuiwskyeeioogyjejqtbhudvhbbyiuatfoiienlivthllnqijnnuxvvjizltfhbtmwehlunyntrzwvfbzwsysdgeejxthgowsyiquameotchhucuzjinesflmiwmgsgymuoztmjifllhqnqsjqjuysmgowdeihjiqaeakx\nvxdhwmwgfagqvfoumtfn\nykdvzjdjmobjzzdvykdzesooyuocdtxjbohgevhvgcqfgbdxllomztugrpapldjtdaexdhgpsirojcvmqgrjkqlrxdxwvxthbeslgcefqvgadcfiahvinxmzbahnpewsgnvzclxttoezyslzeizxorsvngudfpzwylfcstspxeskvvyypimlvbatvjeegbmyqlkfrhxyhbtpazfgtyiitdvceabqtmqlkccshkgjmllwfzwtbqnoxhkeptghvxfobszhhftowbtfomcdfcpjsfjanbhkorksnxwbijjaclvfocuyccjvfruevahavthkpsretpiulbecovbukmsuvdvkpopdstvqzmgabkgrmwqegsbfduqgqnrvpdk\nbniw\nxwnarpiosnbyzotuynsassrzfoygdfhappbaidrtlncthxiwvbaiwfgodbyhvatyzcficzrhepotkhjpapyptqdqzebepypgeihngnsyqnqjimgmayqhwwnaxssorhjfaxttrrmwtwaysfhggjagjsxousrejdicyhomrgfchvkflkztabngsihahdydiutvnhngzrzyfdbgictkmtqccinxfnvqjogyowjfyloltlvcwbyyrtxeneyopyfpmvlmudfbauueqeyfekopjgmxergtfdykwpopktnxwmhgwzekyujlsmtjereqdzmozmkrnbdtmluvufpbwroncsmzqocqbkpquaxzhtymerflqzqqqsfgizjuuehpxycqfprpfyipomfwrcqhiflddwhkycdgcktmxujomhxuemclpbdwvlnavoritkglgartcphkjeakdflkaksxgzshogpnqwwzphgzbnclewbcu\nzlcmljjxtlclhmfwaeecspnwnhapyhtoggfulzxyhmyrymwbsouxstpbuhcisentwvxhssqiwlstrxprxtuezclussakxizhmszzawvwgxivhwxsndmmvjuriddyernlbutmlsknnostkolwlwpblnsyfxqexbamzkeziyjajpcbrkjggpojgdattlwkecwipyfdvxjqdqxwwgausxyrnqkunwsseivbzlrqtqvkzbteukmddulqiyyphbobekwzjhpnalhmldrytduaqqvycpqullbboibogswtjxprzpljjkgbchqjcjdpepwnhauqeksdyfmqfvaxeqaklojsfbshuftqjcsajnrdohcewdbdviwvbepofxsuhvoomfpzoigfrhjsftidseuczsqnfcyyjpsdptbdrsxrrzkuszyqestreufhnjffgsnfgpbnh\ntckttscehxthckudmwswayigodmrcnziclrfoeudyorkgdwvxsfnlnozlvqdrfaecxvrhgajnuywwjuxhiouyufpfnqznyuukimrjvkwxwkdbrydwycvvfpduaqaeppzeqjvynxxgyumznbgywajkestdlhbtefwknkuvwatctuquobfezosxxvrhlofebimcjfdaoiabdbnqmqcakvvvetodpauuvbiqvbjrxvwsjqapwgvmovqotkyywhilvmofjweutduidimqnsksbsawwcltpymyyvgwymizfdanounozzpoweyqrhbjlgeulgjuuzdpktuujle\njssgfyrccbhsnbhdqdfetffhtyagszefbykgxwmpyxkczkxbbeodtmbesztnnrnafgmechfdnxayuqoxxlltkumegxavnspmplydfbwhmrczessuphdexlsvxjnisnneeczpodocwwrbkltlthxqqeeagfihufselnuudimzyfraqegwcndcjmmzpqkxjohdgbbapfkhfyusowpbnkaetrcadaoxmasbsdqptkhrifxacwoblyqazqmdsemnnyuuzrkvpzuhkjsvmownubkztzrilkjwamehienypttwalielregjusdbcmaunmfjlcmwmmgqeiupkdpluulvgipdovxeiegkpicveaosdmvxgwdodskwqpjegavikjvnumewsyrgdkjbntpnubqouimyhiqsrjprjevhyentowjinnrqultsnozpjbssgoloismkxdfwhmflqbfixtikyofcdpwmgjypdzytes\nnhxcpegkkoftftkhsweoaiwjriwgyszyceavexebkayrxancdrradhygouopduimrbhgpuumcasgbikmyxvunwuasrpbzrwggyjbxvwjkcuttxvzjafwpwkuiqclwlmdmdpuzgyvrakesmdoxvuscslucyyokfphxkwdcjvdjactlevaufxaqolgygktplkllilptxukuutkqsoawnuiayoekxtcjrrfcfetuanfohgglhzzfeeeaqwizvtkramdcipnkpositxoyahejtciulnnooiuruvtbwlebcnogqigrxwffnvjuptiahoyzslhkmutvooaasvhgcjk\nnrhmuzaizxlesalzwpovduerwslybpgpadtoyrprgaiicgepzycnjppoyhgdlqexivmpkzeodhzoooydzlhmvtyvpwjfyizsbultnsvjkjwxdpsbyejstexayjaqpmxqpvqaueqykefgrxwavwmsudshfzwmbobufclwiwsxqjrfetzxlrbiqqhsimfvehkinnnyfyypsyxxijxsxzchthallddhkayaslxbsxysczctpbmwvjkxbepcvrivtlqxmtmokozymbuasuhdvndtyjrmlmepfmaksptaoxkivjgbjrznxpipvjjo\nuzxqtthiqxupncfeoluesjjpgvduchcajaaaeovvrvqkumumxvmezsswfdxfibmiutbwxyblsffoutrdrsszqyzgqsryednwukoxpqlwzrohthaqhmuwtcvtknyrzrxovavuzoyuzkbsaenksvfxtxqliwygymltziycgjjrjmzybzbhcgtlgzjbvlbocqbrymfespkixnblorhiusssmbeqdhqfdojktqxaionbjwckctdbajwcwoeegdvtzfmescwlcsotocikdeywrhwhkffxhkbcckxgmevowobxrnfsjvavlskrmmdvldxqsfyhzicirmqanatmodlqxdxbzdpgsrvywwdexxnyeohostdkxluuxawhvyyleoqtzuswdsbaewjmuxunvpxqpnfdxheelftnootbvmyhrsiuivalvkgvhxodnjjqhonvyhqbkaheavqwtzjveuzazjjkdnuesfumfhpbiwumhreiyvntps\nppwkcdthiyxktvhopidbyfzgzmrcqvogkkqumchahvkknxvqebsmlhhgnaqmkmgpphzukbuditvsohkfmppducahfzaemusrublawuozeaexyjwlzktohgsbhvggadjujvsqpcezvvmuwdxvlmlynlruxbjetjpnjcpioutokmnrrmxbmporsaibafblwbgnvahalzbgfzjzmrezhmscjhmndjhkcycqdptxumarxkengvhtevbyfviauqikethmzzovbdosvmstgewutvvchyzqldjiphpcaygnrdbssmwlmaewxqkpeywryevwrzbqiuhhtkmfclzilxw\nkmqflkufakscznoyzfkljejdxhpayjgggskhmpwspoqhoqoauxitcvdwkrppjwnmenmrlgfeehnxyaiwomrkqanuufguvrwzcwocuqoezogwqvybmlukfphysjggr\nxbdgpioqgkovprckbpbnzdeyekouheftccqhjgvxcfxgqelwaqmibgyddyjxbxuommvzukkmuayfqjnivdqwenurxawemymmdahfiijtvkmwjrqaghifjvycvbwhmjcmuudendvrlhnwqtasfhyvjsezyplvpynjqgzqyppoayfnjsrmnauwthmrqnonneaxduombtxaejyplnixsvncmitkeyqascfniykpiwqdwytfmiufljsuyfhwthtsoeiyubtcpdneydaruyykrppqrsijsonrlodtfkcrmxnqpjbkhdynqchqfmqtlsnzqzqzoaraifgxlmtgyjdujsshoxsbfthqjuhqlkapxrwkuauimlmauetjadwzjqxzfrbqvsbsccigi\ntrajecylsbhzlydmtexsqkbdmwltuhzfsugfifqoeaovvzabtlgqkrmnlekehbzvfifjabubjtmszpieqiutorigfbmfkaizxnntvwaupasmbiglsmuwppejpwqzsryzzczpqwqbjgiwiygecroawmwmucbvauyqckecstxcgqzudswqpmfkunauoccjbhzbyqhdfvavxoioyxtzmnohnsjnsodxwjaksgnfickftceufuycbyiwiciiflnhinglnpfaqntqpgbgxlttlwmtnpdslztcezkdhjwnsdqqlevnylxioqkjrbknbldckupdrsnttcvwsfzrhhtaitpynjpekfjvjackyfyrvkucvpibusuvflhehklqmlenzajoomazrsagfvphcoyoqpqqcpenwgttkvjrjwvwaosxvsywazijkvxuidcpbkbclrzceobhhntirevesxfvvopvmmekvidfslfahk\nndamaaceialnpcanczhdxoqppgfnkcogzvgzgcmjoiiomphucrisethkmfmtnrkeufvbesanvwbbncufdzvrtisyrojhlbljguxorka\nhyjshnfxaorvkhtdoskvfwkocupcjdvawmsuuaiahzjyberoakudvrsxccytxorbkgbskprdfiiycmimgldjlmoednzidjedrcvrdqpgfzmpzsyugjpbrpybrblfmythzeosxshhbuhmemsybhnlctlolhqjduuarhaskeaeadjqilxryrgzaydcnhbbxrelfwydyoqfurytonajgtwnpwunyrgnhmyfjgkzomlenaihupldyubfxuciheyrnnbqyi\nxpbvmqrzfwdqdeyvwutzjgpkrbpumnptvetcicooxhesfpgtjeacybwmuxsfejabkujhskcdclmckbfzdykesjybammeyxxlslgwsqxheryprtkmpvhiryaeyvxoqjbniuyrhufgeuhayuvflonedfxmjuidmdkeglvnjtioktglxrkwnlgdiyufsyasxxxsktmxgdygmxcnprxpztdjsdezeyqyzccohudletqafnsnhpdqqcgwbaehpywynmqx\nagodiisklleqnvklewimgjgodkzzdwkdapwcupaagxijaxjcoorplilothrpqgfmgeppkgvhadkdmuylpvishbibzfxoceblnlkwmgpiauupmlfsucojisbbgvivvbhlt\nzgyvqxrfscgvtfwueejhwgcvaofeyqedqjuedjzsynnchrlosddvkbicfhkxcvnziiysrjrmdhqdzffensvujonasazswnwfwzkktjrfdbizldfgjviwarwgmjuzhwgyiqdafsmulgyjsbyozvvjtntgkgfnwkiqlolnhtyabeqysxfwruriucobbfwmhvgklkjyxxlgiwetbjlrroaoqhidpkqdhbmrpwcrodpcvbqoxgbkcjfwnwcsnvpqepwazqqtfrnliyjntqemnwrmydkykfgxrctwbavwuqffmcbpyieptkgcsqlewxxuhftmfryobpdluxttfhanpdfueorfcwyvgsznzanawgtlkyssfrualofttdvwpxwvrbfnccpfzlqifdhzxhsmxhxnczzbcozjiztqanqnb\nvikbgttwazsyvqmjuuamkttgnghiwovogmqqsxgpuwkwzthmjjivskwfoiymblqtkvyglyrolfhikowrnxhkcnfcbgcddtimasldmczbjhduupirwrlrglfhdhvxinrqbqqmjrycmtopgiztbpxvpxxtjgbvgpxtqldlz\nmjwtapuqauzophwjxfqxrztoutaxuokglqmnpvpskwqvubdmhccwbmzirkjbmxaryzejaakeeeplkornbqzflkhtcaipyyyxivxmafwwhrhuzbkwvjnucogairvtgolavsxturs\ncmhhpvvnsbolturxjeygclhkpubiuskaumjxewgvtecajjhzdnuyjiiyyvojnndfavyasicxfxsueovzuqvdaxrjeovvofcdvbfyqsvlwbtwreaguspfvqqqukoayhnunkpnltymyccfxvgfzcjiyvugpsfuhwkzelwmfqlqpsnmxdcxnkwposdlbnfbbtmcwhzgyehawvcrjunkzyekmfwiynjhckmqcuftteyjikuxenjifrwxsrfzjqkhotchrqzrnszhizhcvexhjungdwcdgcvxwqzumhbuonjclxwrklqcrpivcgqpiuuvozxrjpwxlcapjnvxqyyahoeznysdhsnanzjpkqjdgwcncdteocewygkdiz\nvkbfdsofevfgvrypubdgzuvjrwqbcsmhbqgtxivjmselcmzoiebflmhkmquabivzyeqvgccypzeyomrzmmzutldkmskgxmfqxkybivyccyvokvxpxloqlvjngjweeatkohmconnaeibdsowiavlbpcvayvjupiccaoqtwltpyvaeyqfntyehulzzvfaqfnwyjuksrvgdlbrubnzvpvchntfugiamwjycsjvjjjfsbvfhmkxhhjvdmvuunuxbtfzrnxcz\nnbttxdqjiykqwtqqpqicmyuyaskepzvoqavjfifnapuzogrgzoshtmniftomnpsaecwsyyixjawcqwgvnjzqywkmmomleihddosglzdekgehwyztughckqntcwctlhokflolivmgjmdtxxxeu\nhmynhp\nalsckmiumqwhdhwakwgqtiupjazgwftqlbrrmgnqqkwktckpjnllsvrpmnvszcnlehwvfaucxrgqbmihvkluoznpqzhuiqdztchrxlhogxpfbthincetbfuuqunnvdovzlkymczmtoeewpkxllfzhwsjfzrchazr\nckrkyyyaccduhbvfsxhpyacbefhuuigqsbeonrechakkbcfpfxmyuwgcgcrfubvzmuuvldutjr\ndnyesehpuewrbuzaezcmbarrwpbyyzchiwxkzolzjatuyqkmszagrwgudiqtehwkqfdzmghlaqwisnoxxbmphwrekdprfshtqlbmjcdwdoaxokxcbzwqbnfuwhyruqznqmxuomfqjgwwroxmadfcejxasibnhjkwstwkkqxvvqunbdzzboayvzzbqhnjxukbfloxirvtswoejwyfzbpvognibgpsgqnxikbdoeqpaetjyyvbsswkbnezsnfesgsyweaastiitzregbsnniieoiutvzgebiebibytbxqkyxraubywcjznidqaqzrrau\nprlggskkptgevcqlcthbgovgeslexkhlcnpempxhscntnhmflpssevswtxrtgwvzwvuqimwjbttsoepnokvhftzapdcyatmeloexxiukmsyhicntzoqhkjoidjgtkuwrwrjtszygpxrpjpezqyaazkskqvckaqdpgcddxcfnvslcjv\nhwyfwtgvvehbdbnbensegporordofdnkbobzaexkgyhiivxgdvfkiccehwrztxmvmezbevhhpukxubftsbswtufidyjwlgxrrpmzdyjbpjcqznvzdlyfxxbnmcgoemhwlgahklzvoizdnscbvsakutqfyakytxoodroeidwgihbrwbzoukirnngndqcccwtmqdlycdzyydedxdmblmraxmdojvfotldzkdpwaxcoraxzoishqtcpbqjgrmucvnhrnmnzfdktnffsddiozdmrrnanfakbemqeydvsfjkmirkmiamvgqstqpqvbvy\nqqpwgbcseametoypfjyqzgrlhdhenoncfyncdfvoofnsrwuzevcvxkdxlbqsvpuonoenafqtqacxnrmmoexegwshsaztnsdyqnrsshwfcaaovzcliypaxrpnxrkexznrcbdhnjtvlbsoaculzzcltoahhhyeyopekqaowwajzynfxfdqkxfcbjkqdjnobzbubnpinttcytxzd\neirxfjwdkzkuyvdkhplqntifusdinblrxvvvmfnvtoalnwpohhpyloidevhnwojfpwtgaforxweynzkamlgjgwfmwfakx\njwlzanuoulibrprvehcdyfrgenggcgrunttkgebrexstmjloaqtjuwjtgvuoficgjytwqgxgbpzbvlbvetsivsyqalqotfxxsgvalgsaxzwwsssstkyicmanvyzuwdwgwnnratawbfgshqcdiagtjpedlpqlxrlsqqwnqtzkeoeyirrldjkmjgwnagdbqzbxiwgvvlexwszqijlpgaljfgvoqgkxjhpevcklpsazionmfxalosvmswluoczprthjmqyedspudeywlotfgtoocvldopggkapppdacnpwocpttflvcxnukmesymenuarwtwdgbtrtjhgc\nvcwjimjyrhqvhucnnhpkvghrhkcfpqngugnwiivyaqfflwsjvhkfegjxjegzydlrczeoxclogoskllqrbyvsxifofutxmzhcocxtqacuvwslzpzgrzdcddshlyuwulnwgaeyaygzqypedzydzbxhxmkkiegpwjddxlsvyvoppdvectoyauxjwqtbgzsdtgugdtfwgdekqlbbovsjqqaryvjufznoofxavyvshwtpbjtshvejhzypgoqinyeziyfbupczcftbecmlyazuiubbfwmehhcffhrbvvrtvgpcktxnuyalbtvkergmxygnxadakvixnsz\nxzluasfzlwjmaosgvbwpvbedlkysfhzoyxywabikzohdytynozfrcxingllltswwwafwlrheueogotij\ndingfodswfwubamhyhtghdwaiyqzalpszuuggjdkgxwnyostvneogxthhslmqioixekjuaxbfjnbdjaosqmxzjvwipcajeammshxeazfwyotyindbrhzregsmskjqqssnlyeukjezqujaqwqhmissgsyvmztrmhqhbmpomdagojwyvlidunyeqyyaqqkglraspsblfikfjcplnttvmjl\nffcvegjanxjhakubrtzfpjxsizvlswrpcyhsgjsqpxwuowzpnyaculgrxtapabspbpcijwjdiakrib\nbkmcebdgncxtnrxpbjpnlcuxwhyfpsiopftlkigzvvczzcjksszbgywvllprnifoifbqzsiqlmwmwevibufoixwprpiobgfitgzdrsztdjnlvolsywehyvhpeevnpusgkwmurrlufauhwcokqfoxf\nnfdttapdniontqbbqhxtkulfywxvfoudwivferboinuwoxqfpefrrerbrcicyyqdmbcukcohhqonmgbkwopxendvcpyilnftgdnlaxnqljuohwrqfazctbpacqabnyyvvbmwpytbbvomrmloaodrscdjclcefjmmlxvvbkqgxgufxulsizzlkibwprywqvmeykjvybjtqkfmomwqmjnesfrvilabvsvzixgrcacvplbkpcvcaceetqbbdkeeauindxdfovupfpcosixruokcdmigqjytfchrnpxcozohzqllclnqvfzyslacbhivckjgyvfddkgdykhqydbdutilizoqccsackxritmsljvyizpdpjfzhfgtrkdngxcohlzhepfonfmctrfaxcsmdyseifliyseifyfgy\noskywxxihhaoqjepqdofqzmraabqdystbkgnsslnglbrpctmvgjijlubyculwlotuphumyjplxpzrvrbqtalgceipunhwaegttfkqqusyeygnwukuhekvnspoobiipshfmufbyyltfsvqthmvo\nnsnzgqaqbhjpiuumzfahsrihwcqudmanselyzddgeqfxscnwgbepgebyuowkwiaxirugnkxypgqaudklbwchvehoakhhpaswlaxwgdhbofpjnwajpdffvkosyszjygncgsyhlmmwrthamllylcexruebnbmeqwmcvqjmuiuxfneofjinfbngnjdfqadpxzwteqrdwzsxxvbzqsbwnsqqsktxokctubhweaftidxnbesgnemamfehbmmpphuhcbdhtafmvorwdbchfphjoyagsfdonddelbxraqvunfxorahvxwplwedobocgicwtquejifxpbeeavrluanfysnjjlyioexdsnnytiybxyavwrngkxwkcbgbimftsrmkkqhsvawctxojjihcbzvevezbapqxtdqfqssqwrqifuzdewiuqdavzoum\nkxcporkwocuaypnmcgbpvhqvdrfcwsrqrdqvzqgtzanhbmpycqiawbkxkgaxkmvvrgcaesrkvkihmflscotrpmltmhvazfgtkzvltnzycsrvqxupbpjfkquvcwuspdaqbymjtvthgbsvrfhvkkgvocygexnprpjshuxkzhmppdfsuzjhjexwloncwzwienaaeowxfiptsjcthylglpuxydwwisolmzrltliltqjyhrhilkzeqbqfdzgvowuesqkbpfmkudnlmjskdrikpmrqbaqjbpgxgbeyhgszwcounynovvpzy\naibiyjddqpvquwmqyttkjugnhhuydxlztockdqrupyzjzrutojqsojjvtrlmoyebcljlkuivnupgheblozoakdwqezhvpmvmpmnhdvqkbtqzwnjyydbcprzretkjiivhbzakpluqislnveldgzebypwilxtmzhu\nzqpusyretpbcrkkbbqetbbtonqbwshjsdavrdbpekudstisgzqhriaplduiilotakgewtbafijubfjicjxurwjkwosewhcfyenccderjhydauztewifjxatzuwbwbaxluznqcdlfbdfwxavjhmppqnretrnuajrkweugierzybjavalqthlrhfwnbnotjeqbtyddvikhwlgsazhrgorkcylrenodvzcihnfrqjwbddhwmaeedvfxeodmvzxonzuudkenbdxwylaabgigaydsmstynkfghsobagcmcimjdkeqrdawbdeczjftysrhxcsjqrqqrgqymqfyujhwhzkbzvhjssefzalxkw\nwsriyaynerybimosvcyichqmzphr\nfhlnbfwmlvfhlqesiybikzedrqwudjhysagqdljpmmayuydupyjrgnlqvnephhlbolefffnqzrsmbflvijomablmugrlnqoaojgbnexhnathgpnuqwfmjbocmfyipj\nwsqpulpimzelipxbfwoigzvdgpwjlrnsqmzmiatqhpxbfacyllgjbyibtcmvgljsvkkletzmqhwzzwsjeabxyxduqydhwzsoblsbappruycmnlmptcmtotaswufnclyckebizrvwxkhfekmkjbgpdjevvmvhqdrfpapljzuvjircmxgmmbpixmzzmsrjbsivhwechzmnknjhvzndqnpomfjlblmlnctqbpetkhmfvowwlxeidcjtdeefrwqddpfrsaodfwwciiumxislxxttvcyihuktjzyppxsdxijtxzrlnqvufuqronujdwyvvqodjadilyonuvbpzcxmrbmsvkyanuedyigpbfnqkbwk\ntiwnlcftbdkyihbamavedrbmenpntthnjpbmrtheqhpanpglqdgjihgpfocyfonrjkwnuavurajjghgxbmkkwxcdvyohgaqzrexrhakehgnpfqhnpnbbhznwpgsilrxluvnvzziglisndubdclpkseevyjaxljifbrpdltdsxsydsbzjcnmegwzcoffrrnnmjuglkgefiuijaavkootwykzlxkcxxkqrgesgsfwanosqmylvsxzkwizdzxcuaeavhcnoeitnqvvsn\nljhjfvdfpconcxqvgpchklocvcgpqrjsmhzzwlqaosuxmanxdpftoc\nnounambtdpmwuhqmevhlxafueaejwjwlvgosdvdldcglfytcifiirvvllwaligfwjxbjtbwzbbdxfxwpgbtsaplydaoqbrhbzuaujwxkjhvwkogjpriqupotzbtliphamvvevtwrcgcgmqnsnxoidbkloneyfkmcraoiambqqpmksbbebgvquzvtqluizhdcuarwbfgbedvmlnxjlvqllwsyrulpsfbmbremgudblvvbnsysclmevjrzriktuqkylkxmmlqwtgbmhohonzgkrwysuxqqotiaybrwexgsuxpqkayquulowojcxntz\nrutrlolhajbskzrakkomldedczqrbatnjmflmhdvoeeznisalzcqqmrengsnsrdoqpgkipagvhmmidsszasdpijsugblvolapcreysbflxrdyrnibtgmrroxlsrfyxmrwuzytssmzbfnipwilztcnhyxzfssrvwjxwuqheybdolbqjpmbkkgudiahukjyixfhagcvhwwxlruyctttojsvxgkdwozruigzrlqoybqdkxigbzkmfrvudpwqhvtmiviqjktboykzersnomntprmjygrqgliyafxgjjwatnbzcwtjalfewslgrrwxyvvsulnsixsredjhnfgbmajleqlxuparzubxzm\njngdbpdyjbyxilgehydsvijnymfdtwjsrsmja\nrqngocpivskhlbmfdpquzddrvouiejntngdtayvx\nlqebgredjodinhhzasfegzlveshttbxcebhecwlnczvjjjscyqtlkqiktscxjjsaxgmmypxprvuypctrruttrnewaqnufcokbrdawswaqwdhzhkrdcbbjnvvgfhsl\nokbqtimwimgwrfelwckaubozgvlcsnzympynkfpesbiquqmmmnrnkbslzsmaolxpiuusnlcidragajvulbrasvxxcmuntwdnftxduvnmxveayhiszxrcjbbunumgitrktdnikmsijbsjtwqgnxivicksijshguihpsufwlakadppmqyzowfpcicgybkbzoptgdnpcxazqixbxeaesjflacorxfggcmytpqgffoplksmnuttetvpprrptyxwzbkaprbaeidbhxeihvxjgylgpxgavvtvowagtrvzcegqjrsuvfhuplwyrxujkzpgvasbtwtydidvynllzninqupjuoumoksrehsysixtkorikqqwrltgiwmuugdtserkikcpnzktdhoqngts\newcxbizxbqgtagzxierhkbiakcrmvmtgqmqcdtwhfbqipnwwlovyrepywqrmemicsrshlimamjcedrpakzjfsktsgnivtezhzpitmxpauppxjqqekvcyikjzmlavnbbnkesmrjorlibfytpeulhkifdabekbnkskubgezyqgxeftrdfbfagzqmekzcaezmcqnigglawwarjgevddakvtbgoqkvhxetaqnpkvcyclugnkzdaxzdhfohsgqkicqvtjhaupziaguczqyqatypdrfqqgvjpbqpzstljxrmusozwrxonidzgqjaocduiatolbfznawtdxrkekgwvgnimtesuftfyixpovrlmzmadgssidrkoqsfuahirkhvfmexnucngkfneajoaznpyewldooxxhhwwyrumfrfvqxtjbisizcatgoanfykarcrxlrofueubgtowuujonmqtcpsyhcnma\ncshkgmufvkcpmekvxxjcenzbukafnvwhmpqoswnxmevadtmlowyvogfihgvyjzbhfxfrgoqmjhczvqiyfzesebutdlsynmjohsmjgkjaxeuzvrburazchbpzuzwkeuoxbrzfvfuzkb\nyjwjkfbeshghqyvijzpqolzgmmpyadxhwrzrhhupbfpxpeiwrgqruvlwnouxdfpxiqjkieggamnqdmpdkeyoquvzdwlyveynwmwppnfrhirefzmxdoqluelbsqcix\nbfgswvgcyeuisltreguphvpttmkpbxtvkigldarinzpswqntuhxializowplqrwwpwtcltusatstbltbndhzysbnilpbscaerzytjrrpuoweyofgroymudfgjonqeurhhuxaytvfrcizhpffmnakmaajolrfqhlpbyvplhbsnrqbnqahxvlatsjjjvuxc\nlnyeplzmigrkwhcdhaobdoulmdlubgmryrthvjrbcbzeggdymbllvxlguficvlpycxemmhxeqpxtbprabptjuhiizwyrrldqswntwlugehsmxfiqphpzaahtsmsouaawiukurnnjkyxmmysagexyjmymbbbawbkhduvwxyvfkigqzkibomg\numojpwpydgcxbnojptwbftsgdwehaotqrjccmwrkjmiimzacfltvzlbjyaacocdmsxgmvjmckktuvhxxsiaklmwspaxavirivejzpboyfqbroiwcpnpipmpuniqwkmxxpyaugawcxiimrcubexmoylrkaplkakatckswbpgeayowiqepyhunmswu\n', '16\nuuhioxqzlqsdktuklxscldviiqimcmhpftpwqhapvlsydzavvrpxuvtqdsbgdcygfhqazkkapyexizyhmwuxqudfyiymgcddjntdciajxkdymdzjiogudglxyuxzykccihjbchbctezcxppvdrxrsfruokekrbcdttljvdedxlchifdgsibmyxwnzlhiolpnwwpormsboluvozoykqlpomooneckizyjdksxxuuoxdzblhdqosidcmkxqhhugetpxoiceycsburbrw\nesngxeqhemclbdq\nlnedxnvscaiatfvsddezvzgdohqamcdziujfnkpxeretjavokdcjrivpajgpwwsiuegttwdmifjfuifsqkoemyqsugubyrlfqcvnyh\njywnfrmgapvjuamuquftaiwzwqygybeqywbymybxrgaszqtzbdbjxnjycermbifbmmujaquiaqopqexffscxwdsjpcucxenffwbjhbvozcotvxrwlwqtqkxofyorihnlasnwkjkejknpklfjrxnercbiovtnurmrromsskwghiwwdnxzvvkplhknmqwvupps\nqlkssvlxnvzreebdszeyslnfrfiilevgojxusgstufgdoqcufxlxibqaapdkuobzumtnthunrpukdtfqxmhbzfqjqlfuwhmaiyowhnvgbasuaavdkfotuouslpaduss\nnpuwitnzraqoqeojnwqxtkgbafnlvvrnrhwnprhvtuqxziekriwoskaafsxyejtomonzkrprqxdkonckqdyupquogntcyelmkloylzhrodhzqodkdeswrxypimatzexfrknsayntiumgqrsjigtevevwvpcjgggqhhazgylorzrnjohurpndftrhqrtxezphkhodwyjwmhrwidoutrrhwcypcaeaokojezfujdufbdfjarxglsrnsyjwaofqwszlcklsbqznymrrwnmmnoykhvuavrkvyjgepqvypmqdsvltwtbyruinxkysjdeyqhgnxcpagurefxfqqrqzymhfpombfmhftzteurp\nuvbhlbjlaloubvhklbttzbgkrby\npvrabmzwgdlxceklrojovflmxxfznfgahgxvnmjzwlwnirfwevabxjybpgtpebyufkqrqyrghbedkzeqorndnhvicoespzjhaeblgn\nkqnavmdpzbhvtgthtaevxqnthvhruvhhprijsfbszqugltugyywphotxmqblhxeeykmfjtidniremjtseguwvtsazuaganinjzboqikitsqirnccaqsnzdftztigutqjzgzmaozdkpjmykwsawelogtsgdmeagyycnbxlqidgvamiurrngejeqmraoczkxjhfjdlgmgrbsmqrdqxsowyyinuandadvqiucxplrlcerizsysulnjnwsmmunftvxtcyicfkmwpgbsjqvyziramxkslosxrkqqrdiluuwbvvczhtqxuaujjlzmvpjeqfudqxqoarprvjzflkxcvbnqloofhnvyyfdjnagerojjpdysgesnviaswmoomzbhdyovvfjogtohhlqlgohwvuscbxtudtyqkdwgylkkptigwxlhbqubhrzgdjofsqzanebsczmudkggjaknngqmlpkt\nfidgkktmgqpagyvrsxhntzjkdsisixtaseyzrpjmgollyfuvyqnhwwctnchvpuanzknknmmtqsyfwneqksnqsmmcfibpcsnpwfeyxgzuskszsvhslgsipkdwmdiuwmezoaugcnrxyciwdgpgalafgokzhcenopzkqfmkbzczvsvtspsmohktbmyrcgsbtsfrkadcpp\ngtafqivyhfjtxwkkwqcjnkxsphtjhpzovcfnmlxwmjpcycgerzmpksnbpvhhijukgdvvggqksanumddnhjkzaytduaugdjklclavleyagwostpbytchegzlhiwnmjxpdzysmaldjpmepezchmvuxozhmjiyjwlcermvpjkupmejnqgviusjwwifewdxd\nmerlyslhaetymngeayirxxucvltgqbquscjfllvohpepcdcbhechbqfvnuvedskfzerovzhpwnsxlhsshdrxgpqlxqhyskgmjqutrmilqxjaqboqxjfkywtaexyjxuufmsokanfjnisjzgyycboqniimxegnhbzyxubjmspnbfyhcuvhrfxmlzqznnphxwcuoulwnngloqxgggsnoypiheeweghbuzdsezaoiivwwbtccckykkkofobyxrencbwiewtkijzqsjcjwsxmqtpvnfnxgwmwjikwsmquxnrftik\nziwuwnxuhnwrimpxlxvuljvcugsgbypdhrrbcadhhjuovxcjocuigbooaibkcixqjhftgnolfgoqhlwdjfekgthfbmjfyiglxdkdplaytrpnwiolbcezmnisffnizzwhouinmdncttmfimajkowxxhoxijkstgpmypcibfizwtfwivvhqophipdaibjolfczphuwrfwowmkkzuxomzgxyfgubnxyzazvehmpikzfseftnrpf\naeguilbrxkjwdjipspswikmyuhwcojlzdpcxdfrphbylcbadjgtkcvgqqrejmbgwarhxmcpzjahnqorqkgtrfwfhldxawhxkdcqiglrsrbobfjqjvnmliqnyblcmnszwochxnuuxiaydhabgdyzijkwsdrrjjtwesquyoeikrtsqqvhwsmzxelvifhyalfpouxejcowawfrkqxhphbbpxewgqaugczmhbncevtbvusxlbtrwjlvecjyyferdoqbqztmkufqgcjyebfbwayckk\ncgpneyiszwxkzehmrsatxxsubpojyddyvxfwabkwkelixxmnfqxectexiameitokhnvmvynwjcvzggrvftyozuyrumoobaabocbecya\nvwkcjrndcmyeepkxvmmpjoizfehzalfnujgeuabigcffxwvftozpjyssfebeunycqxwgkytcpsibqycozvzwbmbysxegvhoixmoiojvkxqrhmgswjwtloebmcauekaveluqjwgjbfitdrumdrgfiylcybzzlyjfcjbrhsibeorzvgxcmtpogqvoqmoxwaesczpcvgjfphiigognpasntnudsorjivsmziivppuxzvfmqsgrzygyoabfzkfpiqnhdmbgrluxclnqofucnxonvxarlkxnrgefyxjccndig\nyecmgfosxlfzleavuewottaatfajvyteztjgelhznhygoktudojqaewfjvdzojshqonzjtnokybaqzdbeehsbcxgphisidkozbytkwsagfebqgvisgufilmmoqytbrokgrpdbboakaovqfmrkouhrnmlwjnvshnppunsbwupipfkuqwarpvbdagabgmqrlasorumndrkdbpkjdmnrdsgcodukpjxallmhuxiytisvkqhlpmjrltbbmaontsxzowlrmnvyemitqfpyergvplzrmycdpowpsqfxuxvmboloznlmfobhpfntzrqhspwfjibiocxtgmdjdmfbvpsuheffhajpsdnkkvhxwnpdf\nlotgn\nvkoyrwhnjdkuhdhvoyoyczctyhjjp\nbgnksjewjkdxpiwhfhmbvjrqcdiogkupjhmwjpnlsgcvylulopsbmqsimagznwhzdjtdcnjwoqsdjsbgdjhmmnizeebmhlxdmweeidcqamvwxzwevkjnxpfiu\nmvddzvzxczlhvlnspideufjivuobmublsrnkbwntldfagiaiperjrgtgboqdiswwtpienxevjkkaawvhvdiwaoepldnjbrhippkkqiospgnmgnsweimmgjnbzicikiotftfardephdxhhakbkepehpsmmmvmweqsnmeotawuafcegzbqjsurjztmnuucjcvzzcijmdsytgwvxndrvchhukrnknylwiivaiqcdmxtlkscdkvzdwaiugxlkkqwnmhnhxmtstwvixcnqbfjotrsylzkrhevvojzzoavvxndziaigjlxzgfxaurtwoinmmzrnwpqwzzdtszdxmwueckuabxrfq\nguqqebnzinngqhhpflkcevznijkcsmswlvqeljfshrcrgnuibilxuzmvjaaluxxrpzfqkgmtztcvtffwkqbfuemurytgwruotsobxehswuqccxsxaeewpupkyrcdrsttbblkijtaahwnysgtivuvrxfff\nphobcyrephjzrgosobdmanvzueohvnolsclfdeoafsxgzualtrguttnxqkjknohrjqacrinkeajobcwrdhfydnkjjqgpudarnfmveackvctgwnznysvfhofyrqpkjnmrwquqkcicpcwfyfmdvtbwdirsmebbwcmajpimzgolfcgjjpeksfycicdzlamhknonilcslwlspdfumvbidudhrdnsoiefgdyrxoguledwtauxuhhgebzmcornndehmjsqzjmuoctxookrqdanbucyvrbodqyyjqddbchxqynpjtenfzvblnriraytieuhtxokzfexcynchvnpzxrllfqpbqawxjsamxnxkkr\nstsqbfckvuvjqtvahmdxewnwwgdicjagskzqrnsiuakyyniuuqnuszsmisydllsdygfjdmnbcponlxnufptkmrlfioguylmuhccdilqpnysdaawygalrcnrzmnnzrmmcmvlqwralrcpqhjhkxrkvqwjntyrmqhhdechja\nguyvcroiorvuzhwavwtwmqwzqexxlggluhlgnlvscoorpprrlasefpnibqwldhpqkcsaqxwwpkgmykxmadaqtuuuuzgbsihsolkwckmkahyttimemrljkvacgiayehxtluffmnrpoywryhfybnqzovabmwnyujevxvxbhomv\nsplhmhfwmaicvdscqzdgxfhtquincspwdslaoqgjkjuinwyikudunttmwwtxvdzhkxykssjcaseyhpyippsjmsmvfirvmwzshaecxpiltoxswzpyxegnpvihorzoemaqtcsvevmttveuffrdsmznwnjpxbiqbgqyozcnwmxvvzbkwmcvvtriyjpdhoomddojen\nxzqdey\njldosdasjerivkaddvmct\nonevxunjuzlotjszodfogkpomfhaeipwbbnthjtmsydyimwweajclrjublsqhhhtvxkuyamhajnwmvyhoseelzkoimilxtvoqyfkhixfpzmnbfgujejfrvfwoatpsxpcoyfjlcyxernfezmosvwnjqpviqzrosrxbdobwvujksbogmyvtptqvidosohnqgqafmwrnzzoqxhuxksljzrhaztccdocjhluddwripjmzswypuqdiauoxdjhqanahizoprdxqunfurwubcwetwvzsxrwqkpoifqhwswxbpftcmpuyyryelfjeveaifqdsvnhe\nzbrketvrivuwwureqhsidjfnhbgcxjubrokcrrpvrlstyvlfqoxesinajqbhxghhwjgpnikyglezgjqtrckncoqsdpywovwdgrdyaxhwaxhjztvsnlljdeufroupclftphdqyhgvuvogkpwoblvlypejcocguyeafdzwltrzausfehnlnkvqwjsdthvvmiqoxzhyaihdhgeowxamslpddrjonbqbdzrzoonumzllcwuigetcgguuucfpryabsrlcnootdddteonkwhbafgzzzmzirnhmiucymxpcuswmsdmltrecdmrvmaqfasbruunuiljqarwnxvqnjiyioyutbalopzfosygeihbfvdmynbnqbxiyolgsowibtfmbatbbpupanuuyqmivgyyzbyzwdukpkxoakbmuedfadjdrqyfwvxdoqkoogucxcocch\nkjstgssswpneaou\nqiwozqnfclrbekfkqvctbtzmkpvsisooywwonygpfjpiqbjvlhaptbudtcamqjyfhzchyfbkgqwvureknfaeaadnagbqbdnuglypphitflelxemctlnbgsafliddrqcuvhnzezejjnwbdxazbjetkrtmzlzpinqpdaewkgysgfbrljekzarocmkkmfjehklzkarsmisxlkuyruygllnydgzvvwtjcdvuleubpkceecnrjrfocztrdftrslpogwicqzmgvxcxldxulmtaqxcfdpbi\n', '13\nbbivtpmkehtyrczexqxgnnstnllplazthgltbsyrhziunaxugalvfddvcrxpncxyryzpuosabvzioztffzxaoxwsunhdsalbagbdycsbmzgbcvcekynichubktzlhddfryyebreiafcxmpwrwchrtazajysfyenlcwjrdpyizuoitzcrybtnymrhsamjosarlntvfyetdncbhpfhlrdzunalrvgmezaelt\nbhrbvrydghqcijphanulfh\ngqkmxfktsnqrffzfasfelliqnmkbqcasjgffktwixjsnxrhizeulseeexjhmjtkzwpohauigiculahmwunujcgtkecoipygcvijdytgpqfegzfgaixozvwesoymnwpqznneoxvztaimhxwumntyzbuzbolqaqgzqxujhxmzslqlagbqcrqcinbtderfudmzxvtdxbifxcukncqtpclrrarastodqbbropmhsueyvsjfqelimiwtcbaklevqpayzbiwnrydqlfwzpoxpoajitotndxyxevuqxrpdijdqghvagjtknpyhalirpkzkxfjqksyxclreryydhedbpbkfasogocrdzhhpqrtvubfeymhlradzfzqnfhdkvkoqwdthvnlxcvkbylmwbedvkukocapbycqmrcgztllpegulzfh\ntxzapccgibtezcofdqfavneegkhuuewodfmxgmuucfazorwjrufygaiuyvkvyrnozzggxvmtrhtjalsnuoekmvsagguhbnbkdbrooxwazaysgfuwdrnvuxgbaxrkwewpzsaeoshzeehablfkoenrodtkdhsetevlqaykxulyebyvcckosbgkwtdyndrahtimar\nkovmmqezndmexqijezmlvjjyswcbaqdqnybfpccoomxkfzaezvgchsezyyswjayveqnkudauorwdbuvyfhbwlgpvamqxstocipcluoltsbdibghwwxccghigylmamleovgyjvvqjqxpmauldxzulweftdthkfbmelpviebvzzgvqu\noiniixbnarjtfonfpyqzaaqxouhescksvkxmjcfqyijlhamovxgbbcfjvpvlgrbdkhirxjtncnyezdjzcclkaavopotivkxmhbkbbpniilzapduoveczoojiqgutscajscwqnojvipizkmwhereqpybkrdlpwvlafhwcjwarlrbqqdizxwadvqqlyvzbvujihpqiltfpuzmesabqsgmaytacibaugjfc\njwluinvbytnaohavbyrgmnoktsjfumuxekcbkcvdxnkcexxtqunajnrcijjsfykmjtklfpmvfsfxqqkyhhbvhfuyvikgqdlusfrwyikxesadxgvfuuigegeavcettsdniwpqsxopqbmraiuzchlrhzgaoijheudqhwqhqjquzyioallpsjjwxhofbprrzgeelrbvyspdeeksjxyzlswuqnbqdmcrqlnivdkuxpszxtmoonrgxindlzusyhmtogtyarmbsstpofrhlgukhutrvqdzddjafqmwfkfjzomqpoxhlzqswfikojygovhuqqslzwxsggyldrofztngqeeqhtqecbvmymwvgnhukpvjajjrsdckrtssjyaqnfliswvs\nbkvdeyytnbkyvggbdslupacogjkwblxghiortkwdgiqfrfofxunaalcbjkxscyvltqxoiibnsaaymcjydewgmahkbpxikgzvkiaamtwsxaqyjptijwsogxmtwuatfepvxyglpjfeaymjppthstuwkcwyfymjiujsjwawwygjjftojeesiwecgeoypcdgfhpgyqowqgrwlsoycwhlwznoyimbeozaakqhjecwnuvfvdsnfnvgzjkkaimbfdfbetwnvkgjdxudizrgaiuodwfbsmfwshhkfeonospzcodgtnpgneaapkwdkhdrwwoktdepltyefltqclftzgurwterkipwtvsctuxfjimlgzcdbjwkcgitw\nwgmmugjiexilwcosxsqtvszolmpsesjwbccgmiemgwfzulamhgyuuyawbhgqltpmlaktnhvxgbpubuodaokwzspvyxyagnshampxrcouamabijjfgrphdgiglwrxhagoahtqkqxkjsoojkrg\njsbuy\nacyxqerupjjtsgatmcyhhghlvobrsernbyxaspvgejmipinhovmvxuijyvsllovpbuspkxatoadedbverwlvrgpxdmlqdfrgmcibcbqsgmsvtaeqgmkmmiofaekdiqbjedmfhqgqdyljawfltlkrnsehtfahqdlaqcomvqosmilqpqupryrtatanzwhbwrajkkfxqpmcbcuzbdmzyaktzcqaortxhzbndewfwddfxhizoqlywtqmkwwnpjmhrnvfkwxelausoebmwctlqzcstktpscfvpyjeucywmmmukmbainztxhbrqpapcbalfluwywsonaiyxblzqfnexgagphsdbqpufehslzcvhxxoaeplscixmpvykdghfytniosnvifhuaxzgujz\necqdartlyhbmismkrzghbqcwtgmnsppxsvpqetvpwgbmhmkzubgfqaktggvaeslltyewhjsryyfslcfkhcvnbnktuvhhrlloklgdorwqslpjvodwzguwiooduusbkhqggxfatunardkcopkknqenqbubeztdalzkohqoqylhztaresaamfiuktqqjtzcvzqwldkcktpmjewrhrqmrbscqeeykcxtqruksxmffirfdtwdltsisockhnesmunxpibxlpbwqymsiipjnottommigovpchgizoqrjwrrxpmkldczzmrguyrpqvzgfgebmawocbiolnvwjsegptmwmlgzzebnkwixrpvwlrikxjerczihkakxrnxpbpumqmrcoojjvkvrzluonvtbajphkqcbkohgnmun\nmqtloubcqvylyxjsljmbevagjefiauritaxoigvqvfshbrbmeywijvzmltptwodjmblnkfpxxbqctimtvfmkoyrzwcsykddeyiwfejpoewah\npmfhdfbojigpxjrobckvg\nvcppomqwfetbfkxwabcynjmbrbxwvdfbvmifeiclnkpmsbvgqaluognhylitmsuwyeoueoyhrtxudiqvxshlhmavsjvqchlveuvpqarccxuxvgrpddnulbiblxjqgtrdjwkbnbxinzjdyjyiqeakklwlbtronxmhsxsnuurnddzhpxepynaudtyusmnkglkewcuasfqpahwrmhxahigpycwocanlbifeglgmzgfcdxkjrmlwqobryqkiguiixt\noayumbszhovmyzxqchqnopmtxujjblzruwnyweolkyzmyxmeojapjbdzcvxjprslhqvxntzhoejugsgtguuutbnxsmrjqugcvcrqgrujpvjehjlvorqfshdnabzjgypkhlojqmmbvmqquqmjzvjdvjievvfvzkbcwwfdoazznmujquehjexyvauhhfqnwibeyxdnhlvcycllsacwmhyrngyzqdh\nmqsdpfavbcdtbbseigstsvyufvforsdhaxgpiphceutewxxogzxkkeogsdcflvupreefakklwvbzljsrdygkbjcunqukvcqkkrstvzlhdsdzkbwsnzibnuduqgoxkxoksbveczibcxdjnrqdqmklzqlgpwyroqnqeztsjntctwfsurparsyxjriexaudepoezlsgnvnzlyvnyutbgz\nvpkstcbsgmeuztlhdjqmkjwcepudaaepznmyupsvpituguputugfjrtyjlnmodddmsehmitklvgvsmyyuzkgyfnmlhimkmzidebgsillehblzbiklffentsnmzyvxflojllgvygnvuqdqbjlnuqqttfyllgcambloxqkuoqgxluqnqftidfguedtjzlaaycktnnykctreevqpdtsfxfmclfnsckiyjxgfikjawokkzeobfayzdhujqybrmweeeoqiydkyfzvcewtkpasuvnnnrqaxbktzcthwyyesxrtwlzpocwpsytjizpzlpuisviadkmykefmovudipbiycifybhszsjnkmmgdnnrbganlb\nmidkpqccvfpunyuykkuoagmkjaophlcvanltimbhbinnzltjovminmgknbijvhllkcogwuwshejljuckkbimlamuzisjtxdfbiktysrtzcifezvuwzrdsfgamfpsbqelpgkxavjlbaomldfpjbhgglqgaknwfzhwqkhdcnebeaeutdcjwdtjukfwmarylerfqxscbtsqmmskrerwaegrcbsciefwvqbtqfgrkflsxyfjxvzzximvyucvnnjyouwpeggsuvzysbhhzkrbwatqqbjnoabzhbtalzrvijlnrmsvxkocclvgbvftwzsgywvxwyhxccirzvbwyapgxymumncfisbxfvdccgiwrtgpdjyfcfepyoqpurcpiyliocgwibscndcdidyzwmvbiuvwhsbguzvqrfwbvnaheathmxmfrwkwycqhkkoesexfkvwlwqrjqplmehjjlynywrq\nmmjawnisbxohvukuousfqwnwjcnzrpzvjeeeaaxzshvtzfvqa\natkprwoymwfixgdduteokogzebxumhzfislndhrsfemwqznkyroujhncfzphdikebeedzrcxwmiglmhksmnfgvqbiiuxkdijggogjsnrhzjedehodoxohrfmptwbgthqkyggbadkrcduxznknzteweadalutaoepvvwmsprgoribliufrtjfvgjbocejswxjrmbbgmvmhdnaztksjdfbnmublebwllbzwhegawsdrqftwvsainqtmgedaazgbwdrmevmhibryhxqkzbnsnymafmlqzzaapqakeiycukjsnorzgkxrjbmhfggdstvmxpssrzbnqrkzgzembcqsrrjasaocjftofdrihsrdcdlivdctcxnnqndiaqxcpkbkaicumyonrkhaehqawtaxkdlmrthojgpxqbynitcrhmjcfayvdjzdtyxcywtcjoubw\netxztypymvyvcilycfexyudejujjwomuagrsxsadtngqyepmnbasqnyfmytmimwdwxizvnujzllgkplaayyvaujmpqikuwdliuuzuuczmfxdkcetqjrwbulhzdlcrhxmxtsxqmphdyrzmfzsevunaqwlzikgifzvtrvgvdwaozsqazgcszplcrclqksxcarkhhksfhffjwlyldpjjjyocetjdeetkpbewphqeqqdflqdqlxyjcelzrciznkrxgedbllpahnnnvuxpbvpseqd\ninqujucdzpextarqqjbinyroiajolmwoylvqqsczdtwvywrpwppwcmrgtgkwdkhvpxvo\nmjjjjikxkjvsypwgvldbetysucfgdzwfnkfplmmfkquzfolilxtqbqqxznowgfiyupnxaqamqcyufkadtdxrwmrpouyyaexjbzyyupxqvtomlbpqxgivycsxrdkkliayqeerihoknjogbcjbsktqxypfxjafiuhjuxpehtcfvbjqqjvlvmbnssjyywswxddigkwaiuzmscefvgekvmyzjsgwagerbnenkdlczrsevfspbgjeeoampfztantbrpiwkqskiggbcikkjqsgxxjnbtxuoonvfkva\nbjkjleqropwrfgysjnexuztyonkgfnvsbufdiulkewawsfjymrokggvzjjbdanllnonkpittfyhvwbeqyuehhargrgbncwrgkeeaejbbrvqglmvllffesmmcakskdacyfpukssgeozffcsobcviceonezrlmtfunvjramjaigmhpckpndtudvllzaeewnwwoqanyzqnbwpspgadpjltvxultzynnwnrhvqfgoieyfpxhwxsbtdxzabduvixtphpydxjidrtmkmuimrlctnybibdthpdtuqxafkaixjnsklyliymfvpfihdezphtmv\nrqxhinmaryntpvkzgdpqphvqpcedajqpoftxzoccoyzzloktlgkumbldtxlklbimxgvlvgtfjmstvgtdwarlbhqkvsvcmechauloqsawabsatewxtprtjnzvwskstaogdoehecb\n', '8\nzxpplvzlphzeligea\nvnevoelhhxvhqtsjjpoajxizbzmadpxedebbkvzkkxutwqbiccbndrmgmgdoedfntguskisknfxujhmruckjwvuhzlirivqbbqvekhkwbkirzvsyshelxyltqoqebajwakkplfwxhmgecozgoadulwnhxetuyicvcfopvbglvxecmthvhcsvnscwnkgbpdaaauclsqgpeagafxyvenegjkfmdpohtfovqozjmxghnoohmmpdunnfewqlombbvwqpzaqxnyufacsqibubdkgmjsnlxmuihmznlrklnwlujkbbyxbwhxogykmcuqmzxhwppdz\nnglggbdutqhpewbdvqvjdanctqkfocknzrzidmtjzvwsidsmoduxbzstoitmmwdlwlnbwfyygvr\nitmwlwehdzbxpuawlrebqobzkjbmsdhabajlxlsfpfzuefezmfskwweekatqlnvyggohcomuewilspyukietnkngowmiusyvyzwrqqgrontthlqgbuzjpmejsjbraikzpblacctifwziqknnmkcyfuwopttqkrearguzihiwabxgjzacfbksmivwieoycsqpbbbrtbdwjdweeqeeqlfalyclgisejyrbqprrptdhxvckusvsnwkmegfefumpvcxlkvnydscsxqmmubynnhgclwvcqqqhtrddm\nkgmfvjkfiwlvsvyqbnvtwxszhoyipbcmkwoelgfktkrhvnvuwhurszgguluxbxvgrcoithityhuiozbpnbokgugapbjejzriagowicgsdkbnkblmrrcsvskmjtdqdlkezetqhsh\nqfvtuakcigjddrbxwxlliiisipvlfmibkbfevzrlxyhijybqnzlypjvrctbqnpnjhjnrnxtncqziovexrwocznzxzgllrhyswgphswhignehgywzojskcjitjcdiovlcerlpaizwspcgcvftjrwyfhqwoossnjifjlsijmgacjrbtokjpeyddgbeukqvfqzmdwmkwppsurijeakwljgdkvnotwdgdnfttrdjyixbmzpyjxmhbwpwwsjwhoygueeatmlumzfnqipxmwruatiijmvzchzqcjysqocpfgoozynrdmvsiqprsiywtsdaxj\nsxnywvgvykwcujiyobxfxurxpjnavgcfrmfcalmprwlmsmjlmixznadpxhithatyjbwjnqyujukzhsntysrpndqbcsvzjtxgbzwazgvvytjhdylnujmjvtynqmfjyouqxaircdjbvfkmkbnmmiddaztjhjgvfzftcucjekavqxemjtzmlujcnrvlxrbpgnatcleihjprencpit\nhgldhiglgwluibatclfswyrucxdlyohdowpwmnarfkzesorbosmotmiluybognlzfyhbpgyhrhuejghjacoxjzumxyaimg\npnx\ncournfgiklfdctfyzzmrqoyctzgvtscrerquyyajqojjoadopwknzhipfqnekrqkytgehojoggispoabqupkajvvsftvzaewmlhxuchgwdtzoumhuadyebqlustzfvwjnheeoxlstgfwgbjsjnhpidgqytqedvuksgghgijootrzesjiktunpqepgbdskpizshtinxmounrxsmtauscxycrtbimshpviqepgiqldcvkfoxjwkopjltzczskcofdohvrevbvvmycfzilhksjioltrnembjqoymloucnzxfmeeasiywrqevtitoboxqooggluaozotterxdfrzblnzaxcrlndxlzbldnvbeblujsjumllfmasfwnrk\nsnrxfscbrvrndcjiijegmuazcgclmabwdusarkvjvmiybyvbvwsuaqdfujrznpbsqbiioohnsxixnetadhtgxvpetguedpotztkdiacchivatktbbnmdofquvbkrzpfmjvwchukdbbxfcmvmujbscueznmwghpipvxiwqstijmkfjmpmbwefclvxooilamdhsunlkxhwnhkvpqrhkntmazmksttssarsxjygqxuyslsudpffijeuagkqfykoygaijlmentlyqifqgfcvommvubvqepfmfbnrlvbnjzdpodpiegnlkidpvmftkwhwkxcqallc\nkloifzzwnhholmbvrztpggpfnxrrjxfsqdpauudnisonposnygaagsxqvjutvyapdlqzstxbfvzftrykkmnuiuiyjiojyaljemiwawvgknyepfjnrullxxxnssfmjqshoqxxaoqxlpsiyurwpmcojuafkfanwdcrxitzdnhfjqtdsbbfpddhoeajjibpvuzbzcgawysdgfadeiccowvaalzkzdovwjqanfitzvycvquxcykikltzraauhqdrmvgwnkcaayshxzszplyarqpizkevvengnciezpogleczludubpchntbgdezpmijlpmeahtdclymndpdbojrjcbqqlqrkghpnnnohzarkogdclrsttpmxhbutdhabguxqitoghmksmpoxknnjffnxqifknrbeouvqrvepjuu\nftdcxttckhurbxxorwotjuemjefvcxhvnuazgdfzmpwotajlfkywznrtelmkmdtemcwelcbxaqcdmnrdtimudvcnytctzzngwotbsxpplunwzotrwuqniyrbrkgoagqrpizegisxeepgepdrmvchpzmopzbblvlvjkzxnioyspwavoiqradepnyjadytkooseuwkqltymgnedztngpycxemghkebovzrjloqpsgzdigregvnwjxjjvkqdhakobdqlilbcaewqdehokmizupkmpoeqoztftngemchxspfxqgndrblvmhpkrvtpiilqobaqulkevuvdrlhldjokugxvlyoaljmbpvm\niyrledalqwzwnfaqoonebafyfckikprlsrnjdiypmnsawugtyyhzbqeywrqtgalbqmoxjxcchasuktqtsdgizlndpbekmfiqafvblkjtxocvcnoxwpfo\nbpdcardbvucqhaygbylyatwhykvfarehjkpqnclwgnurpfoyvnvygeuwnxsefknlrnhfkfvcqsuipfuilnjaudzimv\nthxeczzeraudaaacyhodbghpmkvcljhcmjihbndihvvhjbqtlteaqijecghaqyeyteufcsviusjsioaefczecezniadssfensvwkbzytunuhubmpswpabwlbthdyaiqebkosjxxrcvtpvjpjlawifozyrdfbpmsrvwdxgmmluymqnwrxwaszrdjasikczovjlliagyulxprraufhtizttapvgfkbljjzrybwyzauftutsrqbqhtfkeligwinchfygnoktfekkrcquowurfaewrhwuazdfhgzhozpycadmxyhwwhudzmhfnnwyrxxgjcdmssvgntelosmrwgssmykewpvmbbexbdvtwhiapfalopnamqmxfnyamoyaggoxypnsgboptbsgszevxibjazmeafmgjsbdfybagojpvujtvdulajkqvbcqpkmruhfabgakvpkydrtjfnkqtvoaofwueiquec\n', '13\njsxvzqsexixgdrmryeixpwjzzsvqazqytbuhmiepmjknlgyryopitsbuwjsvhnhuhvoujxmupunqzhaibkduketgwoaychmbilhtsjsucsscvjubjrbxbqtyaawwlodmklrvjauypgvhfipafdmhhfbcdkxxqelwzzohldjhlrvhliobglcngtqzhiuwbajanjnifpuvioddqjwhwnoxariwerbcocsmqxobrsnqihodibwssdjjcrtpvgektlkqpbhtertasdebtihfxrholbgxnivxrfhbxcxcmxteelfemratechiwtmvdwpvkiccpyyuvdkmfhddelmafutgmshewdycefqbmlkybqcqvoolnigmgpsefyyi\ndpsdstvgutkjvaihdvvcfkefrjdwubvdotbrmepsxgovskrzbcnnoqlcqygtualjwtyqtadkgmumgqautjbyuyqwjnybpzgbuppojhpyrsvxpytxioyolsyxmrbqykwemfgugchhhrciplcvbnjklftbbijfunsqrsfncdcnrfrbhxtfcvvcxjydotoyylbwvaykqgvrxbdjpcmixuizyklpmpumaylxkusvtjmolakrujuyphktkxbihcjcqesiczmhhekdmmdinhxjyhxdddxjquslymifxqhxxsptvcuvjbpxfshqcmaqtlixuozqpqmtzduvnehpgacqkljbulu\njyjtwxoliqaytzvilpycghwkdfjnzsrjejabosiktrqxigvynoquvbudndhutbtutdpfdiwjggozqrfqpsvxjoestexbvtqcriurfsjgfmzxukssxlldzhegtutyjrtghbszvdkjlzlnhemmwiwpquxrbttwqpguajnxdnhfajayefmcrzzmwraahwjsprfvwoydehpcvltplqmcwixdnaszvnivlajuzbtzvecdbhmtqculplfxghplvicvxwpqqpdhxjjiebcahnezjktzwhyexwepzbgpklubcfyxzesenkqoxvopkslzapunuqycipcykxuifcvfchqdjingihddunyu\nycalxchbtmoogsjjditsxegkuniohkndupjdqqlweiffmjzxkidvcnxthwzdpipiajucukzguacoflkaorolthtafbipcvfgurqzaueasozvpwsiqlpelpduqurmiivnbpcnvciplnsztwqwrizyrjhwqkqnkjcnxymprdvhnkeuxgkknvfhzxntsaqgswhhzcuqraaxehexbpmvjifgbeivlhsxbnswgipvfbpriasrxoiralestbzm\nnsozpeboiqhbanwgjljnemsnfendyclwtpgqoskesdwhwliiotieewbqpzvlfjihypkxdoanhphoeixcwshljamzmcqecvorjuzdtfrlfidpbbkqgoqhvjfjssafvnrbbkvqvverfmvqzinsvsvzxdfdlfdrkzanpurlqbqftomccqxwycgviqrckqylgeaegyoydegfueaogkkclrhbpnndqnolmcmblllpsjegttunalvjjsaljheqxzkbnuejnadlqryrtyrbnocjssxxlobyppvcwihainepdjhgjriusdwittmaiboajtmbdnijeilrxhnfjmjllbenxpsublhiuapiacurovszfvebuhauloamilywdtslfndfihetlwutugntlcjuqiqocphuosuzbhaxjtsfnxmxabeydufgufwpwjaganihzvgjrqfnskcbkbigojuoagpovrhnusapjhqceknpgjpmyime\nwrkthrmgnlijqkrepflrmezvw\nlhsxgwsciglkpslgcfjtnkwycrnrsubvrilsrgyvphdcceyootakahefpxqusowubte\nqznhvlsuxypgygntnjygmstmofrazbupzqquuvudrzjirdtxndnfbcjlbmwioniiwvpmrphxdoqhdahkiefcwatjjbguhdpswjxcdgfikzsvgpekqtxbsanrqtkhxesedujofqzkuliscggssoigpvxyydixknyihxjcejfulstaknugfeklmyyrzelbxclyncmxnnusigamqexhbigsgztptnbjdzqvpshrhjremwssimnbyhiagoinwbjdtdxkksoogpynjuua\nlmrqkyqfsrhyaqcgkvswmddqxcazayqsptmhtxusultjuclndnhupvakzlyippywxjvvlnngszjliuafgcs\nssaufuhvmelnfodxwplwwjfrcytjswpdwrenssjwpqb\nbyrmmxfgavdbyeoljzhctiyzbsmjkvhfwqnrnypttulqklaaytayhuqppqocqnkgoqouqpdfvhayssvsvdlzcaszzdlgqaeqoqitqknuoxfbrklswgurfkdcjpbjqzsfmvuuxfobayhsfgypzywfcfypnwsmioljdqbmnmtyatxmcjpqsahhudozjapxioqyejqpixzvmibbftqkvlkgzuhktvokusnrfcxyedlgiyyaqaygbzlstwkvtusxkazcatzehrpcuamonksnlqvpcbuppnbhpxtlmelhiycqeughyrrni\nexgzzifshqbnprvhaceubjnzbbgwezvqmublyaviculgwzaltmlrjextnltjthgkglasdlrgmsvfheoxkdjebncawohvqfpkpjroenhkyfogjhtmyyfprvomfyxbjamuczmeruwiujlmryayqzypulgnlugfazkyjwpenpqxayyqwx\nbogizhdbapmpgrhfdwwrlmjgsmjrkwwjgkmgdbxylfhpnwlvpmksahiltbwodbovjrmegqdtiwaeuqipowmokklgxzvofqckiqujfhyumzqeddzqtqaddwvskduxoxzeazscpidnsutupyaafqtaezvnljzviqhoekgyawjsrabesjjzcwlabzfowcbnunmrfbqorpwfcbjasjktwcpsbxzcqrethexkqqkmabcxgepsikwikqtxacvkhuyhryqaggzuuzcynitabcfcvaomozzutjwerhwybbtzxyfkyaaxotogtchxmdvxfrugixrvexjrkgnqbzkizaadntbdzdcnqpprzrfwekrmhpfwqwndrrprplupfzndqrzjmlwzmxeevlqowedvcpsjklerwtnurhtmbxdmugcqhzhnpfuofjtyztlaolznoditlyrkkzcuvgplkgamioqpwnuxxzwgowooby\nrdflvhyrkqeidjanjsuijagvmtlqdyodxlyijsnojavegoyrnakdqiuxoabltcjbbgcfwisiozqkmcduinklsrjmurtmcmancjlmcsisvpsssvcjwhczezldxlrfltqmlmzoigqrprqdcxvbeeogelwttbnysjixcgmxsymqrskkyapkqinkqktedsxhopuaedivddlewflbrpsesavquhslqzcjztivibhlypitiwjbhkpvjybfanfnwfwvkhkfvonsuxldgfarninvlu\nccihlkaafolsircekfxgqfpkaijkujnpnirtcgchizugnpisbbalxjhzpmuvjveqdoggfhtshpapzxzmmwlmxbphysyriqaqxsiqjdyymwnhgrwewilfwskrdgwbmrecljxbmohxxlxonftlpsykpuglincdhlysjoyxdeuladxxisohmcsdmtmgtlhzvmkslubtjembccqadaakezdpfovfvqqwgarwdaobvimbjgmtxwjnsmmhbklmmamcwqzknsgbkttg\nltzmewujix\nmdm\nassfbtgtmqiwcjykzttybpagmkapsmhmyqcqfxgrthowtjjnucaldgzgdzvpdpllbpqggwujtccczrnchkyjcdpzhbgnyijkjpiktydfboaqyjvficwcipdrakwrrkveadjexezvxgwmadhsztsycvwvbtjiztvhsanwornrfhncxlllphncocoorhujxjjduilowtdnpfzwjxnddculturavephgitipqzexuqdxilbtvogekvuwhjokgxkonrptfwgpylpraidtvfljcfyrctgzonlypftavustcspcwizstogpkzwozryodlajbppjhvdjcuhrkuuxgenupgmwugmchhevptjqyleqhtmbxjdvyugcgqiqegtmwpyymzrzmhispvvvunssvrwdfnzbrwwuhbfrmlugsyytokkawqxpelhbolnjxliybntzsopgedrcsmtfffcxaoeosezdndxttuqyk\nmbufqiizsqkdtfhoegwadpznixmusglurrzwogpizoucflfaqtfuvppthjrglifkybvcnqmtijkyzplwmnjbcqtevtvmfcpdpxucwwzyetouxjzlrrjhgvcwmsmbbvxwqfsodnmtygapecvkbftaviiybahtpsufasxgufdyvqjpnvqoyoswdybuepaeothlgajnahzwfnyieaidomodtwkvdhdciyqkstigdgktnrejjautjypwmrzoycuuwwocgmaciakzrrbxrcomgacsjdsakbmliamjabdwdrgwhgrotuqgorxhzmujfzzliizwypwxkkmisnfiibrhkytqztsvdsefywiqaclpvhvf\nicjndsnktnjkvahpqzufbmikbrxqnudpjvnesxtlntgxtseujmtdyyylfdqdfoosnhkxdxoxukegxijnqdjsvybbeomncrbtpbwrocayqgwutlzlbasjnvfzcuqovlvvaaaclydczgapdusxqwagzjrubhppjbskbghsdqmdgmmkbcnmdixfetyjeraebabhaisfnlgwkxkdwqvptmdqbogscggeofnmtvofwgqfmcryoehvwrapbndtqrmdtjmyxjgetmakjzpowcmhfptvgwrirmdnfbzhfdlzdbbcabybctytiwwuyrvpuobvhpcxkwvbksuokjhgihzbxcmj\nwhlmdbssgcbvktzmmtzpxdojumnlzaxmbuhrqsfyahokhqwuiqujyrfhonbzkenxtsngegkhfbhmrsiabylborektbpzfawtpsdoicjxwazroiyufdglxgapdieeamhgdihmxiuyvguewrszzzpcpavwblhumwmk\ngothetyxqnnsfersdpsfyeenciyosjxenwqerlkslkvbkhkczwbkvcdriqclcevroheccctljjghjzzcdrefvcjalwdcbslysxsfivjxauctqwbwbtcctmaftryehnvlcffrxzigwmxskivkzeglbhgyktteszwjiztsbjudstshyuanrhyp\neilvkcgzvswpmubuvwhvzm\nevjassaxdlncirejmerodsbtajvnsjiatfgwcfwefnspppxcokqyxwwoznbeisgbflrejfgrgzhbudfbyljlaowaaginofmafyjbnxlaootfdugfbkxtdehmdqtbvnncyyxhclyuygxjfgjvdxcjlppvufmsrhhrpjlsttlqdxuxvqzyobuumkbsooxthrgdmhczwlwdshknidnijepltbccbcofkledcfdmqopjeczbhrrssavnyepfdnoirjmymjmawfqhsmgejktxainsswpduobsoodpdldjfjefescuqqyjsusflzgxtivodsx\nveawheockrmjwnfpwltfskdfxaqhsnqyjyhtryfrrmwtvcjhjmmugbribivlkrdupmf\nnrjbnzipkuyyvuagxlvuetndouxzjwmgjjxabbagtktckuooulziplttcclcrawopkpvzvmppscapvnozxjwwdwaowyjaexexucmickacpihpxnvnyjaprseytfayxkhefuhbrynywcxhhrnbmcumsubsuyrtoozkbrcciacblxsdppfjfdgjfxfurrjbbzztiizw\n', '4\nifbmbahrhhczbpvxyncnukbxkkpqhoxllhljjofqdmrdocljvsozybydhvvquqqwvesnxzfntcciatgdobacarvcwcrewkynkaavsgzkwmjdapybsgsulkqsrahnenvqucenctrfyvruxlzgdaxduhjgzzsgxzocwmqotqldgnohaohgqzftnhrpwpvgldwryinfbcmqgcnawaegpjcpuzeekwogs\nrrgerykrqihhid\nmazedukaxxrwjtcozkircmrappmytdpqphbeljcmsfegkekdamiltgjortoqfkyvucvzjflafpazagedxgpockxowgvcmxfaaryfagqfjdbahoptnrzdnpeogtppaonnutbstrldgfguefjcroaopxqvortvbmppnchccpccsuogqvnmwdvasupbtekkeqhhlpzqoklgmiuinmweqcxyzrhimtooyusxvtryywdilpxhjqmcxcbygehgbfypcpndnnkqnvevszxgulegfgbenekqybeegjpjypuyclgrcwfbhjznuberjzxexmcjixurqbxiwpwejuebymxepcejruptxanjvwhpcmvlcnbmewucfpevmwucdhzmtekwxqainzwhcvgbskgjzrbkvtztbrscxtyxvvabkbfijxbvcepegzxuelqhcojgkqbltzdxntodnxkqlavk\nohisacwgofdsgcpknqbcsyuzvtndlvytedvodkdsarbavfdrjsjuqalolozqbzxrzmgvzqgaxvxlxzikpzsoozoaqpwablxyoiawwbyphkoszstmmkgysmyeykmskovidrdogdmdvysxggyuwaqdoniktfuwagpnhhvpkgykzfkmrrfxnnxxmojjptmdytlnwmpnrlnmmiuvlskilmmltmygniqmnprrezeorxithcvmledqcshfhrkqnyioqtivphvavpnwii\nffndbdipcgsfpjihkxhvbusrisssxcppfrcignjnzjgstphdvlwgjxkwopopaoxkeebmogmgescycjllsriwtsqmrbiixmrubpkdogcxxglsgekicqjczghiuxecfwkukvsjutufcklizcjl\nckitcnvoknbqekhgcnmxqflnwfqvuyslqppswtprmsumjrbheavbluvtoutlapeahyddbicycnvqlkrtcbvijlxpydlwezzvrcnwjosjmiugohealqdmahdyyplqgnrlqhzwifoixquleelnxupwbosmtcfwmhezyscchtnmdrsajgyhdhggiuneuhqwqitsvzuibnkntpaxivlrojinzjxemsdjexpzxbaruizxyylhdrnouekbczrgnuaaqdvfuimgxdldmqfccwmgtilhswwsgwbvuhvkzttqypviyhmufoffhiozgaxlhryqqlynpjaoxcsadygvykkwaqurmimgznuaekhwtzigrijmvdultyzjrlbcvoicy\notsrsfmytqyskpvkqhozoiynnkzhueyheqpjligcasnyhrftopqadqjpksymzbhjrhuokbfstczozmfafdtzwrnetzwvkyuenzzpuqlsxlkajzgceijugduzptavuljjwjyqrwqlkzbdgjxytynqmdtoblcegtbtdyrqmigplggllmlhquwfuxiciksswesyqkvlcbqdlwitbeyfpabepwlkgvgkwxxjnasczdrilznglsplaitpijbwnpfhqypsowkzsvgmzxflwkxnpqyuwgtrcepjuubwxqlelnnqnjxxluwekhhhstohdmqrbtfbdnsujneljatkysmdcpetynczhjtqmfmlfsyuwadauwwcejkasjvllmulyonpfzalfzolepjmwpaedvjobliddskxlqjtxfqhlvshimsbyaxjtzkoigbctlhavdcmqrmnkcukvvhntmgtiuib\nzmzvgksxdanbgejqrfubhqwzskzoooycgnghuqkqiemqphebkposssuaipvinqsybyubaunthmmljedgwqpldipsivhpzavjvvuxopezphyaoxglyjzwbitrvtwcnhhkpweipvqsjmdsxvjkukbdwcgmhbnoetxoqgmpgwhjlzqupeutksoqzgwncodvmolejtpbeeybvkjssrlntcgtiqaxclvlsxgujmjcdsswjyxyprzhhlaszteoauejckcscrepjrodigozyriheyumq\n', '7\nofhczqbpgntitnhmqrsycetmpzhhiepnkumfjfrddtinvinzndqqvnllbsghamnpuftqgqjymklqnzldsbrfyezgojesirgucpndldzbolkqyeqhrbnyibcbeluerzxtgidsiachywltkydenheunadedeyptcklvncosrcspunlnmajlnmnnentoyueaqluvpacrbmuvzviygrkovmmlszvnhvziftesktiklpfwahsqsrtiinelnbghvkekhglouvueztejyhuuujsmqheytj\nyrbqmgwctwebohukztgmrelfwuvfluirafincbaoorkfdwompchqgiqfjwujcuhhfggfrkwjattswrmbowviuzmdtahegafwpzovroymrrfesbmezziohrbupchtklnuntrjjjtxvkqolzfsxlclthmttbrahpqjldkymzaxppseychrzjhuizwmycqpuygymunptnuaxjhiqjltlnhqgpqhqoanpjpkfymqwmfqxdinaxargnxxctsfmwsagereibavygyvbhsuxzqxaqoxxpplbmhzepxuhsmnfcdvlvnitdwxlqvtsqrowekjrtewkwqsjlnetmzxyrtqns\njuofuvjsglakmuyaelwotpmnxnxjhravsiohjllwggrewagootvuhig\ntjvyffgxgdayzcvioobkhuj\nkiaqqxsugdtkhrlxkqnnamdqilqpixjzkctdhgjxfzgdtwkyiwnjyejbttpamjqiyzycsygpbaamxkvgmdvmypswizbusvpjjjczmidqeycwmjjbkhbdbimogcmpbgteaxobyeivdwacijgakexvneoldxjgzvgufmjuohobprdiisdhpwatelowjfthtwisdffqncukicapzalplaafmqguanqpjtjgivreexvseertluiiytsqkjxifmgvhfcevpjsknypdbbctgtjg\nxpocrcwxldynjipznxhcxavzxywmiulttlipdldjxinxgogvonxltlelpbnjmewvbxbvgkgzvtixhuzscgfmhrifnmuvgqiunlmlurnqjvvbnppwsdgaexsdivxfbzsvrcazhdohqhrwvejzwnyenvftbiidrurhuxjqhohviyfibdnjiknpqescmwkvwwafowiqyuoypkspydamnoigjsmofgsjweuccwnavlsblxfqewqjubvygocgzdejwprtxninetamuekpfnylsogcvrueexauxdfcxjsjmaomoiffkccyipxvevnsbhhzjgcnbvbkkxggbqkespmfvtbyxumsjupapcudbytqiujjabawxlayospofpzmneddphxfwimchludavimggcjnfhxhyjuchwbnwsvtw\ncljnwqjkgjtjqwzhwltwchsqtnos\nwyqhzwpodsdqblbwyoghngtdyukxnhaqomahrxhdtlwdftckgpsytfhbsspyohelygckdhcqbggczwcoiowxkbzhodvtclfhlxtybujjgcpexcfgzpahgtgtedfrhcobqjlumaozegqncvfntwnqfmndtekfpgcprchlhjgwbauptofefrssyjzxmbxzkdycplxzskjugdrlfhhshbknsufdlicpthwilcbdiaxeawunxaeqstmhebremjolpcdgtjgkdmxuvovfueopiridsundrglvcxdvtqquxbo\npckehjctvxaeoacaqlehsyfqghbkgzwiotftyadkkctqxmncshapjcsobweyfdamk\nhhteixrkbwlnqtddglldrptwmzqnwjwwwcrnlrqirnsncewixtrbnriwsxxuqqkuljpnxdmekrymqfcxakabutlxhcwkqijszslldtgrnamcqugthzrpktnzdbemdwcbcittdprrixuauxoptxzqgoxnyqbrbhvuvpqozigbglnzdomprhacbclpbbwnuonlzsuiqwnxsfegkgeqqjftykgcmisvyjxrfvbhqqlfetotbvqxucytisqsefqbhumorzuuugyne\ntwhobgsevswzocpyqpoqszslourinlypinsvkieygmtmuu\nzqldqwphfcdeuulviuzhhmdyvupkkpimbjiwxxsskaisohtxoydqjpgwoqhajrwpnygstyuuaycabwepbsgsgwklkkmxuuvccvuzppvhtdzthrjrhqmscuiiptjfwoijukqunthwnoakugznawidgfybclwujphpyhuqvteudtdkhykeligytwkrmmfimwbqoatzammqdddzreceymmmljnsxpeaebxezzldesxur\nlgmakobibjhknoxctmtwzposeaetzsgqzdwbjrabezqxndwzvghxpwtitmixpydnujdseksprcuurijnykgbcbclgumggwotxawdcyxdmwqwxaelxbbriodhrmbiljthatrsqbjifikddfdbusewgdwzaujfbllmtiypqzkpbihcbeesbtbfcnjbquvhvvjzgubmexfsugilpxdpvhraxlstetvklkidktvbilsnayzahyljydppnhqgsxkubauozrzngywyduulkrywieznlncdgxhkfifhthmxqmnmpzolutkjwdygmkwpmmlcecqxqaslckbrdegfbwzyyxqbqgfzztgyceroekpbwbmnafcpmrhefiwsralpzosylytwhikiyemwhvwuwmmfedcjlonlxvurxtfwrwknbsfwspuckaeuvodbejdemlqssmcjijunsvodnwszastopanfolbpppdd\nuqspnssasunbuprdjzfomzogbrzuqxbhlihxbiqmjkguhchmdoafjdyeyuacymfeatlghdeffqjdqampdgkqithnbksvrhyjoxrshugxaakbwcwzbvqercabyyfmgaftkpbzbakhqjtigfsamhqpblggnonbucfdoplcomjqfzwtrfjoeychslhkturqqvexbnpwsvmnuioofkvkvdaqzbxkfpkbdkowlzeyfrjxwwftqyoydkruhpxyuazbauozqdsuzkhxljreshbxujglqfpimaspierbcjyxexdsnhvvytebjwnmsmzhtsuizjbbuxqcbpdyamymxzkfvsbnfqyolkdbftfnocoebuhdsjbkuizbqryqpdqoevaehalxeeuklsjicbpovjmnwufeouwqhqdwfloafnhxwxzyaxurdqebbndrmxqbkzcmhcjiybonfxpkeozfobszvwhrqyjyirbshuwvnkpkowwelfwpfveh\n', '9\nbkiqvbwuvjnozyeqzhtassqwoimoynchscwzejirfcbetmqacsaqbrczbnjgnsgztgqlcjtmxhfpddrbaynvlabeagidgstpgryrylttiocltsjrrrgbfmfgylfpelcgdwwuwpwszwszvotcfnivfvmkvwpfssjycptllbooecdxfomatmpucjwiftuavypdtxcsjsuclejkyydedfljbesjtarcbgqgtietlfqhainytylygsesvrjkeclaqczmyjwtavqputdiqnylsygphmgucexkhwuobtoiyfhuqoqqtmsklxcwqdoejacxxnicyrogynfxcwngiziegimixnlwxztbfleavfekyyqesjojbqzkhvsanelijgkodbuzmuwvuzueypnslvaicnhezaxgflgvquzxttuoasaefumykmvwmwulubahtekikpdgykhxiiscuwpo\nuqyvzxtekvohossrezmtseie\ndj\ndissizflymtyxjcaytfnygpzjsaksctrressenykthwtrhqnbbmboyhohnxlpltdvpzcaxvlxskwbxfqkbujoxcaxpdpwwjtsfhlrdwjadmjmshxcbeljvykgmbhcfhlrimfmdrsdnhvuorcuhuensfwichstglhuurphmlrhaeayymtbrampjdhkritsnjcsvionshlwphrmcrbblyljqmbrgnirmygkxfnkjlomckptehreipvbujgczkoclzrterjiujyjufgfg\ngervmwzxouvggapmeufgfjrlzfitbionnndxagitbngzlcwceyaxrxjwdkffpruaenhofr\nqyrgfsozsoxkhivdfmvdqlvdnjijyttdtcyjbhwyacrzschxfwmnswcosubystuscfhhtjtlmnywhsaimhvsjbqttwypoixnjqekzjyfsgcxnqkrkrbkgmjoxcxuynnnqhocishmjlpshavygftjevsrersauskesdnjshlhwkrhysstrfsuggznkejubcafczwhmqdgenohccrvwtbsiavxbixqwkynhgociaobcqskxufzetdcrbeyvvtajlnjvppgdulsszunipnxajterkisanjtvafrhxvckeadtbipgxjnulejyfwmezesxkrtqxemjztpiv\nxloltigkbovssniaxocuoscytldwgmcakvwxhqjhvlgnfqvcpbyzlzqicrbqgsnkcclvqjoxikkpeqqxrqjmvjlyaqrcgbqpnpcrlwuwwpijxfrrlkbffjkbhvvnxdsvlyqfoirxkopwhcvlqysryvwlvycpmnxijoyuyrbxfgnmeommcmigvpscwoofficmtwjfuamqkzquakbkaiixlaexixucufxwgehpsmqiwhgwtpykwzfjpxgcdqnthbekkvjeaxsqbrvbzgkvldzdizfehtikjnkxzgsxxsvlbfowczigpsjqdrsvoxnvnsacczyspjoosfvyhmkmhafsuwlmzqjatyxqkyvvvanwwxhezpywymormrxwfwqehoulmccrlzsqitmjwmtldfoirp\navaizjtymsofkcaauifzsdeorgnsnbsqqqazlmolskkmxnvrpvtfhsnwfyurcihypnyptuxircvfytjzgbhsdieyeatqdxobfcptygjhqaklkrwcotwmkpvvzsyumlvcihwvaxjkdecyfbvozpsxqfscckdslgjtsujuakaumylterrhqvkoquujizykwqejgjnfwfmcgrquifanuybbcagajfmpzijesevvwstpmcfrubekwvozrybdveilbstvsehfefetkznlbyzorhyhmlfhbnvigvmrnlgjvrduzfcbsbunxneonzmmcxkvgmeixwsdjzsdddrpcjgsynqacsvmrhuexwdjnvpabwgrzwnkvrceneqhlaqogtwjmxtrcammapqbhfsukifodqybbbkekwvapydwrhcyeoxrdudjshixtfghutbkfcbslum\nqlsndffjanrwonnfpzmovwptnauewgpkkburvemgtpwcyilqhdaesdeuleacczeeyslzxnujmnqqsnnufjitatczrsswlwwq\nsnbnyekxwaxenhlqtlvrwuirnkyllxkmeyvjxybgmbkvuwwrbovdrrxwigipshvyswyleobiddsvwnbhzqaluwhgnjkashgzsnhxxapmlyeohalgqbkokbwfnuudcdlamcflsnkclwrdblsupsfatatciiawsn\npxwxzjamwdgddporgewnfoobrjguhvwvjncwujdocothjcfhzfhifrshnsckfgmwefaiwyokkvahvixgjgxriwbvhyhiukhargjlhuunasgauinoucgszvpddowlmvqngnvpzkytvcgcvnwktkgntkcrlxvnuxpssukmluyzxuzjasvbsnxziiqbuwthyzybfooirgfmjbsgcytexovduuktdkefomtulpwwfrxhzttoienvgtfgqyywmelvqcqjxnwquomhcoyrbstmkfnetcmyqjsrbnbfauhxhldaptrzssfthxdpbelyvgepwtvrmisqvwoabzyzzyppcmbntducxugktpgpesnu\nbimcafrhtqazfcdhyxxibeccvhjxsfpxnoavelltxrsnuwoiiilwbinfrjywhrptpbfoonnvpepdnhbmgzatscnuyepvezsfokadqbfrjolwkavpmiltqzievqbjhqorlzugqpzqjvltvsmoacygflkoiunsxhaqahxvhpxauso\nwsfubvsplmiktruxwp\nsnqjkmlqlunxnqxkfdewawqivdafwjpdzzxaaudadnrldubweukqtuacjuthgbizbqjkphpxijzvtvmwnztaqhxkevpndjodolgclobwlccvabmvswbseojhbrywrpmzvhdeylrngvvpvqvjmwjpglsevbdamikeagzxairaxkfisxpjnualqkoaoiybzfjhlhhyabvhcf\ndadnlxolqtwokgklixbjhvferouvenmouztzzuonuyqvofkerpflxvyoyhjxacvwesntqwvolaguunzfpmwajpvojmeuusabomwbhynsswlitesqvywznammoymawnfgvkzjnnszcsubdrqeywgmzbaozbmybvframgsfxvjykyipizltojtlyzjldcfghkrspmjfaugcniydwgcnvbwfsgeegtkktfnkmgfoulzncmhedhfocivfyqmbpthucupd\nbzrveprktojaallwzqswmoqvvvvsyovysqvvkwzgkaqwotvrsiomuaxzayepcehnqbrksbrfsdlwqaniosqmpjtnnfkkabtmpgehaopkpgeyfbrhrgbadqaobgyijruotrwhhpfilxzgikaefctmzzrpbvmolzqvejofwdjzctimvmjkcbhhivebajvidalbupufzbbnnswpvnlnbrjsmxeawtazuhinyotmvuhsxkqchugmlohtybgdpqpyfefzxwevcqadymwwwibiykrouskcultdolohwksmapgfyzimqrzrdbqavnbxnroknodbzlawlglndfajmwuwudaqvstctjpopqlaqalkuratuzzdjjdwsrtwmlfpjiizyblqhszylnikcxibqzstmicwqgrngacjksqakpuonmfpvjbrhqagbcoosaufprebugkejcni\nblekxwkwegtcycozfhprbrpypetqodybuwqcewsiojpkpvgwgidlozlmmhnmxbsnlybyhdmprwppjhcihxbstvxxfwapuaapjjdghtylaccoopsbfuaolnckiwvxvnvbvwonhwyzvwqfaxvktpmxbirvadxpmyautecpcgznchqzsqzoafzhtmgatjcbeuwhuuiviegavwwskurlrtejuzfdzlhihgncfardgseitiqinucoukuozjairnvdlytogvslxkhznfjwvttnugrgcbpjflgyflcjxdqtbbpcvhnrtqkvpjkzchtomnbjvejfikfykyjhzpqednzhbqnvinjsytzdzudwosznjvifdrzpynxilhvtmnijufychlvjawrtfqqspgusjhcsdqovoaopvvgxvwkpobinqxhchknqtvgodvmjyscx\nkgcvzegjctrmumvyhrokpgqlfheudgqiwxnosiuqhlrrgvbwguvmvcvdkonhzgzjcafjdocnvdaddgwbgxktdbhqzyptvnfbjnugskguiblzpfwwwhbccxswsbxwizegujxvrysbijxjprcdtpbhrwhmnajkglbuhfntxdpsyuhqgultnuonooqfffrjjiccpedtfwrqtlyzviraynikwzhnguziuwvtgdpmbuuckvwmoniwmg\n', '4\nybonkfgbonofvwrbfapmudkgoqknzaobwdhvdfucvkcuyeudlhrboetakqsthjsslprnybxjsfxnycyuzh\ngkqymfnjyraazcpwvfkosxessswtiykgstrrrbkxdffhihnbusvzprbkmyxswvmmfqernwqrrmuyzzqgcxaawrajqhmrzvkdagxetiiadgsq\nzthsvjrosgapawamaiuczkjukizqgxdmdhzqlnwmsqlskxyohgpqhkuqnvqggbyrxfswlzpnbxnhqwwxivouolfqiimyeecpohrvoiememecqqhuswypjbvrffikekxkiylsxylqwcdeapfmpfvakzwprepdblvbrmqstcuekkogilubvylygvgozqlzdwltynojkmksirzzwybgmptcguvjzdsuofqnyflkdubkzmgukyhmjgvtglrrqbihbolvokfzkbeuiifxihclmwfluvpxkmtbspcptxblumbyoyqzluesokicosryftewxrgttiesdwqtmbivmxcfuuqxdfakyafqjqzdevgkhmdoqclddjtnxmkpfpgscpzdnnjfngizspxeuzwfgcntgdkswyxwkmpeieahlcqnftekesfgptrherfyjavfrgqpamkvnqbmtnjsunbxhobvoctsfbsjiuewxadtyjsuydagvtfgdcoa\nmaiyihicqynhfsrfptactjawafpowzbtkmjgfbnikoaokooknxlousbwsxjexydatbhixljcyajlxhkvrwcebaehqxovpcoeuqdilkjcdyvidpzylfuiysbmcopdmzupfjnvkdspsnyvwctziarxlclapdjbqhtqdqbxjjuqqjgpjmkbeunvcvopgytfkrnfjlbedekbwbdtmklkcyutqqhupdyopqakbknirbuimaqujmpgglssvwwynqqlrrnar\nnhwevnsbjmuyqorbcuzhjeudtbfqarfnqswqcftvmrjoqhgqckfupgmyyrawsfhoxpkvhqzsdckdwwoevglspnwkedmkohjvvecbfzgauiqmbcotojuwabckypuhwotlbudawkyturpwjdneqgugtginlnzmqxiiljvfqirbihxfsopdcqjxsuxocmwmgestluyddubej\nhbfexkfhnoxjnkdzdlkzbrvjmujmfpzrjbpydnpegmhxesghbpawimgcmlvfblrswrhdobghcjesdhltmfqkvuvkgueizrjmnjfiefscfonbqhpmzjrfxippjfjcyxbxmihwrycoailplinduhvuehuymehndihjauikxczfrcfmprgniowsncesykzowonbctanfvlowbriljmlmjapyrzquxblgbcngvkzvcjpymivukxluyvwlqdxdtkeglzddojczjlvxjpnsmntzrkrzqlrlzqrbqabcsbjyhnkvgbmfdoezcbyipofcjgqgthyjcuhtskgcdnuqycjwxiloztrkyvnkihzhbdrigztfymgiwguzifargsadhejekspntedidyiyrziyfufqortvzhglivsosdobkoqh\nukajyczfshkeobmgwsbwexaecadvmnnqkplvmtcqyuhcvvvzotpcxtcrxoqyfbcegyunyonltmofiagbgnsuanjxxupxgqhmunawhtszmilhudqihgwhoekpawinvodzhpdoqkfmkyhuagjbgyhalfqnyrcgvuxhqaaikvdafrckliesetqguivut\nekkqdmyztmgwmlqtknewkrhrqtyuqupqnkpzflzwhigxvouwvqksnpwnbcrjcigbsmwsduchmqfjsblbaeowvxwdkbijdtviftrsgcwnevagttdbfahuwtbkszgvciviyxxjpmxiqfezhimxvojlgkbavujltnumqoitnmyzadktxtjhxohmgwszscbvsgcbsbnasspummqmrjygx\n', '57\n12\n112\n21\n106\n42\n', '62\n74\n108\n111\n87\n64\n107\n6\n36\n31\n33\n13\n75\n20\n57\n12\n37\n54\n30\n98\n145\n60\n116\n101\n66\n12\n86\n55\n27\n51\n114\n113\n45\n18\n4\n143\n127\n99\n125\n62\n60\n80\n65\n46\n93\n5\n31\n65\n75\n51\n42\n40\n71\n73\n64\n24\n65\n32\n104\n13\n67\n77\n48\n53\n', '11\n36\n59\n15\n93\n69\n84\n52\n5\n16\n66\n74\n58\n2\n121\n13\n', '19\n90\n62\n120\n5\n132\n11\n77\n86\n38\n105\n42\n63\n', '15\n44\n62\n42\n3\n108\n61\n56\n', '109\n94\n22\n37\n16\n71\n107\n10\n3\n111\n52\n16\n37\n', '11\n105\n72\n116\n', '92\n10\n103\n21\n36\n29\n156\n', '22\n2\n42\n135\n39\n74\n14\n105\n104\n', '28\n104\n92\n56\n', 10, 'a0003');
INSERT INTO `question_bank` (`num`, `question_name`, `question_description`, `image1`, `image2`, `input1`, `input2`, `input3`, `input4`, `input5`, `input6`, `input7`, `input8`, `input9`, `input10`, `output1`, `output2`, `output3`, `output4`, `output5`, `output6`, `output7`, `output8`, `output9`, `output10`, `input_or_not`, `id`) VALUES
(4, 'Optimal_Binary_Search_Tree', 'Sample Input 1\n5\n0.1500 0.1000 0.0500 0.1000 0.2000\n0.0500 0.1000 0.0500 0.0500 0.0500 0.1000\nSample Output 1\n2.75000000\nSample Input 2\n7\n0.0400 0.0600 0.0800 0.0200 0.1000 0.1200 0.1400\n0.0600 0.0600 0.0600 0.0600 0.0500 0.0500 0.0500 0.0500\nSample Output 2\n3.12000000', 'https://i.imgur.com/8JtYBiM.jpg', 'https://i.imgur.com/tcfjGbi.jpg', '92\n0.0016 0.0032 0.0011 0.0027 0.0064 0.0102 0.0021 0.0097 0.0043 0.0016 0.0102 0.0038 0.0097 0.0011 0.0027 0.0043 0.0097 0.0059 0.0016 0.0048 0.0038 0.0021 0.0021 0.0021 0.0043 0.0054 0.0027 0.0091 0.0016 0.0075 0.0064 0.0011 0.0064 0.0086 0.0005 0.0027 0.0016 0.0102 0.008 0.0038 0.0005 0.0048 0.0043 0.0048 0.0043 0.0027 0.0054 0.0048 0.0027 0.0086 0.0011 0.0064 0.008 0.0064 0.008 0.0038 0.0102 0.0075 0.0005 0.0011 0.0075 0.0043 0.0075 0.0048 0.0005 0.0016 0.0027 0.0005 0.0064 0.0016 0.0016 0.0016 0.0027 0.007 0.0038 0.0097 0.0027 0.007 0.0059 0.0043 0.0043 0.0048 0.0054 0.008 0.0064 0.0091 0.0091 0.0097 0.0102 0.008 0.0075 0.0102\n0.0091 0.0059 0.0027 0.0064 0.0048 0.0102 0.0097 0.007 0.0059 0.007 0.0038 0.0086 0.0021 0.0021 0.0048 0.0027 0.0021 0.0097 0.0054 0.0043 0.0027 0.0021 0.0059 0.008 0.0102 0.0064 0.0032 0.0097 0.0059 0.0011 0.0032 0.0075 0.0027 0.0097 0.0027 0.008 0.0054 0.0048 0.0032 0.0027 0.0086 0.0097 0.0048 0.007 0.0027 0.007 0.0005 0.0011 0.0086 0.0027 0.0075 0.0091 0.0054 0.008 0.0032 0.0097 0.0075 0.0064 0.0097 0.0027 0.008 0.0064 0.0027 0.0021 0.0054 0.0059 0.0048 0.0064 0.0032 0.0005 0.0021 0.0064 0.0091 0.0064 0.007 0.0064 0.0097 0.008 0.0091 0.0032 0.0097 0.0091 0.0086 0.0059 0.007 0.0059 0.0048 0.0048 0.0091 0.0048 0.0016 0.0075 0.008 ', '74\n0.0044 0.0087 0.0029 0.0029 0.0029 0.0022 0.0036 0.0124 0.0015 0.0036 0.0138 0.0124 0.008 0.0087 0.0066 0.0109 0.0058 0.0131 0.0073 0.0066 0.0022 0.0051 0.0029 0.008 0.008 0.008 0.0007 0.0073 0.0051 0.0007 0.008 0.0124 0.0066 0.0051 0.0102 0.0007 0.0029 0.0015 0.0102 0.0087 0.008 0.0029 0.0007 0.0015 0.0007 0.0051 0.0015 0.0117 0.0109 0.0015 0.0124 0.0131 0.008 0.0073 0.0095 0.0015 0.0073 0.0087 0.0073 0.0095 0.0051 0.0087 0.0131 0.0117 0.0087 0.0131 0.0044 0.008 0.0066 0.0029 0.0087 0.0051 0.0124 0.0029\n0.0102 0.0044 0.0007 0.0117 0.0058 0.0044 0.0036 0.0095 0.0015 0.0058 0.0022 0.0087 0.0073 0.0007 0.0124 0.008 0.0007 0.0066 0.0102 0.0022 0.0102 0.0066 0.0058 0.0007 0.0029 0.0066 0.0102 0.0131 0.0109 0.0022 0.0131 0.0073 0.0044 0.0095 0.0109 0.0036 0.0095 0.0102 0.0015 0.0138 0.0022 0.0138 0.0066 0.0029 0.0109 0.0022 0.0051 0.0036 0.0138 0.0109 0.0095 0.0051 0.0109 0.0087 0.0066 0.0095 0.0022 0.0022 0.0102 0.0015 0.0044 0.0138 0.0066 0.0007 0.0138 0.0022 0.0131 0.0029 0.0015 0.0117 0.0029 0.008 0.0015 0.0036 0.0124 ', '20\n0.0362 0.0339 0.0385 0.0113 0.0271 0.0204 0.0271 0.043 0.0362 0.043 0.0317 0.0045 0.0181 0.043 0.0271 0.0113 0.0294 0.0249 0.0158 0.0068\n0.0045 0.0317 0.0317 0.0045 0.0317 0.043 0.0113 0.009 0.0023 0.0362 0.0249 0.0136 0.0113 0.0204 0.0339 0.0181 0.0362 0.0271 0.0249 0.0407 0.0136 ', '107\n0.0076 0.0038 0.0005 0.0052 0.0043 0.0043 0.0014 0.0028 0.0062 0.0066 0.0009 0.0052 0.0043 0.0019 0.0009 0.0009 0.0009 0.0019 0.0057 0.008 0.0024 0.0009 0.0019 0.0076 0.009 0.0066 0.008 0.0071 0.0066 0.0062 0.0033 0.0014 0.0047 0.0005 0.0047 0.0024 0.0043 0.009 0.0071 0.0033 0.0014 0.009 0.0005 0.0043 0.0005 0.0019 0.0038 0.0024 0.008 0.0043 0.0043 0.0062 0.0057 0.009 0.0019 0.0066 0.0062 0.0009 0.0066 0.0038 0.0047 0.008 0.0052 0.0085 0.0057 0.0033 0.0005 0.0038 0.0062 0.0085 0.008 0.0028 0.0024 0.0076 0.0043 0.0028 0.008 0.009 0.0024 0.0052 0.0085 0.0047 0.008 0.0066 0.0005 0.0028 0.0085 0.0076 0.0052 0.0071 0.0033 0.0052 0.009 0.0085 0.008 0.0066 0.0028 0.0005 0.0019 0.0033 0.009 0.0019 0.0057 0.0005 0.0047 0.0019 0.0028\n0.0028 0.0071 0.0028 0.0062 0.0014 0.008 0.0038 0.0076 0.009 0.0043 0.0028 0.0038 0.0005 0.0009 0.0062 0.009 0.0019 0.0014 0.0085 0.0009 0.0028 0.0085 0.0043 0.0071 0.0076 0.0038 0.0028 0.0038 0.0009 0.008 0.009 0.0014 0.0047 0.0076 0.0047 0.0033 0.0038 0.0047 0.0014 0.008 0.008 0.0062 0.0052 0.0019 0.0005 0.0066 0.0028 0.0076 0.0005 0.0024 0.0019 0.008 0.009 0.0047 0.0024 0.0038 0.0062 0.0076 0.0052 0.0019 0.0019 0.008 0.0028 0.0052 0.0047 0.0085 0.0057 0.0076 0.009 0.008 0.0071 0.0085 0.0038 0.0028 0.0028 0.0014 0.0038 0.0052 0.0009 0.0014 0.0043 0.0033 0.0057 0.0057 0.0005 0.0062 0.0038 0.0052 0.0019 0.0014 0.0019 0.0047 0.0047 0.009 0.0014 0.009 0.0005 0.0047 0.0047 0.0033 0.0014 0.0005 0.0062 0.0057 0.0076 0.0009 0.009 0.0076 ', '62\n0.0134 0.0024 0.0111 0.0087 0.0134 0.0016 0.0142 0.0032 0.0032 0.0087 0.0103 0.0134 0.0142 0.0111 0.0142 0.0039 0.0016 0.0008 0.0134 0.0118 0.0111 0.0087 0.0103 0.0047 0.0032 0.0126 0.0087 0.0095 0.0071 0.0047 0.0111 0.0039 0.0142 0.0126 0.0095 0.0111 0.0063 0.0024 0.0111 0.0008 0.015 0.0087 0.0016 0.0063 0.0008 0.0103 0.0055 0.0047 0.0032 0.0134 0.0111 0.0039 0.015 0.0047 0.0063 0.0039 0.0095 0.0055 0.0032 0.0126 0.0134 0.0032\n0.0134 0.0071 0.0024 0.0095 0.0087 0.015 0.0024 0.015 0.0087 0.0047 0.0024 0.0134 0.015 0.0111 0.0126 0.0103 0.0032 0.0063 0.0095 0.0024 0.0024 0.0063 0.0118 0.0095 0.0063 0.0055 0.0079 0.0016 0.0055 0.0087 0.0055 0.0047 0.0032 0.015 0.015 0.0095 0.0008 0.0111 0.0103 0.0103 0.0047 0.0063 0.0032 0.0134 0.0047 0.0126 0.0055 0.0071 0.0063 0.015 0.0079 0.0134 0.0103 0.0016 0.0032 0.0118 0.0071 0.0087 0.0055 0.0039 0.0079 0.0118 0.0039 ', '84\n0.0038 0.0013 0.0013 0.0102 0.0077 0.0006 0.0045 0.009 0.0013 0.0051 0.0077 0.0045 0.0109 0.0006 0.0038 0.0083 0.0109 0.0006 0.007 0.0077 0.0006 0.0045 0.0038 0.007 0.0038 0.0064 0.0064 0.0122 0.0051 0.0038 0.007 0.0102 0.0064 0.0064 0.0058 0.0019 0.0077 0.0032 0.0032 0.007 0.0045 0.0006 0.0038 0.0058 0.0019 0.0102 0.0058 0.0058 0.0013 0.0026 0.0006 0.0122 0.0058 0.0032 0.0083 0.0109 0.0032 0.0122 0.0115 0.0115 0.0026 0.0006 0.0109 0.0051 0.009 0.0102 0.0096 0.0122 0.0032 0.0051 0.0045 0.0045 0.0058 0.0122 0.0045 0.0115 0.0051 0.0109 0.0019 0.0038 0.0064 0.0019 0.0064 0.0058\n0.0026 0.0115 0.0045 0.0045 0.0122 0.0019 0.0032 0.0026 0.0026 0.0032 0.0038 0.0115 0.0045 0.0051 0.0051 0.0019 0.0064 0.0064 0.0013 0.0115 0.0096 0.0109 0.007 0.0006 0.0019 0.007 0.0058 0.0109 0.0122 0.0045 0.0032 0.0115 0.0051 0.0122 0.009 0.0006 0.009 0.007 0.0064 0.0096 0.0096 0.0083 0.0109 0.0032 0.0051 0.0032 0.0019 0.0032 0.0115 0.009 0.0038 0.0064 0.0038 0.0038 0.0032 0.0058 0.0102 0.0096 0.0102 0.0019 0.0038 0.0083 0.0115 0.0013 0.0109 0.0013 0.0019 0.0026 0.0077 0.0032 0.0045 0.0019 0.0038 0.0026 0.009 0.0115 0.0038 0.0077 0.0006 0.0013 0.0026 0.0096 0.0032 0.007 0.009 ', '145\n0.0054 0.0017 0.0027 0.0037 0.0027 0.0037 0.0003 0.0048 0.0017 0.0031 0.0041 0.0048 0.0058 0.0034 0.002 0.0014 0.0051 0.0034 0.0058 0.0017 0.0034 0.0041 0.0048 0.0037 0.0031 0.0024 0.0065 0.0058 0.0048 0.0027 0.0007 0.002 0.0037 0.0041 0.001 0.0058 0.0054 0.0048 0.0048 0.0044 0.0061 0.0058 0.001 0.0017 0.0024 0.0014 0.0048 0.0017 0.0034 0.0051 0.0003 0.0054 0.0044 0.0044 0.0065 0.0041 0.0003 0.0031 0.0007 0.0058 0.0058 0.0014 0.0041 0.0024 0.0041 0.0034 0.0027 0.0031 0.001 0.0007 0.0061 0.0048 0.001 0.0051 0.0024 0.0037 0.0003 0.0048 0.001 0.0003 0.0027 0.0065 0.0007 0.0014 0.0051 0.0003 0.0034 0.0014 0.0061 0.0058 0.001 0.0024 0.0007 0.0048 0.0054 0.0031 0.0041 0.0058 0.0061 0.0048 0.0034 0.0003 0.0044 0.0054 0.0024 0.0048 0.0037 0.0014 0.0054 0.0031 0.0007 0.002 0.002 0.0007 0.0041 0.0051 0.0044 0.0034 0.0041 0.0003 0.0048 0.0041 0.0065 0.0024 0.0024 0.0054 0.0003 0.0031 0.0003 0.0051 0.0065 0.0024 0.0024 0.0054 0.0048 0.0054 0.0003 0.0003 0.0007 0.001 0.0031 0.0061 0.0065 0.0054 0.0048\n0.0051 0.0044 0.0037 0.0024 0.0024 0.0054 0.001 0.0044 0.002 0.0044 0.0061 0.0027 0.0041 0.0014 0.0037 0.0003 0.0065 0.002 0.0031 0.001 0.0031 0.0031 0.0054 0.0024 0.0065 0.0024 0.0041 0.0054 0.0024 0.0007 0.0024 0.0024 0.0051 0.0051 0.0044 0.001 0.0003 0.0048 0.0041 0.0054 0.0051 0.0048 0.0031 0.0051 0.0007 0.0048 0.0061 0.0024 0.0061 0.0007 0.0003 0.0037 0.0034 0.0041 0.0065 0.001 0.0051 0.0031 0.002 0.0048 0.0048 0.0065 0.0044 0.0027 0.0017 0.0017 0.0014 0.0007 0.0041 0.0017 0.0061 0.002 0.0041 0.0014 0.001 0.0014 0.0017 0.0017 0.0027 0.0051 0.0048 0.0017 0.0061 0.0014 0.0007 0.0044 0.0051 0.0048 0.0041 0.0037 0.0058 0.0051 0.0024 0.0061 0.001 0.0051 0.0048 0.0031 0.001 0.0014 0.0017 0.0007 0.0048 0.0024 0.0007 0.0037 0.0031 0.0007 0.0061 0.0065 0.0003 0.0058 0.0017 0.0058 0.0041 0.0044 0.0051 0.0041 0.0048 0.0024 0.0054 0.0041 0.0037 0.0058 0.0017 0.0037 0.0034 0.0058 0.0037 0.0034 0.0034 0.0041 0.0034 0.0003 0.0051 0.0041 0.0024 0.0007 0.0041 0.0031 0.001 0.0061 0.0065 0.0061 0.0034 0.0058 ', '114\n0.0049 0.0031 0.004 0.0075 0.0018 0.0018 0.0084 0.0062 0.0084 0.008 0.0075 0.0022 0.0049 0.0031 0.0013 0.0013 0.0004 0.0049 0.004 0.0053 0.0018 0.0013 0.0004 0.0044 0.0022 0.0009 0.004 0.0013 0.0049 0.0031 0.0049 0.0084 0.0027 0.0058 0.004 0.0044 0.008 0.0067 0.0049 0.0044 0.0044 0.0062 0.0075 0.0018 0.0044 0.0075 0.0018 0.0062 0.0058 0.0027 0.0036 0.0009 0.0062 0.0053 0.0075 0.0058 0.0075 0.0031 0.004 0.0027 0.0071 0.0084 0.0067 0.008 0.008 0.008 0.0053 0.0036 0.0022 0.0084 0.0084 0.0036 0.0067 0.0022 0.008 0.0022 0.0075 0.0013 0.0084 0.0018 0.0062 0.0075 0.0018 0.0049 0.0027 0.0062 0.0062 0.0044 0.0044 0.0067 0.0084 0.0067 0.0031 0.0031 0.0071 0.0049 0.0053 0.0031 0.004 0.0062 0.0013 0.0049 0.0027 0.0009 0.004 0.0027 0.0027 0.0004 0.0044 0.0022 0.0067 0.0018 0.0018 0.0022\n0.0049 0.0067 0.0027 0.0075 0.0062 0.0027 0.0058 0.004 0.004 0.0049 0.0062 0.0031 0.0075 0.0058 0.0075 0.0044 0.0018 0.0022 0.0013 0.0027 0.0031 0.0004 0.0053 0.0009 0.0013 0.0036 0.0036 0.0084 0.0031 0.0084 0.0022 0.0004 0.0044 0.0027 0.0058 0.0022 0.0031 0.0022 0.0067 0.0053 0.0053 0.0022 0.0075 0.0044 0.0071 0.0053 0.0058 0.0053 0.0071 0.0022 0.0044 0.0004 0.0049 0.0062 0.0036 0.0031 0.0022 0.0004 0.0013 0.0071 0.0084 0.0027 0.0031 0.0018 0.0062 0.0084 0.0018 0.0027 0.0004 0.0053 0.0067 0.0071 0.0018 0.0036 0.0049 0.0031 0.0084 0.0053 0.008 0.0027 0.0004 0.0009 0.0027 0.0058 0.0027 0.0084 0.0044 0.0013 0.0022 0.0036 0.0067 0.0058 0.0044 0.0049 0.0058 0.0044 0.0071 0.0036 0.0027 0.0044 0.0013 0.0036 0.0067 0.0013 0.0009 0.0031 0.0062 0.0027 0.0067 0.0036 0.0058 0.0009 0.0004 0.0084 0.0027 ', '113\n0.0088 0.0083 0.0009 0.0046 0.0014 0.0074 0.0028 0.0088 0.0023 0.0009 0.0023 0.0018 0.0078 0.0018 0.0046 0.0037 0.0055 0.0069 0.006 0.0032 0.0088 0.0083 0.0051 0.0005 0.0078 0.0018 0.0046 0.0014 0.0032 0.0028 0.0046 0.0074 0.0018 0.0055 0.0083 0.0046 0.0046 0.0037 0.0074 0.0065 0.006 0.0041 0.0023 0.0055 0.0065 0.0046 0.0014 0.0069 0.0014 0.0028 0.0041 0.0041 0.0005 0.0083 0.0005 0.0009 0.0065 0.0023 0.006 0.0069 0.0014 0.006 0.0074 0.0032 0.0037 0.0037 0.0005 0.0069 0.0014 0.0046 0.0069 0.0078 0.0041 0.0051 0.0005 0.0014 0.0028 0.0028 0.0005 0.0009 0.0046 0.0009 0.0018 0.0055 0.0014 0.0065 0.0009 0.0074 0.0041 0.0018 0.0078 0.0074 0.0083 0.0014 0.0037 0.0028 0.0055 0.006 0.006 0.0065 0.0032 0.0032 0.006 0.0051 0.0028 0.0014 0.0023 0.0005 0.0083 0.0028 0.0065 0.0023 0.0023\n0.006 0.0041 0.0032 0.0078 0.0005 0.006 0.0083 0.0032 0.0018 0.0005 0.0005 0.0009 0.0005 0.0023 0.0078 0.0055 0.0069 0.0069 0.0032 0.0018 0.0037 0.0055 0.0055 0.0037 0.0055 0.0069 0.0028 0.0037 0.0078 0.0023 0.0041 0.006 0.0069 0.0046 0.0009 0.0028 0.0088 0.0078 0.0018 0.0005 0.0088 0.0088 0.0037 0.0055 0.0023 0.0046 0.0009 0.0046 0.0078 0.0051 0.0078 0.0018 0.0078 0.0069 0.0014 0.0074 0.0069 0.0046 0.0069 0.0005 0.0074 0.0074 0.0051 0.0032 0.0041 0.0014 0.0055 0.0069 0.0055 0.0032 0.0083 0.0074 0.0032 0.0005 0.0078 0.0041 0.0028 0.006 0.0055 0.0023 0.0005 0.0005 0.0078 0.0023 0.0005 0.0005 0.0055 0.0046 0.0065 0.0078 0.0032 0.0032 0.0028 0.0065 0.0051 0.0005 0.0028 0.006 0.0083 0.0074 0.0074 0.0005 0.0055 0.0078 0.0041 0.0009 0.0023 0.0041 0.0041 0.0088 0.0009 0.0041 0.0088 0.0083 ', '91\n0.0011 0.0017 0.0023 0.0011 0.0091 0.0011 0.0109 0.004 0.0086 0.008 0.0097 0.0006 0.0069 0.0086 0.0086 0.0063 0.0051 0.0091 0.0063 0.004 0.0063 0.004 0.0034 0.0051 0.0046 0.0074 0.0103 0.0029 0.0029 0.0034 0.0057 0.0029 0.0006 0.0011 0.0034 0.0074 0.0074 0.0091 0.004 0.0006 0.0011 0.0029 0.0057 0.0109 0.0017 0.0029 0.0097 0.0091 0.0046 0.0086 0.0109 0.0103 0.004 0.0074 0.0086 0.0103 0.008 0.0029 0.004 0.0034 0.0074 0.0023 0.0074 0.0011 0.0103 0.0063 0.0017 0.0011 0.0051 0.0086 0.0091 0.0029 0.0006 0.0069 0.0057 0.0074 0.0034 0.0051 0.0091 0.0103 0.0046 0.0103 0.0023 0.0097 0.0109 0.0097 0.0034 0.0023 0.0034 0.0057 0.0091\n0.0023 0.0074 0.004 0.0086 0.0063 0.0006 0.0046 0.0091 0.0046 0.0074 0.0051 0.0029 0.0097 0.0006 0.0034 0.0097 0.0057 0.0057 0.0023 0.0029 0.0034 0.0069 0.0017 0.0063 0.0109 0.008 0.004 0.0051 0.0097 0.0017 0.0097 0.0006 0.0023 0.0069 0.0086 0.0023 0.004 0.0006 0.0029 0.0086 0.008 0.0063 0.0006 0.0063 0.0097 0.0011 0.0091 0.0011 0.0023 0.0034 0.0074 0.0023 0.0034 0.0046 0.0097 0.0069 0.0091 0.0017 0.0074 0.0057 0.0063 0.0074 0.0023 0.0011 0.0086 0.0046 0.0069 0.0046 0.004 0.0017 0.0109 0.0074 0.0063 0.0034 0.0103 0.0057 0.004 0.004 0.0051 0.0023 0.0097 0.0051 0.0023 0.0103 0.0046 0.0034 0.0017 0.008 0.0063 0.0011 0.008 0.0029 ', '6.4790000000\n', '6.1048000000\n', '4.3503000000\n', '6.5778000000\n', '5.8371000000\n', '6.2284000000\n', '7.0498000000\n', '6.6412000000\n', '6.6867000000\n', '6.3583000000\n', 10, 'a0004'),
(5, 'Graph', 'Sample Input\n4\n1 2 2 4\n2 1 4\n3 0\n4 1 3\nSample Output\n0 1 0 1\n0 0 0 1\n0 0 0 0\n0 0 1 0', 'https://i.imgur.com/3rySvnO.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0005'),
(6, 'Depth_First_Search', 'Sample Input 1\n4\n1 1 2\n2 1 4\n3 0\n4 1 3\nSample Output 1\n1 1 8\n2 2 7\n3 4 5\n4 3 6\nSample Input 2\n6\n1 2 2 3\n2 2 3 4\n3 1 5\n4 1 6\n5 1 6\n6 0\nSample Output 2\n1 1 12\n2 2 11\n3 3 8\n4 9 10\n5 4 7\n6 5 6\nThis is example for Sample Input 2 (discover/finish)\n', 'https://i.imgur.com/GBGCVeY.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0006'),
(7, 'Breadth_First_Search', 'Sample Input 1\n4\n1 2 2 4\n2 1 4\n3 0\n4 1 3\nSample Output 1\n1 0\n2 1\n3 2\n4 1\n\n', 'https://i.imgur.com/xQo8Kra.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0007'),
(8, 'Connected_Components', 'Sample Input\n10 9\n0 1\n0 2\n3 4\n5 7\n5 6\n6 7\n6 8\n7 8\n8 9\n3\n0 1\n5 9\n1 3\nSample Output\nyes\nyes\nno', 'https://i.imgur.com/abruHg5.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0008'),
(9, 'Minimum_Spanning_Tree', 'Sample Input 1\n5\n -1 2 3 1 -1\n 2 -1 -1 4 -1\n 3 -1 -1 1 1\n 1 4 1 -1 3\n -1 -1 1 3 -1\nSample Output 1\n5\n', 'https://i.imgur.com/LPiUgbQ.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0009'),
(10, 'Single_Source_Shortest_Path', 'Sample Input 1\n5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3\nSample Output 1\n0 0\n1 2\n2 2\n3 1\n4 3\n', 'https://i.imgur.com/bi0H61a.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0010'),
(11, 'Single_Source_Shortest_Path_II', 'Sample Input 1\n5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3\nSample Output 1\n0 0\n1 2\n2 2\n3 1\n4 3\n\n', 'https://i.imgur.com/4hX7rkL.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0011'),
(12, '8_Queens_Problem', 'Sample Input 1\n2\n2 2\n5 3\nSample Output 1\n......Q.\nQ.......\n..Q.....\n.......Q\n.....Q..\n...Q....\n.Q......\n....Q...', 'https://i.imgur.com/DlSMmw4.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0012'),
(13, '8_Puzzle', 'Sample Input\n1 3 0\n4 2 5\n7 8 6\nSample Output\n4', 'https://i.imgur.com/8MuyOxV.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0013'),
(14, '15_Puzzle', 'Sample Input\n1 2 3 4\n6 7 8 0\n5 10 11 12\n9 13 14 15\nSample Output\n8', 'https://i.imgur.com/pxHZE7r.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0014'),
(15, 'Naive_String_Search', 'Sample Input 1\naabaaa\naa\nSample Output 1\n0\n3\n4\nSample Input 2\nxyzz\nyz\nSample Output 2\n1\nSample Input 3\nabc\nxyz\nSample Output3\nThe ouput should be empty.', 'https://i.imgur.com/qKWacXe.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0015'),
(16, 'String_Search', 'Sample Input 1\naabaaa\naa\nSample Output 1\n0\n3\n4\nSample Input 2\nxyzz\nyz\nSample Output 2\n1\nSample Input 3\nabc\nxyz\nSample Output 3\nThe output should be empty.', 'https://i.imgur.com/K6PfMj1.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0016'),
(17, 'Pattern_Search', 'Sample Input 1\n4 5\n00010\n00101\n00010\n00100\n3 2\n10\n01\n10\nSample Output 1\n0 3\n1 2', 'https://i.imgur.com/ccTLWu1.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0017'),
(19, 'Change-Making_Problem', 'Sample Input 1\n100\nSample Output 1\n4\nSample Input 2\n54321\nSample Output 2\n2175', 'https://i.imgur.com/km2jrSG.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0019'),
(20, 'Fractional_Knapsack_Problem', 'Sample Input 1\n3 50\n60 10\n100 20\n120 30\nSample Output 1\n240\nWhen you put 10 of item\n1\n1\n, 20 of item\n2\n2\nand 20 of item\n3\n3\n, the total value is maximized.\nSample Input 2\n3 50\n60 13\n100 23\n120 33\nSample Output 2\n210.90909091\nWhen you put 13 of item\n1\n1\n, 23 of item\n2\n2\nand 14 of item\n3\n3\n, the total value is maximized. ', 'https://i.imgur.com/1NMrgb2.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0020'),
(21, 'Activity_Selection_Problem', 'Sample Input 1\n5\n1 2\n3 9\n3 5\n5 9\n6 8\nSample Output 1\n3\nSample Input 2\n3\n1 5\n3 4\n2 5\nSample Output 2\n1\nSample Input 3\n3\n1 2\n2 3\n3 4\nSample Output 3\n2', 'https://i.imgur.com/SdSvmqz.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0021'),
(22, 'Huffman_Coding', 'Sample Input 1\nabca\nSample Output 1\n6\nSample Input 2\naaabbcccdeeeffg\nSample Output 2\n41\nSample Input 3\nz\nSample Output 3\n1', 'https://i.imgur.com/z7elYHv.jpg', 'https://i.imgur.com/FmRy9iY.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0022'),
(23, 'Insertion_Sort', '', 'https://i.imgur.com/prpq8fu.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0023'),
(24, 'Greatest_Common_Divisor', 'Sample Input 1\n54 20\nSample Output 1\n2\nSample Input 2\n147 105\nSample Output 2\n21', 'https://i.imgur.com/5aBBYhq.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0024'),
(25, 'Prime_Numbers', 'Sample Input 1\n5\n2\n3\n4\n5\n6\nSample Output 1\n3\nSample Input 2\n11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nSample Output 2\n4', 'https://i.imgur.com/s9TVyQM.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0025'),
(26, 'Maximum_Profit', 'Sample Input 1\n6\n5\n3\n1\n3\n4\n3\nSample Output 1\n3\nSample Input 2\n3\n4\n3\n2\nSample Output 2\n-1', 'https://i.imgur.com/DBOmFCz.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0026'),
(27, 'Bubble_Sort', '', 'https://i.imgur.com/k6jOkh0.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0027'),
(28, 'Selection_Sort', '', 'https://i.imgur.com/F9DuTmP.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0028'),
(29, 'Stable_Sort', '', 'https://i.imgur.com/EibYSmf.jpg', 'https://i.imgur.com/vYYiYBm.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0029'),
(30, 'Exhaustive_Search', 'Sample Input 1\n5\n1 5 7 10 21\n8\n2 4 17 8 22 21 100 35\nSample Output 1\nno\nno\nyes\nyes\nyes\nyes\nno\nno\n', 'https://i.imgur.com/qkXunGP.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0030'),
(31, 'Merge_Sort', 'Sample Input 1\n10\n8 5 9 2 6 3 7 1 10 4\nSample Output 1\n1 2 3 4 5 6 7 8 9 10\n34\n', 'https://i.imgur.com/W90mvrI.jpg', 'https://i.imgur.com/DJKdyTF.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0031'),
(32, 'Koch_Curve', 'Sample Input 1\n1\nSample Output 1\n0.00000000 0.00000000\n33.33333333 0.00000000\n50.00000000 28.86751346\n66.66666667 0.00000000\n100.00000000 0.00000000\nSample Input 2\n2\nSample Output 2\n0.00000000 0.00000000\n11.11111111 0.00000000\n16.66666667 9.62250449\n22.22222222 0.00000000\n33.33333333 0.00000000\n38.88888889 9.62250449\n33.33333333 19.24500897\n44.44444444 19.24500897\n50.00000000 28.86751346\n55.55555556 19.24500897\n66.66666667 19.24500897\n61.11111111 9.62250449\n66.66666667 0.00000000\n77.77777778 0.00000000\n83.33333333 9.62250449\n88.88888889 0.00000000\n100.00000000 0.00000000\n', 'https://i.imgur.com/IRTzbpb.jpg', 'https://i.imgur.com/WTCYeFM.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0032'),
(33, 'The_Number_of_Inversions', '', 'https://i.imgur.com/GvbvLm9.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0033'),
(34, 'Counting_Sort', 'Sample Input 1\n7\n2 5 1 3 2 3 0\nSample Output 1\n0 1 2 2 3 3 5', 'https://i.imgur.com/HoOl3gN.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0034'),
(35, 'Partition', '', 'https://i.imgur.com/d3abM8h.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0035'),
(36, 'Quick_Sort', 'Sample Input 1\n6\nD 3\nH 2\nD 1\nS 3\nD 2\nC 1\nSample Output 1\nNot stable\nD 1\nC 1\nD 2\nH 2\nD 3\nS 3\nSample Input 2\n2\nS 1\nH 1\nSample Output 2\nStable\nS 1\nH 1', 'https://i.imgur.com/yCrNwik.jpg', 'https://i.imgur.com/a8bs08C.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0036'),
(37, 'Minimum_Cost_Sort', 'Sample Input 1\n5\n1 5 3 4 2\nSample Output 1\n7\n\nSample Input 2\n4\n4 3 2 1\nSample Output 2\n10', 'https://i.imgur.com/y8tN2qA.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0037'),
(38, 'Rooted_Trees', 'Sample Input 1\n13\n0 3 1 4 10\n1 2 2 3\n2 0\n3 0\n4 3 5 6 7\n5 0\n6 0\n7 2 8 9\n8 0\n9 0\n10 2 11 12\n11 0\n12 0\nSample Output 1\nnode 0: parent = -1, depth = 0, root, [1, 4, 10]\nnode 1: parent = 0, depth = 1, internal node, [2, 3]\nnode 2: parent = 1, depth = 2, leaf, []\nnode 3: parent = 1, depth = 2, leaf, []\nnode 4: parent = 0, depth = 1, internal node, [5, 6, 7]\nnode 5: parent = 4, depth = 2, leaf, []\nnode 6: parent = 4, depth = 2, leaf, []\nnode 7: parent = 4, depth = 2, internal node, [8, 9]\nnode 8: parent = 7, depth = 3, leaf, []\nnode 9: parent = 7, depth = 3, leaf, []\nnode 10: parent = 0, depth = 1, internal node, [11, 12]\nnode 11: parent = 10, depth = 2, leaf, []\nnode 12: parent = 10, depth = 2, leaf, []\nSample Input 2\n4\n1 3 3 2 0\n0 0\n3 0\n2 0\nSample Output 2\nnode 0: parent = 1, depth = 1, leaf, []\nnode 1: parent = -1, depth = 0, root, [3, 2, 0]\nnode 2: parent = 1, depth = 1, leaf, []\nnode 3: parent = 1, depth = 1, leaf, []\nNote\nYou can use a left-child, right-sibling representation to implement a tree which has the following data:\nthe parent of u\nthe leftmost child of u\nthe immediate right sibling of u\n', 'https://i.imgur.com/yIi5L8P.jpg', 'https://i.imgur.com/SkLtX5x.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0038'),
(39, 'Binary_Tree', 'Sample Input 1\n9\n0 1 4\n1 2 3\n2 -1 -1\n3 -1 -1\n4 5 8\n5 6 7\n6 -1 -1\n7 -1 -1\n8 -1 -1\nSample Output 1\nnode 0: parent = -1, sibling = -1, degree = 2, depth = 0, height = 3, root\nnode 1: parent = 0, sibling = 4, degree = 2, depth = 1, height = 1, internal node\nnode 2: parent = 1, sibling = 3, degree = 0, depth = 2, height = 0, leaf\nnode 3: parent = 1, sibling = 2, degree = 0, depth = 2, height = 0, leaf\nnode 4: parent = 0, sibling = 1, degree = 2, depth = 1, height = 2, internal node\nnode 5: parent = 4, sibling = 8, degree = 2, depth = 2, height = 1, internal node\nnode 6: parent = 5, sibling = 7, degree = 0, depth = 3, height = 0, leaf\nnode 7: parent = 5, sibling = 6, degree = 0, depth = 3, height = 0, leaf\nnode 8: parent = 4, sibling = 5, degree = 0, depth = 2, height = 0, leaf\n\n', 'https://i.imgur.com/YMggHAP.jpg', 'https://i.imgur.com/Yqc9Efi.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0039'),
(40, 'Tree_Walk', 'Sample Input 1\n9\n0 1 4\n1 2 3\n2 -1 -1\n3 -1 -1\n4 5 8\n5 6 7\n6 -1 -1\n7 -1 -1\n8 -1 -1\nSample Output 1\nPreorder\n 0 1 2 3 4 5 6 7 8\nInorder\n 2 1 3 0 6 5 7 4 8\nPostorder\n 2 3 1 6 7 5 8 4 0\n\n', 'https://i.imgur.com/9ava2kR.jpg', 'https://i.imgur.com/jxWmusr.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0040'),
(41, 'Reconstruction_of_a_Tree', '', 'https://i.imgur.com/za6esW2.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0041'),
(42, 'Binary_Search_Tree_I', 'Sample Input 1\n8\ninsert 30\ninsert 88\ninsert 12\ninsert 1\ninsert 20\ninsert 17\ninsert 25\nprint\nSample Output 1\n 1 12 17 20 25 30 88\n 30 12 1 20 17 25 88\n', 'https://i.imgur.com/8ldfVX7.jpg', 'https://i.imgur.com/G7TFl5c.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0042'),
(43, 'Binary_Search_Tree_II', 'Sample Input 1\n10\ninsert 30\ninsert 88\ninsert 12\ninsert 1\ninsert 20\nfind 12\ninsert 17\ninsert 25\nfind 16\nprint\nSample Output 1\nyes\nno\n 1 12 17 20 25 30 88\n 30 12 1 20 17 25 88\n', 'https://i.imgur.com/Kr7e6Dt.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0043'),
(44, 'Binary_Search_Tree_III', 'Sample Input 1\n18\ninsert 8\ninsert 2\ninsert 3\ninsert 7\ninsert 22\ninsert 1\nfind 1\nfind 2\nfind 3\nfind 4\nfind 5\nfind 6\nfind 7\nfind 8\nprint\ndelete 3\ndelete 7\nprint\nSample Output 1\nyes\nyes\nyes\nno\nno\nno\nyes\nyes\n 1 2 3 7 8 22\n 8 2 1 3 7 22\n 1 2 8 22\n 8 2 1 22\n', 'https://i.imgur.com/ttem4cH.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0044'),
(46, 'Complete_Binary_Tree', 'Sample Input 1\n5\n7 8 1 2 3\nSample Output 1\nnode 1: key = 7, left key = 8, right key = 1, \nnode 2: key = 8, parent key = 7, left key = 2, right key = 3, \nnode 3: key = 1, parent key = 7, \nnode 4: key = 2, parent key = 8, \nnode 5: key = 3, parent key = 8, \n\n', 'https://i.imgur.com/ffOyn5l.jpg', 'https://i.imgur.com/OE9p68z.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0046'),
(47, 'Maximum_Heap', 'Sample Input 1\n10\n4 1 3 2 16 9 10 14 8 7\nSample Output 1\n 16 14 10 8 7 9 3 2 4 1\n\n', 'https://i.imgur.com/PUmpD6A.jpg', 'https://i.imgur.com/qmR8Dcx.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0047'),
(48, 'Priority_Queue', 'Sample Input 1\ninsert 8\ninsert 2\nextract\ninsert 10\nextract\ninsert 11\nextract\nextract\nend\nSample Output 1\n8\n10\n11\n2', 'https://i.imgur.com/20s3mIF.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0048'),
(49, 'Heap_Sort', 'Sample Input and Output\nSample Input 1\n8\n1 2 3 5 9 12 15 23\nSample Output 1\n23 9 15 2 5 3 12 1', 'https://i.imgur.com/2wpoENe.jpg', 'https://i.imgur.com/IFLXOAT.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0049'),
(50, 'Projection', 'Sample Input 1\n0 0 2 0\n3\n-1 1\n0 1\n1 1\nSample Output 1\n-1.0000000000 0.0000000000\n0.0000000000 0.0000000000\n1.0000000000 0.0000000000\n\nSample Input 2\n0 0 3 4\n1\n2 5\nSample Output 2\n3.1200000000 4.1600000000', 'https://i.imgur.com/87lWgfT.jpg', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'a0050');

-- --------------------------------------------------------

--
-- 資料表結構 `question_bank2`
--

CREATE TABLE `question_bank2` (
  `num` int NOT NULL,
  `question_name` text NOT NULL,
  `question_description` text NOT NULL,
  `teacher` text NOT NULL,
  `public_or_not` tinyint(1) DEFAULT '1',
  `image1` text NOT NULL,
  `image2` text NOT NULL,
  `input1` text NOT NULL,
  `input2` text NOT NULL,
  `input3` text NOT NULL,
  `input4` text NOT NULL,
  `input5` text NOT NULL,
  `input6` text NOT NULL,
  `input7` text NOT NULL,
  `input8` text NOT NULL,
  `input9` text NOT NULL,
  `input10` text NOT NULL,
  `output1` text NOT NULL,
  `output2` text NOT NULL,
  `output3` text NOT NULL,
  `output4` text NOT NULL,
  `output5` text NOT NULL,
  `output6` text NOT NULL,
  `output7` text NOT NULL,
  `output8` text NOT NULL,
  `output9` text NOT NULL,
  `output10` text NOT NULL,
  `input_or_not` tinyint NOT NULL,
  `id` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- 傾印資料表的資料 `question_bank2`
--

INSERT INTO `question_bank2` (`num`, `question_name`, `question_description`, `teacher`, `public_or_not`, `image1`, `image2`, `input1`, `input2`, `input3`, `input4`, `input5`, `input6`, `input7`, `input8`, `input9`, `input10`, `output1`, `output2`, `output3`, `output4`, `output5`, `output6`, `output7`, `output8`, `output9`, `output10`, `input_or_not`, `id`) VALUES
(1, 'The 3n + 1 problem', '對任2個整數i，j我們想要知道介於i，j（包含i，j）之間的數所產生的數列中最大的 cycle length 是多少。', 'Kevin', 1, '', '', '2\n0.1667 0.2424\n0.1515 0.2121 0.2273 ', '135\n0.0065 0.0058 0.0054 0.0012 0.0012 0.0046 0.0015 0.0046 0.0004 0.0035 0.0073 0.0061 0.0038 0.0065 0.0015 0.0027 0.0073 0.0008 0.0008 0.0023 0.0058 0.0035 0.0035 0.0058 0.0008 0.0035 0.0061 0.0042 0.0058 0.0035 0.0019 0.0065 0.0058 0.0042 0.0012 0.0012 0.0031 0.0031 0.0031 0.0023 0.0027 0.0012 0.0042 0.0012 0.0035 0.0023 0.0042 0.0031 0.0023 0.0069 0.0015 0.0054 0.0008 0.0012 0.0019 0.0038 0.0058 0.0065 0.0065 0.0035 0.0038 0.0038 0.0008 0.0035 0.0035 0.0012 0.0061 0.0035 0.0069 0.0061 0.0012 0.0031 0.0031 0.0065 0.0058 0.0046 0.0046 0.0065 0.0019 0.0069 0.0004 0.0038 0.0012 0.0015 0.0054 0.0038 0.0058 0.0004 0.0069 0.0054 0.0019 0.0004 0.0008 0.0054 0.0046 0.0061 0.005 0.0023 0.0038 0.0023 0.0069 0.0069 0.0031 0.0073 0.0015 0.0058 0.0046 0.0008 0.0069 0.0015 0.0069 0.0038 0.0038 0.0015 0.0069 0.005 0.0012 0.0031 0.0042 0.005 0.0046 0.0065 0.0015 0.0073 0.0042 0.0023 0.005 0.0012 0.005 0.0065 0.0027 0.0027 0.0065 0.0035 0.0073\n0.0069 0.0054 0.0008 0.0069 0.0073 0.0004 0.0065 0.005 0.0073 0.0038 0.0008 0.0038 0.0012 0.0046 0.0069 0.0023 0.0004 0.0004 0.0031 0.005 0.0012 0.0027 0.0004 0.0023 0.0012 0.0042 0.0061 0.0058 0.0069 0.0027 0.0061 0.0054 0.0035 0.0027 0.0054 0.0058 0.0046 0.0031 0.0046 0.0046 0.0027 0.0012 0.0004 0.0035 0.0023 0.0012 0.0046 0.0015 0.0054 0.0035 0.0023 0.0012 0.0038 0.0073 0.0073 0.0042 0.0065 0.0058 0.0058 0.0065 0.0015 0.0065 0.0031 0.0038 0.0031 0.0065 0.005 0.0073 0.0004 0.0035 0.0008 0.0046 0.005 0.0058 0.0038 0.0046 0.0004 0.0019 0.0012 0.0073 0.0004 0.0042 0.0031 0.0035 0.0008 0.0054 0.0035 0.0031 0.0038 0.005 0.0027 0.0019 0.0035 0.0019 0.0031 0.0054 0.0038 0.0008 0.0058 0.0023 0.0012 0.0065 0.0035 0.0008 0.0038 0.0069 0.0027 0.0031 0.0023 0.0008 0.0019 0.0038 0.0038 0.0038 0.0073 0.0046 0.0061 0.0023 0.0031 0.0023 0.005 0.0008 0.0015 0.0008 0.0019 0.0004 0.0004 0.0027 0.005 0.0065 0.0012 0.0004 0.0019 0.0023 0.0012 0.0031 ', '22\n0.0283 0.0189 0.0283 0.0142 0.0377 0.033 0.0283 0.0189 0.0118 0.0165 0.033 0.0259 0.0118 0.0142 0.0259 0.0024 0.0425 0.0212 0.0047 0.0283 0.0071 0.0024\n0.0047 0.0024 0.0307 0.0425 0.0283 0.0401 0.0118 0.0165 0.0354 0.0165 0.0448 0.0165 0.0236 0.0377 0.0189 0.0212 0.0094 0.0425 0.0259 0.0189 0.0283 0.0071 0.0212 ', '31\n0.0105 0.0179 0.0015 0.0164 0.0149 0.0075 0.0254 0.0075 0.0284 0.009 0.0284 0.0224 0.0045 0.0164 0.0179 0.009 0.0284 0.0269 0.0149 0.012 0.0254 0.0179 0.003 0.009 0.0179 0.0015 0.0135 0.0194 0.0284 0.0149 0.0075\n0.0164 0.006 0.012 0.0239 0.009 0.0149 0.0164 0.003 0.0179 0.0164 0.0284 0.0284 0.0164 0.0149 0.012 0.009 0.0269 0.0254 0.0045 0.0194 0.0239 0.0149 0.012 0.0135 0.0179 0.0179 0.0105 0.0284 0.0194 0.0164 0.006 0.0194 ', '71\n0.0047 0.0088 0.0115 0.0108 0.0014 0.0081 0.0075 0.0061 0.0095 0.0047 0.0088 0.0115 0.002 0.0095 0.0129 0.0047 0.0041 0.0047 0.0061 0.0034 0.0061 0.0054 0.0122 0.0081 0.0027 0.0061 0.0115 0.0047 0.0115 0.0027 0.0095 0.0027 0.0014 0.0068 0.0129 0.0081 0.0047 0.0122 0.0108 0.0108 0.0007 0.0034 0.0129 0.0034 0.0054 0.0061 0.0068 0.0047 0.0007 0.0088 0.002 0.0014 0.0047 0.0129 0.0027 0.0054 0.0007 0.0081 0.0007 0.0061 0.0108 0.0129 0.0027 0.0081 0.0129 0.0095 0.002 0.0075 0.0122 0.0115 0.0075\n0.0088 0.0095 0.0102 0.0115 0.0102 0.0068 0.0095 0.0095 0.0007 0.0047 0.0041 0.0061 0.0068 0.0129 0.0068 0.0041 0.0129 0.0115 0.0075 0.0054 0.0122 0.0129 0.0068 0.002 0.0047 0.0129 0.0068 0.0007 0.0061 0.0122 0.0068 0.0081 0.0102 0.0081 0.0027 0.0081 0.0041 0.0068 0.0041 0.0068 0.0108 0.0122 0.0027 0.0047 0.0054 0.0034 0.0102 0.0047 0.0088 0.0054 0.0027 0.0034 0.0088 0.0054 0.0034 0.0075 0.0108 0.0007 0.0007 0.0108 0.0027 0.0068 0.002 0.0034 0.0081 0.0088 0.0129 0.0088 0.0095 0.0102 0.0129 0.0014 ', '36\n0.0167 0.0042 0.0237 0.0056 0.0098 0.007 0.0098 0.0251 0.0098 0.0084 0.0181 0.0153 0.0112 0.0181 0.0209 0.0153 0.0098 0.0014 0.0098 0.0126 0.007 0.0126 0.0181 0.0251 0.0126 0.0251 0.0056 0.0056 0.0126 0.0112 0.0265 0.0223 0.0014 0.007 0.0112 0.0028\n0.0028 0.0167 0.0251 0.0181 0.0181 0.0042 0.0223 0.0251 0.0139 0.0167 0.0167 0.0084 0.0126 0.0153 0.0126 0.0251 0.0112 0.0042 0.0126 0.0042 0.0126 0.0237 0.0014 0.0209 0.0209 0.0237 0.0237 0.0126 0.0139 0.0056 0.0153 0.0167 0.0112 0.0014 0.007 0.0265 0.0181 ', '60\n0.0116 0.0031 0.0047 0.0093 0.0093 0.0085 0.014 0.0132 0.0008 0.0132 0.0093 0.0147 0.0023 0.0109 0.0116 0.0147 0.0062 0.0101 0.0101 0.0101 0.0101 0.0008 0.0101 0.0124 0.0023 0.0132 0.0109 0.0062 0.014 0.0054 0.014 0.007 0.0116 0.0101 0.0093 0.0016 0.007 0.0101 0.0147 0.0016 0.0085 0.0047 0.0023 0.0016 0.0124 0.0116 0.014 0.0109 0.0031 0.0039 0.007 0.0078 0.0054 0.0147 0.0085 0.0078 0.007 0.0054 0.014 0.0124\n0.0101 0.0132 0.0132 0.007 0.0078 0.0101 0.0039 0.0031 0.0116 0.007 0.014 0.0016 0.007 0.0116 0.0109 0.0031 0.0147 0.0124 0.0016 0.0116 0.0116 0.0054 0.0016 0.0039 0.0054 0.0062 0.0023 0.0101 0.0039 0.0039 0.0109 0.0147 0.0101 0.0093 0.0023 0.0109 0.0008 0.0147 0.0132 0.0116 0.0078 0.0054 0.0023 0.0078 0.0023 0.0078 0.0093 0.0023 0.0031 0.0078 0.0132 0.0062 0.0031 0.0085 0.014 0.0039 0.0039 0.0147 0.007 0.0093 0.0093 ', '15\n0.0483 0.0103 0.0655 0.0379 0.0483 0.0276 0.0103 0.0414 0.0655 0.0069 0.0621 0.0414 0.0621 0.0034 0.0103\n0.0069 0.0276 0.0172 0.0276 0.0448 0.0207 0.0207 0.0207 0.0069 0.0448 0.0517 0.0621 0.0414 0.0379 0.0069 0.0207 ', '23\n0.0359 0.0219 0.006 0.0259 0.0299 0.0279 0.0259 0.006 0.0199 0.0219 0.0359 0.0339 0.0239 0.008 0.004 0.0299 0.0378 0.0199 0.0239 0.008 0.0378 0.0378 0.008\n0.004 0.012 0.0179 0.012 0.0259 0.0319 0.0359 0.0259 0.0339 0.01 0.01 0.006 0.0199 0.0378 0.002 0.0339 0.0319 0.0219 0.006 0.0159 0.0139 0.0179 0.0279 0.0159 ', '144\n0.0043 0.005 0.0043 0.005 0.0004 0.0046 0.0007 0.0032 0.0025 0.0032 0.0057 0.0043 0.0064 0.0039 0.0018 0.0068 0.0046 0.0043 0.005 0.0053 0.0057 0.0032 0.0032 0.0043 0.005 0.0032 0.0007 0.0025 0.0018 0.0007 0.0057 0.0064 0.0014 0.0043 0.0014 0.0057 0.0043 0.0032 0.0046 0.0014 0.0007 0.0043 0.0061 0.0039 0.0046 0.005 0.0064 0.0029 0.0025 0.0029 0.0043 0.0018 0.0007 0.0064 0.0021 0.0029 0.0021 0.0068 0.0011 0.0029 0.0032 0.0018 0.0011 0.0032 0.0014 0.0061 0.0018 0.0025 0.0014 0.0007 0.0029 0.0021 0.0039 0.0046 0.0064 0.0036 0.0036 0.0021 0.0014 0.0021 0.0064 0.0032 0.0021 0.0018 0.0068 0.0036 0.0032 0.0043 0.0007 0.0032 0.0032 0.0053 0.0029 0.0032 0.0039 0.0064 0.0011 0.0032 0.0004 0.0007 0.0032 0.0039 0.0021 0.0018 0.0064 0.0046 0.0046 0.0046 0.0061 0.0053 0.0039 0.0064 0.005 0.0004 0.0043 0.0029 0.0011 0.0029 0.0014 0.0057 0.0036 0.0032 0.0061 0.0039 0.0029 0.0014 0.005 0.0036 0.0032 0.0061 0.0046 0.0057 0.0032 0.0039 0.0029 0.0007 0.0068 0.0014 0.0021 0.0064 0.0025 0.0029 0.0064 0.0007\n0.0021 0.0014 0.0053 0.0011 0.0004 0.0046 0.0064 0.0032 0.0004 0.0021 0.0007 0.0036 0.0007 0.0068 0.005 0.0032 0.0004 0.0061 0.0053 0.0025 0.0036 0.0046 0.0068 0.0061 0.0036 0.0018 0.0057 0.0057 0.005 0.005 0.0064 0.0014 0.0004 0.0025 0.0064 0.0061 0.0004 0.0014 0.0004 0.0011 0.0057 0.0018 0.0018 0.0068 0.0046 0.0021 0.0018 0.0032 0.0068 0.0039 0.0043 0.0039 0.0011 0.0021 0.0046 0.0061 0.0011 0.0004 0.0025 0.0011 0.0004 0.0068 0.0036 0.0029 0.0046 0.0007 0.0032 0.0036 0.0018 0.0032 0.0046 0.0068 0.0007 0.0068 0.0018 0.0014 0.0029 0.005 0.0039 0.0061 0.0029 0.0068 0.0057 0.0064 0.0018 0.0061 0.0014 0.0021 0.0039 0.0039 0.0011 0.0014 0.0036 0.0046 0.0036 0.0021 0.0043 0.005 0.0046 0.0064 0.0043 0.0029 0.0043 0.0029 0.0014 0.0011 0.0061 0.0057 0.0014 0.0004 0.0032 0.0068 0.0004 0.0064 0.0021 0.005 0.0011 0.0007 0.0029 0.0061 0.0036 0.0036 0.0018 0.0043 0.0032 0.0046 0.0057 0.0007 0.0014 0.0039 0.0014 0.0007 0.0004 0.0014 0.0011 0.005 0.0068 0.0068 0.0021 0.0064 0.0018 0.0053 0.0029 0.0007 0.0029 ', '2.1212000000', '6.8966000000', '4.5315000000', '4.9743000000', '6.0532000000', '5.2060000000', '5.7910000000', '3.8718000000', '4.5155000000', '7.0118000000', 10, 'b0001'),
(2, 'Mutant Flatworld Expolrers', '給你一塊矩形土地的長寬，再依序給定每個機器人的初始位置狀況及一連串的指令集，你必須用你的程式求出每個機器人最後的位置狀況。\n\n一個機器人的位置狀況包括了其坐標（ x 坐標， y 坐標），和它面向的方向（用 N , S , E , W 來分別代表北、南、東、西）。至於一個機器人所收到的指令集，是一個由字母 \' L \' ， \' R \' ， 和 \' F \' 所構成的字串，其分別代表：\n\n左轉（Left）：機器人在原地往左轉 90 度。\n右轉（Right）: 機器人在原地往右轉 90 度。\n前進（Forward）: 機器人往其面向的方向向前走一格，且不改變其面向之方向。\n從坐標 (x,y) 走至 (x,y 1) 的這個方向我們定義為北方。\n\n因為此矩形土地是有邊界的，所以一旦一個機器人走出邊界掉落下去，就相當於永遠消失了。不過這個掉下去的機器人會留下「標記 ( scent ) 」，提醒以後的機器人，避免他們從同一個地方掉下去。掉下去的機器人會把標記，留在他掉落之前所在的最後一個坐標點。所以對於以後的機器人，當他正位在有標記的地方時，這個機器人就會忽略會讓他掉下去的指令。', 'ROOT', 1, '', '', '20 20\n5 11 E\nFFFRFLFFFLFFRFRRFLR', '20 20\n15 7 S\nRRLRRLLLLLLLLLLFRRRFFFRRLRL', '20 20\n4 17 N\nLFRRLRRLLFLRRFFRFRLL', '20 20\n18 7 W\nLFLRRRRRFFLLRFFFR', '20 20\n7 3 W\nLLFRFFRRRLRFLFRFRRL', '20 20\n9 7 E\nFLLRFRFFRRLLLLRRLLLFRFRRRRFLLLLRFLFFFRF', '20 20\n0 20 N\nLFFFLFFLRLLFRRFRRLRFLLF', '20 20\n1 4 W\nRRFRLFLFLR', '20 20\n5 4 S\nLRFLFRFFFL', '20 20\n16 7 S\nLFFRFFRLRFFRFL', '11 12 W', '14 4 W', '5 17 E', '20 4 E LOST', '10 2 S', '7 9 N', '0 20 W LOST', '3 5 N', '6 0 E', '16 6 W', 10, 'b0002'),
(3, 'Projection', 'Sample Input 1\n0 0 2 0\n3\n-1 1\n0 1\n1 1\nSample Output 1\n-1.0000000000 0.0000000000\n0.0000000000 0.0000000000\n1.0000000000 0.0000000000\n\nSample Input 2\n0 0 3 4\n1\n2 5\nSample Output 2\n3.1200000000 4.1600000000', 'ROOT', 0, '', 'null', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'b0003'),
(4, '123', '123', 'ROOT', 0, '', '', '123', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', '123', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 1, 'b0004'),
(5, '1231', '123', 'ROOT', 0, '', '', '123', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', '123', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 1, 'b0005'),
(6, '8_Puzzle', 'Sample Input\n1 3 0\n4 2 5\n7 8 6\nSample Output\n4', 'ROOT', 0, '', 'null', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'b0006'),
(7, 'Huffman_Coding', 'Sample Input 1\nabca\nSample Output 1\n6\nSample Input 2\naaabbcccdeeeffg\nSample Output 2\n41\nSample Input 3\nz\nSample Output 3\n1', 'ROOT', 0, 'https://i.imgur.com/FmRy9iY.jpg', 'null', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 10, 'b0007'),
(8, '1111', '111', 'ROOT', 0, '', '', '111', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', '1111', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 1, 'b0008'),
(9, 'Fibonacci_Number', 'Sample Input 1\n3\nSample Output 1\n3', 'ROOT', 0, '', 'null', '12', '33', '1', '16', '26', '11', '41', '43', '28', '12', '233', '5702887', '1', '1597', '196418', '144', '267914296', '701408733', '514229', '233', 10, 'b0009'),
(10, 'Fibonacci_Number2132145', 'Sample Input 1\n3\nSample Output 1\n3', 'ROOT', 0, '', 'null', '12', '33', '1', '16', '26', '11', '41', '43', '28', '12', '233', '5702887', '1', '1597', '196418', '144', '267914296', '701408733', '514229', '233', 10, 'b0010'),
(11, 'aa', 'aa', 'ROOT', 0, '', '', 'aa', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'aa', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 'null', 1, 'b0011');

-- --------------------------------------------------------

--
-- 資料表結構 `score_list`
--

CREATE TABLE `score_list` (
  `student_id` text NOT NULL,
  `project_name` text NOT NULL,
  `submit_times` int NOT NULL,
  `analysis_date` text NOT NULL,
  `unit_test_score` int NOT NULL,
  `code_quality` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- 傾印資料表的資料 `score_list`
--

INSERT INTO `score_list` (`student_id`, `project_name`, `submit_times`, `analysis_date`, `unit_test_score`, `code_quality`) VALUES
('acs109103', 'a0001_004_109-1_20221024_acs109103', 1, '2022/10/23 22:56:19', 0, 0),
('acs109103', 'a0001_004_109-1_20221024_acs109103', 2, '2022/10/23 22:58:01', 90, 80),
('acs109103', 'a0001_004_109-1_20221024_acs109103', 3, '2022/10/23 23:00:11', 100, 80),
('acs109103', 'a0001_004_109-1_20221024_acs109103', 4, '2022/10/23 23:02:40', 90, 100),
('acs109103', 'a0001_004_109-1_20221024_acs109103', 5, '2022/10/23 23:05:10', 100, 100),
('acs109103', 'a0001_004_109-1_20221024_acs109103', 6, '2022/10/24 01:07:46', 100, 100),
('acs109103', 'a0002_004_109-1_20221025_acs109103', 1, '2022/10/24 21:48:41', 0, 0),
('acs109103', 'a0002_004_109-1_20221025_acs109103', 2, '2022/10/24 22:01:35', 100, 80),
('acs109103', 'a0002_004_109-1_20221025_acs109103', 3, '2022/10/24 22:03:04', 100, 100),
('acs109103', 'a0003_004_109-1_20221026_acs109103', 1, '2022/10/24 23:03:34', 0, 100),
('acs109103', 'a0004_004_109-1_20221027_acs109103', 1, '2022/10/24 23:29:43', 0, 100),
('acs109103', 'a0004_004_109-1_20221027_acs109103', 2, '2022/10/24 23:32:56', 0, 0),
('acs109103', 'a0004_004_109-1_20221027_acs109103', 3, '2022/10/24 23:45:10', 0, 0);

-- --------------------------------------------------------

--
-- 資料表結構 `Sonarqube_reports`
--

CREATE TABLE `Sonarqube_reports` (
  `student_id` text NOT NULL,
  `project_name` text NOT NULL,
  `submit_times` text NOT NULL,
  `unit_test_result` text NOT NULL,
  `reliability_rating` text NOT NULL,
  `security_rating` text NOT NULL,
  `security_review_rating` text NOT NULL,
  `sqale_rating` text NOT NULL,
  `analysis_date` text NOT NULL,
  `source_code` text NOT NULL,
  `code_smells` text NOT NULL,
  `compile_result` text NOT NULL,
  `bugs` text NOT NULL,
  `vulnerabilities` text NOT NULL,
  `report_suggestion` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
  `suggestion_code` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- 傾印資料表的資料 `Sonarqube_reports`
--

INSERT INTO `Sonarqube_reports` (`student_id`, `project_name`, `submit_times`, `unit_test_result`, `reliability_rating`, `security_rating`, `security_review_rating`, `sqale_rating`, `analysis_date`, `source_code`, `code_smells`, `compile_result`, `bugs`, `vulnerabilities`, `report_suggestion`, `suggestion_code`) VALUES
('acs109103', 'a0001_004_109-1_20221024_acs109103', '1', 'Total:0,Failures:0,Passed:0', '1.0', '1.0', '1.0', '1.0', '2022/10/23 22:56:19', 'package edu.selab;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n\n	public static String main(String args) {\n		Scanner sc = new Scanner(args);\n\n		int N = sc.nextInt();\n\n		if(N <= 1){\n\n			System.out.println(1);\n			return \"-1\";\n\n		}\n\n		long table[] = new long[N 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= N; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n\n		return Long.toString(table[N]);\n	}\n\n\n\n}\n', '4', 'compile error', '0', '0', 'Rename this local variable to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.|Replace this use of System.out or System.err by a logger.|Move the array designators [] to the type.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0001_004_109-1_20221024_acs109103', '2', 'Total:10,Failures:1,Passed:9', '5.0', '1.0', '1.0', '1.0', '2022/10/23 22:58:01', 'package edu.selab;\nimport java.util.Scanner;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n\n	public static String main(String args) {\n		Scanner sc = new Scanner(args);\n\n		int N = sc.nextInt();\n\n		if(N <= 1){\n\n			System.out.println(1);\n			return \"-1\";\n\n		}\n\n		long table[] = new long[N 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= N; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n\n		return Long.toString(table[N]);\n	}\n\n\n\n}\n', '4', 'compile success', '1', '0', 'Rename this local variable to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.|Replace this use of System.out or System.err by a logger.|Move the array designators [] to the type.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0001_004_109-1_20221024_acs109103', '3', 'Total:10,Failures:0,Passed:10', '5.0', '1.0', '1.0', '1.0', '2022/10/23 23:00:11', 'package edu.selab;\nimport java.util.Scanner;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n\n	public static String main(String args) {\n		Scanner sc = new Scanner(args);\n\n		int N = sc.nextInt();\n\n		if(N <= 0){\n			return \"-1\";\n		}\n\n		long table[] = new long[N 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= N; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n\n		return Long.toString(table[N]);\n	}\n\n\n\n}\n', '3', 'compile success', '1', '0', 'Rename this local variable to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.|Move the array designators [] to the type.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0001_004_109-1_20221024_acs109103', '4', 'Total:10,Failures:1,Passed:9', '1.0', '1.0', '1.0', '1.0', '2022/10/23 23:02:40', 'package edu.selab;\nimport java.util.*;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n	private App(){\n		\n	}\n	public static String main(String args) {\n		int n;\n		Scanner sc = new Scanner(args);\n		try{\n			n = sc.nextInt();\n		}finally {       \n			sc.close();\n		}\n		if(n <= 1){\n			return \"-1\";\n		}\n\n		long[] table = new long[n 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= n; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n		return Long.toString(table[n]);		\n	}\n\n\n\n}\n', '1', 'compile success', '0', '0', 'Change this \"try\" to a try-with-resources.', ''),
('acs109103', 'a0001_004_109-1_20221024_acs109103', '5', 'Total:10,Failures:0,Passed:10', '1.0', '1.0', '1.0', '1.0', '2022/10/23 23:05:10', 'package edu.selab;\nimport java.util.*;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n	private App(){\n\n	}\n	public static String main(String args) {\n		int n;\n		Scanner sc = new Scanner(args);\n		try{\n			n = sc.nextInt();\n		}finally {       \n			sc.close();\n		}\n		if(n <= 0){\n			return \"-1\";\n		}\n\n		long[] table = new long[n 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= n; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n		return Long.toString(table[n]);		\n	}\n\n\n\n}\n', '1', 'compile success', '0', '0', 'Change this \"try\" to a try-with-resources.', ''),
('acs109103', 'a0001_004_109-1_20221024_acs109103', '6', 'Total:10,Failures:0,Passed:10', '1.0', '1.0', '1.0', '1.0', '2022/10/24 01:07:46', 'package edu.selab;\nimport java.util.*;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static final int BIG_NUM = 2000000000;\n	public static final int MOD = 1000000007;\n	private App(){\n\n	}\n	public static String main(String args) {\n		int n; \n		Scanner sc = new Scanner(args);\n		try{\n			n = sc.nextInt();\n		}finally {       \n			sc.close();\n		}\n		if(n <= 0){\n			return \"-1\";\n		}\n\n		long[] table = new long[n 1];\n\n		table[0] = 1;\n		table[1] = 1;\n\n		for(int i = 2; i <= n; i  ){\n			table[i] = table[i-1] table[i-2];\n		}\n		return Long.toString(table[n]);		\n	}\n\n\n\n}\n', '1', 'compile success', '0', '0', 'Change this \"try\" to a try-with-resources.', ''),
('acs109103', 'a0002_004_109-1_20221025_acs109103', '1', 'Total:0,Failures:0,Passed:0', '1.0', '1.0', '1.0', '1.0', '2022/10/24 21:48:41', 'package edu.selab;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static String  main( String args )\n    {\n        Scanner sc = new Scanner(args);\n        int n;\n        int[] dims ;\n        n = sc.nextInt();\n        dims = new int[n   1];\n        for (int i = 0; i < n; i  ) {\n            dims[i] = sc.nextInt();\n            if (i == n - 1) {\n                dims[i   1] = sc.nextInt();\n            } else {\n                sc.nextInt();\n            }\n\n        int[][] costs = new int[n][n];\n\n        for (int i = 0; i < n; i  ) {\n            costs[i][i] = 0;\n        }\n\n        for (int len = 2; len <= n; len  ) {\n            for (int i = 0; i <= n - len; i  ) {\n                int j = i   len - 1;\n                costs[i][j] = Integer.MAX_VALUE;\n                for (int k = i; k < j; k  ) {\n                    int cost = costs[i][k]   costs[k   1][j]   dims[i] * dims[k   1] * dims[j   1];\n\n                    if (cost < costs[i][j]) {\n                        costs[i][j] = cost;\n                    }\n                }\n            }\n        }\n\n       return Integer.toString(costs[0][n - 1]);\n    }\n}\n\n', '0', 'compile error', '0', '0', '', ''),
('acs109103', 'a0002_004_109-1_20221025_acs109103', '2', 'Total:10,Failures:0,Passed:10', '5.0', '1.0', '1.0', '1.0', '2022/10/24 22:01:35', 'package edu.selab;\nimport java.util.Scanner;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static String  main( String args )\n    {\n        Scanner sc = new Scanner(args);\n        int n;\n        int[] dims ;\n        n = sc.nextInt();\n        dims = new int[n   1];\n        for (int i = 0; i < n; i  ) {\n            dims[i] = sc.nextInt();\n            if (i == n - 1) {\n                dims[i   1] = sc.nextInt();\n            } else {\n                sc.nextInt();\n            }\n        }\n\n\n        int[][] costs = new int[n][n];\n\n        for (int i = 0; i < n; i  ) {\n            costs[i][i] = 0;\n        }\n\n        for (int len = 2; len <= n; len  ) {\n            for (int i = 0; i <= n - len; i  ) {\n                int j = i   len - 1;\n                costs[i][j] = Integer.MAX_VALUE;\n                for (int k = i; k < j; k  ) {\n                    int cost = costs[i][k]   costs[k   1][j]   dims[i] * dims[k   1] * dims[j   1];\n\n                    if (cost < costs[i][j]) {\n                        costs[i][j] = cost;\n                    }\n                }\n            }\n        }\n\n       return Integer.toString(costs[0][n - 1]);\n    }\n}\n\n', '1', 'compile success', '1', '0', 'Use try-with-resources or close this \"Scanner\" in a \"finally\" clause.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0002_004_109-1_20221025_acs109103', '3', 'Total:10,Failures:0,Passed:10', '1.0', '1.0', '1.0', '1.0', '2022/10/24 22:03:04', 'package edu.selab;\nimport java.util.Scanner;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    private App(){\n\n    }\n    public static String  main( String args )\n    {\n        Scanner sc = new Scanner(args);\n        int n;\n        int[] dims ;\n        try{\n            n = sc.nextInt();\n            dims = new int[n   1];\n            for (int i = 0; i < n; i  ) {\n                dims[i] = sc.nextInt();\n                if (i == n - 1) {\n                    dims[i   1] = sc.nextInt();\n                } else {\n                    sc.nextInt();\n                }\n            }\n        }finally{\n            sc.close();\n        }\n\n        int[][] costs = new int[n][n];\n\n        for (int i = 0; i < n; i  ) {\n            costs[i][i] = 0;\n        }\n\n        for (int len = 2; len <= n; len  ) {\n            for (int i = 0; i <= n - len; i  ) {\n                int j = i   len - 1;\n                costs[i][j] = Integer.MAX_VALUE;\n                for (int k = i; k < j; k  ) {\n                    int cost = costs[i][k]   costs[k   1][j]   dims[i] * dims[k   1] * dims[j   1];\n\n                    if (cost < costs[i][j]) {\n                        costs[i][j] = cost;\n                    }\n                }\n            }\n        }\n\n       return Integer.toString(costs[0][n - 1]);\n    }\n}\n\n', '1', 'compile success', '0', '0', 'Use try-with-resources or close this \"Scanner\" in a \"finally\" clause.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0003_004_109-1_20221026_acs109103', '1', 'Total:10,Failures:10,Passed:0', '1.0', '1.0', '1.0', '1.0', '2022/10/24 23:03:34', 'package edu.selab;\n\nimport java.util.Scanner;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static String  main( String args )\n    {\n        Scanner kevin = new Scanner(args);\n        int n = kevin.nextInt();\n        String str = \"\";\n        while(n>0){\n            String a = kevin.next();\n            String b = kevin.next();\n            // System.out.println(a.length());\n            // System.out.println(b);\n            int orgin_i=0,i=0,j=0,ans=0;\n            while(orgin_i<a.length()){\n                int mx=0;\n                while(i<a.length()', '12', 'compile success', '0', '0', 'Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.|This block of commented-out lines of code should be removed.|This block of commented-out lines of code should be removed.|This block of commented-out lines of code should be removed.|This block of commented-out lines of code should be removed.|Rename this local variable to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.|Declare \"i\" and all following declarations on a separate line.|This block of commented-out lines of code should be removed.|Replace this use of System.out or System.err by a logger.|Use a StringBuilder instead.|Use a StringBuilder instead.|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0004_004_109-1_20221027_acs109103', '1', 'Total:10,Failures:10,Passed:0', '1.0', '1.0', '1.0', '1.0', '2022/10/24 23:29:43', 'package edu.selab;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static String  main( String args )\n    {\n        System.out.println( \"Hello World!\" );\n        return \"Hello World!\";\n    }\n}\n\n', '3', 'compile success', '0', '0', 'Add a private constructor to hide the implicit public one.|Remove this unused method parameter \"args\".|Replace this use of System.out or System.err by a logger.', ''),
('acs109103', 'a0004_004_109-1_20221027_acs109103', '2', 'Total:0,Failures:0,Passed:0', '1.0', '1.0', '1.0', '1.0', '2022/10/24 23:32:56', 'package edu.selab;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static Integer n;\n    public static Double[] k, d;\n\n    public static Double dp(int dep, int l, int r){\n        if (l>r) return dep*d[l-1];\n        Double pb = 1e9;\n        for (int i=l;i<=r;i  ) pb = Math.min(pb, k[i]*dep   dp(dep 1, l, i-1)   dp(dep 1, i 1, r));\n        return pb;\n    }\n\n    public static String main(String args){\n        Scanner sc = new Scanner(args);\n        n = sc.nextInt();\n        k = new Double[n 1];\n        d = new Double[n 1];\n        k[0] = .0;\n        for (int i=1;i<=n;i  ) k[i] = sc.nextDouble();\n        for (int i=0;i<=n;i  ) d[i] = sc.nextDouble();\n        return String.format(\"%.10f\", dp(1, 1, n));\n    }\n}\n\n', '10', 'compile error', '0', '0', 'Make n a static final constant or non-public and provide accessors if needed.|Make this \"public static n\" field final|Make k a static final constant or non-public and provide accessors if needed.|Make d a static final constant or non-public and provide accessors if needed.|Make this \"public static k\" field final|Make this \"public static d\" field final|Declare \"d\" on a separate line.|Make member \"k\" \"protected\".|Make member \"d\" \"protected\".|Add a private constructor to hide the implicit public one.', ''),
('acs109103', 'a0004_004_109-1_20221027_acs109103', '3', 'Total:0,Failures:0,Passed:0', '5.0', '1.0', '1.0', '1.0', '2022/10/24 23:45:10', 'package edu.selab;\nimport java.util.Scanner;\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static Integer n;\n    public static Double[] k, d;\n\n    public static Double dp(int dep, int l, int r){\n        if (l>r) return dep*d[l-1];\n        Double pb = 1e9;\n        for (int i=l;i<=r;i  ) pb = Math.min(pb, k[i]*dep   dp(dep 1, l, i-1)   dp(dep 1, i 1, r));\n        return pb;\n    }\n\n    public static String main(String args){\n        Scanner sc = new Scanner(args);\n        n = sc.nextInt();\n        k = new Double[n 1];\n        d = new Double[n 1];\n        k[0] = .0;\n        for (int i=1;i<=n;i  ) k[i] = sc.nextDouble();\n        for (int i=0;i<=n;i  ) d[i] = sc.nextDouble();\n        return String.format(\"%.10f\", dp(1, 1, n));\n    }\n}\n\n', '10', 'compile success', '1', '0', 'Use try-with-resources or close this \"Scanner\" in a \"finally\" clause.|Make n a static final constant or non-public and provide accessors if needed.|Make this \"public static n\" field final|Make k a static final constant or non-public and provide accessors if needed.|Make d a static final constant or non-public and provide accessors if needed.|Make this \"public static k\" field final|Make this \"public static d\" field final|Declare \"d\" on a separate line.|Make member \"k\" \"protected\".|Make member \"d\" \"protected\".|Add a private constructor to hide the implicit public one.', '');

-- --------------------------------------------------------

--
-- 資料表結構 `sourcecode_list`
--

CREATE TABLE `sourcecode_list` (
  `question_name` text NOT NULL,
  `code` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- 傾印資料表的資料 `sourcecode_list`
--

INSERT INTO `sourcecode_list` (`question_name`, `code`) VALUES
('Matrix-chain_Multiplication', 'import java.io.IOException;\nimport java.util.Scanner;\nclass Main {\n    public static void main (String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] dims = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            dims[i] = sc.nextInt();\n            if (i == n - 1) {\n                dims[i + 1] = sc.nextInt();\n            } else {\n                sc.nextInt();\n            }\n        }\n        int[][] costs = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            costs[i][i] = 0;\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                costs[i][j] = Integer.MAX_VALUE;\n                for (int k = i; k < j; k++) {\n                    int cost = costs[i][k] + costs[k + 1][j] + dims[i] * dims[k + 1] * dims[j + 1];\n                    if (cost < costs[i][j]) {\n                        costs[i][j] = cost;\n                    }\n                }\n            }\n        }\n        System.out.println(costs[0][n - 1]);\n    }\n}'),
('Longest_Common_Subsequence', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n    static int lcs(String left,String right){\n        int left_len = left.length();\n        int right_len = right.length();\n        int dp[][] = new int[left_len+1][right_len+1];\n        for(int i = 0; i <= left_len; i++){\n            for(int k = 0; k <= right_len; k++){\n                dp[i][k] = 0;\n            }\n        }\n        for(int i = 0; i < left_len; i++){\n            for(int k = 0; k < right_len; k++){\n                if(left.charAt(i) == right.charAt(k)){\n                    dp[i+1][k+1] = dp[i][k]+1;\n                }else{\n                    dp[i+1][k+1] = Math.max(dp[i+1][k], dp[i][k+1]);\n                }\n            }\n        }\n        return dp[left_len][right_len];\n    }\n    public static void main(String args[]){\n         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n         try{\n            int N = Integer.parseInt(br.readLine());\n            String left,right;\n            for(int i = 0; i < N; i++){\n                left = br.readLine();\n                right = br.readLine();\n                System.out.printf(\"%d\\n\", lcs(left,right));\n            }\n         }catch(IOException ex){\n             ex.printStackTrace();\n         }\n    }\n}'),
('Optimal_Binary_Search_Tree', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n    /**\n     * @param args\n     * @throws IOException \n     * @throws NumberFormatException \n     */\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        // TODO Auto-generated method stub\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n                int n = Integer.parseInt(br.readLine());\n                double p[] = new double[n + 1];\n        double q[] = new double[n + 1];\n                String tmpArray[] = br.readLine().split(\" \");\n        for(int i = 0; i < n; i++){\n            p[i + 1] = Double.parseDouble(tmpArray[i]);\n        }\n                tmpArray = br.readLine().split(\" \");\n        for(int i = 0; i < n + 1; i++){\n            q[i] = Double.parseDouble(tmpArray[i]);\n        }\n                double e[][] = new double[n + 2][n + 1];\n        int root[][] =  new int[n + 1][n + 1];\n                optimalBST(p, q, e, root);\n                System.out.printf(\"%.5f\\n\",e[1][n]);\n    }\n        static void optimalBST(double p[], double q[], double e[][], int root[][]){\n        int n = p.length - 1;\n                double[][] w = new double[n + 2][n + 1];\n        for(int i = 1; i <= n + 1; i++){\n            e[i][i - 1] = q[i - 1];\n            w[i][i - 1] = q[i - 1];\n        }\n                for(int l = 1; l <= n; l++){\n            for(int i = 1; i <= n - l + 1; i++){\n                int j = i + l - 1;\n                e[i][j] = Double.MAX_VALUE;\n                                w[i][j] = w[i][j - 1] + p[j] + q[j];\n                                for(int r = i; r <= j; r++){\n                    double t = e[i][r - 1] + e[r + 1][j] + w[i][j];\n                                        if(t < e[i][j]){\n                        e[i][j] = t;\n                        root[i][j] = r;\n                    }\n                }\n            }\n        }\n    }\n}'),
('Graph', 'import java.util.Scanner;\npublic class Main {\n    public static void adjacencyList(int[][] graph, int n, Scanner sc) {\n        int u, k, v;\n        String[] input;\n        for (int i = 0; i < n; i++) {\n            input = sc.nextLine().split(\" \");\n            u = Integer.parseInt(input[0]);\n            k = Integer.parseInt(input[1]);\n            for (int j = 0; j < k; j++) {\n                v = Integer.parseInt(input[2+j]);\n                graph[u-1][v-1] = 1;\n            }\n        }\n    }\n    public static void print(int [][] graph, int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n-1; j++) {\n                sb.append(graph[i][j]).append(\" \");\n            }\n            sb.append(graph[i][n - 1]).append(\"\\n\");\n        }\n        System.out.print(sb);\n    }\n    public static void main(String[] args){\n        Scanner sc = new Scanner (System.in);\n        int n = Integer.parseInt(sc.nextLine());\n        int[][] graph = new int[n][n];\n        adjacencyList(graph, n, sc);\n        print(graph, n);\n    }\n}'),
('Depth_First_Search', 'import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final int MOD = 1000000007;\n    public static ADJ[] edge;\n    public static boolean visited[];\n    public static int go_time[];\n    public static int back_time[];\n    public static int current_time;\n    public static void main(String[] args) {\n        Scanner sc = new  Scanner(System.in);\n        int V = sc.nextInt();\n        edge = new ADJ[V];\n        for(int i = 0; i < V; i++){\n            edge[i] = new ADJ();\n        }\n        visited = new boolean[V];\n        for(int i = 0; i < V; i++){\n            visited[i] = false;\n        }\n        go_time = new int[V];\n        back_time = new int[V];\n        int node_id,num,tmp_to;\n        for(int loop = 0; loop < V; loop++){\n            node_id = sc.nextInt();\n            node_id--;\n            num = sc.nextInt();\n            for(int i = 0; i < num; i++){\n                tmp_to = sc.nextInt();\n                tmp_to--;\n                edge[node_id].to.add(tmp_to);\n            }\n        }\n        current_time = 1;\n        for(int i = 0; i < V; i++){\n            if(visited[i])continue;\n            visited[i] = true;\n            dfs(i);\n        }\n        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i < V; i++){\n            ans.append(Integer.toString(i+1)).append(\" \").append(Integer.toString(go_time[i])).\n                append(\" \").append(Integer.toString(back_time[i])).append(\"\\n\");\n        }\n        System.out.print(ans.toString());\n    }\n    public static void dfs(int node_id){\n        go_time[node_id] = current_time++;\n        int next_node;\n        for(int i = 0; i < edge[node_id].to.size(); i++){\n            next_node = edge[node_id].to.get(i);\n            if(visited[next_node])continue;\n            visited[next_node] = true;\n            dfs(next_node);\n        }\n        back_time[node_id] = current_time++;\n    }\n}\nclass ADJ{\n    ArrayList<Integer> to;\n    ADJ(){\n        to = new ArrayList<Integer>();\n    }\n}'),
('Breadth_First_Search', 'import java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final long HUGE_NUM = 4000000000000000000L;\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int min_dist[] = new int[N];\n        List<List<Edge>> G = new ArrayList<>();\n        for(int i = 0; i < N; i++) {\n            G.add(new ArrayList<Edge>());\n        }\n        for(int i = 0; i < N; i++) {\n            int ind = scanner.nextInt();\n            ind--;\n            int num_node = scanner.nextInt();\n            int to,cost;\n            for(int k = 0; k < num_node; k++) {\n                to = scanner.nextInt();\n                to--;\n                cost = 1;\n                G.get(ind).add(new Edge(to,cost));\n            }\n        }\n        for(int i = 0; i < N; i++) {\n            min_dist[i] = BIG_NUM;\n        }\n        min_dist[0] = 0;\n        ArrayDeque<State> Q = new ArrayDeque<State>();\n        Q.addLast(new State(0,0));\n        while(!Q.isEmpty()) {\n            State state = Q.pollFirst();\n            //System.out.printf(\"sum_dist:%d\\n\", state.sum_dist);\n            if(state.sum_dist > min_dist[state.node])continue;\n            for(int i = 0; i < G.get(state.node).size(); i++) {\n                int next_node = G.get(state.node).get(i).to;\n                int next_dist = state.sum_dist+G.get(state.node).get(i).cost;\n                if(min_dist[next_node] > next_dist) {\n                    min_dist[next_node] = next_dist;\n                    Q.addLast(new State(next_node,next_dist));\n                }\n            }\n        }\n        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i < N; i++) {\n            int tmp_dist = min_dist[i];\n            if(tmp_dist == BIG_NUM) {\n                tmp_dist = -1;\n            }\n            ans.append(Integer.toString(i+1)).append(\" \").append(Integer.toString(tmp_dist)).append(\"\\n\");\n        }\n        System.out.print(ans.toString());\n    }\n}\nclass Edge{\n    Edge(int arg_to,int arg_cost){\n        this.to = arg_to;\n        this.cost = arg_cost;\n    }\n    public int to;\n    public int cost;\n}\nclass State implements Comparable<State>{\n    State(int arg_node,int arg_sum_dist){\n        this.node = arg_node;\n        this.sum_dist = arg_sum_dist;\n    }\n    public int compareTo(State arg) {\n        //■距離の昇順(PQ)\n        if(this.sum_dist < arg.sum_dist) {\n            return -1;\n        }else if(this.sum_dist > arg.sum_dist) {\n            return 1;\n        }else {\n            return 0;\n        }\n    }\n    public int node;\n    public int sum_dist;\n}'),
('Connected_Components', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n    public static final int BIG_NUM  = 2000000000;\n    public static final int MOD  = 1000000007;\n    public static void main(String[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String inputed[] = new String[2];\n        try {\n            inputed = br.readLine().split(\"\\\\s+\");\n            int N = Integer.parseInt(inputed[0]);\n            int M = Integer.parseInt(inputed[1]);\n            UnionFind unionTree = new UnionFind(N);\n            unionTree.init();\n            for(int loop = 0; loop < M; loop++){\n                inputed = br.readLine().split(\"\\\\s+\");\n                unionTree.unite(Integer.parseInt(inputed[0]),Integer.parseInt(inputed[1]));\n            }\n            int Q = Integer.parseInt(br.readLine());\n            StringBuilder ans = new StringBuilder();\n            for(int loop = 0; loop < Q; loop++){\n                inputed = br.readLine().split(\"\\\\s+\");\n                if(unionTree.is_same(Integer.parseInt(inputed[0]),Integer.parseInt(inputed[1]))){\n                    ans.append(\"yes\\n\");\n                }else{\n                    ans.append(\"no\\n\");\n                }\n            }\n            System.out.print(ans.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\nclass UnionFind{\n    private int boss[];\n    private int height[];\n    private int size;\n    UnionFind(int size){\n        boss = new int[size];\n        height = new int[size];\n        this.size = size;\n    }\n    public void init(){\n        for(int i = 0; i < size; i++){\n            boss[i] = i;\n            height[i] = 0;\n        }\n    }\n    public int get_boss(int id){\n        if(boss[id] == id)return id;\n        else{\n            return boss[id] = get_boss(boss[id]);\n        }\n    }\n    public boolean is_same(int x,int y){\n        return get_boss(x) == get_boss(y);\n    }\n    void unite(int x,int y){\n        int boss_x = get_boss(x);\n        int boss_y = get_boss(y);\n        if(boss_x == boss_y)return;\n        if(height[x] > height[y]){\n            boss[boss_y] = boss_x;\n        }else if(height[x] < height[y]){\n            boss[boss_x] = boss_y;\n        }else{ //height[x] == height[y]\n            boss[boss_y] = boss_x;\n            height[x]++;\n        }\n    }\n}'),
('Minimum_Spanning_Tree', 'import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        M = new int[n][n];\n        d = new int[n];\n        p = new int[n];\n        color = new int[n];\n        for(int i = 0; i < n ; i ++){\n            p[i] = -1;\n            d[i] = INFTY;\n        }\n        for(int i = 0 ; i < n ; i ++){\n            for(int j = 0 ; j < n; j ++){\n                int e = sc.nextInt();\n                M[i][j] = e == -1 ? INFTY : e;\n            }\n        }\n        System.out.println(prime());\n    }\n    static int[][] M;\n    static int[] color;\n    static int[] d;\n    static int[] p;\n    static int n;\n    static final int INFTY = 1 << 21;\n    static final int WHITE = 0;\n    static final int GRAY = 1;\n    static final int BLACK = 2;\n   static int prime(){\n        d[0] = 0;\n        int minv,u;\n        while (true) {\n            minv = INFTY;\n            u = - 1;\n            for(int i = 0 ; i < n ; i ++){\n                if(color[i] != BLACK && minv > d[i]){\n                   minv = d[i];\n                   u = i;\n                }\n            }\n            if(u == -1) break;\n            color[u] = BLACK;\n            for(int v = 0 ; v < n ; v ++){\n                if(color[v] != BLACK && M[u][v] != INFTY){\n                    if(d[v] > M[u][v]){\n                        d[v] = M[u][v];\n                        p[v] = u;\n                        color[v] = GRAY;\n                    }\n                }\n            }\n        }\n        int sum = 0;\n        for(int i = 0 ; i < n ; i ++){\n            if(p[i] > -1){\n                sum += M[i][p[i]];\n            }\n        }\n        return sum;\n    }\n}'),
('Single_Source_Shortest_Path', 'import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        M = new int[n][n];\n        d = new int[n];\n        p = new int[n];\n        color = new int[n];\n        for(int i = 0 ; i < n ; i ++){\n            int u = sc.nextInt();\n            int k = sc.nextInt();\n            for(int m = 0; m < n ; m ++){\n                M[u][m] = INFTY;\n            }\n            for(int j = 0 ; j < k ; j ++){\n                int v = sc.nextInt();\n                int w = sc.nextInt();\n                M[u][v] = w;\n            }\n            d[i] = INFTY;\n            p[i] = -1;\n        }\n        dijkstra(0);\n        for(int i = 0 ; i < n ; i ++){\n            System.out.print(i + \" \" + d[i]);\n            System.out.println();\n        }\n    }\n    static int[][] M;\n    static int n;\n    static int[] d;\n    static int[] p;\n    static int[] color;\n    static final int INFTY = 1 << 21;\n    static final int WHITE = 0;\n    static final int GRAY = 1;\n    static final int BLACK = 2;\n    static void dijkstra(int s){\n        d[s] = 0;\n        color[s] = GRAY;\n        int minv,u;\n        while (true){\n            u = -1;\n            minv = INFTY;\n            for(int i = 0 ; i < n; i ++){\n                if(color[i] != BLACK && minv > d[i]){\n                    minv = d[i];\n                    u = i;\n                }\n            }\n            if(minv == INFTY){\n                break;\n            }\n            color[u] = BLACK;\n            for(int v = 0 ; v < n; v ++){\n                if(color[v] != BLACK && M[u][v] != INFTY){\n                    if(d[u] + M[u][v] < d[v]){\n                        d[v] = d[u] + M[u][v];\n                        color[v] = GRAY;\n                        p[v] = u;\n                    }\n                }\n            }\n        }\n    }\n}'),
('Single_Source_Shortest_Path_II', 'import java.util.ArrayList;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final long HUGE_NUM = 4000000000000000000L;\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int min_dist[] = new int[N];\n        List<List<Edge>> G = new ArrayList<>();\n        for(int i = 0; i < N; i++) {\n            G.add(new ArrayList<Edge>());\n        }\n        for(int i = 0; i < N; i++) {\n            int ind = scanner.nextInt();\n            int num_node = scanner.nextInt();\n            int to,cost;\n            for(int k = 0; k < num_node; k++) {\n                to = scanner.nextInt();\n                cost = scanner.nextInt();\n                G.get(ind).add(new Edge(to,cost));\n            }\n        }\n        for(int i = 0; i < N; i++) {\n            min_dist[i] = BIG_NUM;\n        }\n        min_dist[0] = 0;\n        PriorityQueue<State> Q = new PriorityQueue<State>();\n        Q.add(new State(0,0));\n        while(!Q.isEmpty()) {\n            State state = Q.poll();\n            //System.out.printf(\"sum_dist:%d\\n\", state.sum_dist);\n            if(state.sum_dist > min_dist[state.node])continue;\n            for(int i = 0; i < G.get(state.node).size(); i++) {\n                int next_node = G.get(state.node).get(i).to;\n                int next_dist = state.sum_dist+G.get(state.node).get(i).cost;\n                if(min_dist[next_node] > next_dist) {\n                    min_dist[next_node] = next_dist;\n                    Q.add(new State(next_node,next_dist));\n                }\n            }\n        }\n        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i < N; i++) {\n            ans.append(Integer.toString(i)).append(\" \").append(Integer.toString(min_dist[i])).append(\"\\n\");\n        }\n        System.out.print(ans.toString());\n    }\n}\nclass Edge{\n    Edge(int arg_to,int arg_cost){\n        this.to = arg_to;\n        this.cost = arg_cost;\n    }\n    public int to;\n    public int cost;\n}\nclass State implements Comparable<State>{\n    State(int arg_node,int arg_sum_dist){\n        this.node = arg_node;\n        this.sum_dist = arg_sum_dist;\n    }\n    public int compareTo(State arg) {\n        //■距離の昇順(PQ)\n        if(this.sum_dist < arg.sum_dist) {\n            return -1;\n        }else if(this.sum_dist > arg.sum_dist) {\n            return 1;\n        }else {\n            return 0;\n        }\n    }\n    public int node;\n    public int sum_dist;\n}'),
('8_Queens_Problem', 'import java.util.Scanner;\npublic class Main {\n    public enum Type{\n        Queen,\n        Not,\n        Undefined,\n    }\n    public static final int BIG_NUM = 2000000000;\n    public static final int MOD = 1000000007;\n    public static final int H = 8;\n    public static final int W = 8;\n    public static final int num_diff = 8;\n    public static final int diff_row[] = {-1,-1,-1,0,0,1,1,1};\n    public static final int diff_col[] = {-1,0,1,-1,1,-1,0,1};\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Type first[][] = new Type[8][8];\n        for(int row = 0; row < H; row++){\n            for(int col = 0; col < W; col++){\n                first[row][col] = Type.Undefined;\n            }\n        }\n        int N = scanner.nextInt();\n        int tmp_row,tmp_col;\n        for(int loop = 0; loop < N; loop++){\n            tmp_row = scanner.nextInt();\n            tmp_col = scanner.nextInt();\n            paint(first,tmp_row,tmp_col);\n        }\n        recursive(0,0,first,N);\n    }\n    //table[row][col]にあるQueenの経路を塗る\n    public static void paint(Type table[][],int row,int col){\n        table[row][col] = Type.Queen;\n        int tmp_row,tmp_col;\n        for(int i = 0; i < num_diff; i++){\n            tmp_row = row+diff_row[i];\n            tmp_col = col+diff_col[i];\n            while(rangeCheck(tmp_row,tmp_col)){\n                table[tmp_row][tmp_col] = Type.Not;\n                tmp_row += diff_row[i];\n                tmp_col += diff_col[i];\n            }\n        }\n    }\n    //table[row][col]にQueenを置けるか調べる\n    public static boolean is_ok(Type table[][],int row,int col){\n        //未定義マスでなければfalse\n        if(table[row][col] != Type.Undefined)return false;\n        int tmp_row,tmp_col;\n        //他のQueenと衝突するか調べる\n        for(int i = 0; i < num_diff; i++){\n            tmp_row = row+diff_row[i];\n            tmp_col = col+diff_col[i];\n            while(rangeCheck(tmp_row,tmp_col)){\n                if(table[tmp_row][tmp_col] == Type.Queen){\n                    return false;\n                }\n                tmp_row += diff_row[i];\n                tmp_col += diff_col[i];\n            }\n        }\n        return true;\n    }\n    public static void recursive(int base_row,int base_col,Type table[][],int put_num){\n        if(put_num == 8){\n            for(int row = 0; row < H; row++){\n                for(int col = 0; col < W; col++){\n                    if(table[row][col] == Type.Queen){\n                        System.out.print(\"Q\");\n                    }else{\n                        System.out.printf(\".\");\n                    }\n                }\n                System.out.print(\"\\n\");\n            }\n            return;\n        }\n        //置かないで次へ\n        if(base_col == 7){\n            if(base_row == 7)return;\n            recursive(base_row+1,0,table,put_num);\n        }else{\n            recursive(base_row,base_col+1,table,put_num);\n        }\n        //置けるなら置く\n        if(is_ok(table,base_row,base_col)){\n            Type next[][] = new Type[8][8];\n            for(int row = 0; row < H; row++){\n                for(int col = 0; col < W; col++){\n                    next[row][col] = table[row][col];\n                }\n            }\n            paint(next,base_row,base_col);\n            if(base_col == 7){\n                if(base_row == 7){\n                    return;\n                }else{\n                    recursive(base_row+1,0,next,put_num+1);\n                }\n            }else{\n                recursive(base_row,base_col+1,next,put_num+1);\n            }\n        }\n    }\n    public static boolean rangeCheck(int row,int col){\n        if(row >= 0 && row <= H-1 && col >= 0 && col <= W-1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}'),
('8_Puzzle', '// package track;\nimport java.util.*;\npublic class Main {\n    static final int[] dx = {0, -1, 0, 1};\n    public static boolean inside(int i,int j) {\n        return 0 <= i && 0 <= j && i < 3 && j < 3;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = 9;\n        String s = \"\";\n        for(int i = 0; i < 9; i++) {\n            s +=  (char)(\'0\' + sc.nextInt());\n        }\n        HashMap<String, Integer> mp = new HashMap<String, Integer>();\n        Queue<String> q = new ArrayDeque<String>();\n        q.add(s);\n        mp.put(s, 0);\n        String ans = \"123456780\";\n        while(!q.isEmpty()) {\n            String tmp = q.remove();\n            if(tmp.equals(ans)) {\n                break;\n            }\n            StringBuffer now = new StringBuffer(tmp);\n            int p = tmp.indexOf(\"0\");\n            int i = p / 3, j = p % 3;\n            for(int t = 0; t < 4; t++) {\n                int ni = i + dx[t], nj = j + dx[t ^ 1];\n                if(inside(ni, nj)) {\n                    int nxt = ni * 3 + nj;\n                    now.setCharAt(p, now.charAt(nxt));\n                    now.setCharAt(nxt, \'0\');\n                    if(!mp.containsKey(now.toString())) {\n                        q.add(now.toString());\n                        mp.put(now.toString(), mp.get(tmp) + 1);\n                    }\n                    now.setCharAt(nxt, now.charAt(p));\n                    now.setCharAt(p, \'0\');\n                }\n            }\n        }\n        System.out.println(mp.get(ans));\n    }\n}'),
('15_Puzzle', '// package track;\nimport java.util.*;\npublic class Main {\n    static final int[] dx = {0, -1, 0, 1};\n    public static boolean inside(int i,int j) {\n        return 0 <= i && 0 <= j && i < 4 && j < 4;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = 16;\n        String s = \"\";\n        int score = 0;\n        for(int i = 0; i < 4; i++) {\n            for(int j = 0; j < 4; j++) {\n                int x = sc.nextInt();\n                s +=  (char)(\'0\' + x);\n                x -= 1;\n                if(x != -1) score += Math.abs(x / 4 - i) + Math.abs(x % 4 - j);\n            }\n        }\n        HashSet<String> hs = new HashSet<String>();\n        Queue<Data> q = new PriorityQueue<Data>();\n                q.add(new Data(s, score, score, 0));\n        hs.add(s);\n        String ans = \"123456789:;<=>?0\";\n        while(!q.isEmpty()) {\n            Data tmp = q.remove();\n            if(tmp.dist == 0) {\n                System.out.println(tmp.num);\n                break;\n            }\n            StringBuffer now = new StringBuffer(tmp.s);\n            int p = tmp.s.indexOf(\"0\");\n            int i = p / 4, j = p % 4;\n            for(int t = 0; t < 4; t++) {\n                int ni = i + dx[t], nj = j + dx[t ^ 1];\n                if(inside(ni, nj)) {\n                    int nxt = ni * 4 + nj;\n                    int x = now.charAt(nxt) - \'0\' - 1;\n                    int nxtdist = tmp.dist;\n                    nxtdist -= Math.abs(ni - x / 4) + Math.abs(nj - x % 4);\n                    nxtdist += Math.abs(i - x / 4) + Math.abs(j - x % 4);\n                    if(nxtdist + tmp.num + 1 >= 46) continue;\n                    now.setCharAt(p, now.charAt(nxt));\n                    now.setCharAt(nxt, \'0\');\n                    if(!hs.contains(now.toString())) {\n                        q.add(new Data(now.toString(), nxtdist + tmp.num + 1, nxtdist, tmp.num + 1));\n                        hs.add(now.toString());\n                    }\n                    now.setCharAt(nxt, now.charAt(p));\n                    now.setCharAt(p, \'0\');\n                }\n            }\n        }\n    }\n}\nclass Data implements Comparable<Data> {\n    String s;\n    int score, dist, num;\n    Data(String s, int score, int dist, int num) {\n        this.s = s;\n        this.score = score;\n        this.dist = dist;\n        this.num = num;\n    }\n    public int compareTo(Data rhs) {\n        return Integer.compare(this.score, rhs.score);\n    }\n}'),
('Naive_String_Search', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport static java.lang.Integer.parseInt;\n/**\n * String Search - Naive String Search\n */\npublic class Main {\n    static final int B = 37;\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        char[] T, P;\n        T = br.readLine().toCharArray();\n        P = br.readLine().toCharArray();\n        if (T.length < P.length) return;\n        int t = 0, p = 0;\n        for (int i = 0; i < P.length; i++) {\n            t = t * B + T[i];\n            p = p * B + P[i];\n        }\n        //solve\n        if (t == p) System.out.println(0);\n        for (int i = 1; i < T.length - P.length + 1; i++) {\n            t = t * B + T[i + P.length - 1] - T[i - 1] * power(B, P.length);\n            if (t == p) System.out.println(i);\n        }\n    }\n    static int power(int x, int n) {\n        if (n == 0) return 1;\n        int ret = power(x * x, n / 2);\n        if ((n & 1) == 1) ret *= x;\n        return ret;\n    }\n}'),
('String_Search', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayDeque;\nimport java.util.Queue;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final int MOD = 1000000007;\n    public static void main(String[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            char T[] = br.readLine().toCharArray();\n            char P[] = br.readLine().toCharArray();\n            int index = 1;\n            Node[] nodes = new Node[10001];\n            for(int i = 0; i < 10001; i++){\n                nodes[i] = new Node();\n                nodes[i].init();\n            }\n            int root = 0;\n            //★ルートの情報を設定★\n            nodes[root].suffix_link = -1;\n            int tmp_ch,tmp_loc,parent_id,tmp_index;\n            //トライ木を構成する\n            tmp_index = 0;\n            tmp_ch = P[tmp_index];\n            tmp_loc = root;\n            tmp_index = 0;\n            while(true){\n                parent_id = tmp_loc;\n                nodes[tmp_loc].children[tmp_ch] = index++; //★新しいノードへ移動する場合★\n                //子ノードに移動\n                tmp_loc = nodes[tmp_loc].children[tmp_ch];\n                nodes[tmp_loc].parent_id = parent_id;\n                tmp_index++;\n                if(tmp_index == P.length){ //今回の数字が最後の文字だった場合\n                    nodes[tmp_loc].finish_FLG = true;\n                    break;\n                }\n                tmp_ch = P[tmp_index];\n            }\n            //Suffix_linkを構築する\n            int node_id;\n            Queue<Info> MAKE_SL = new ArrayDeque<Info>();\n            for(int i = 0; i < 128; i++){\n                if(nodes[root].children[i] != -1){\n                    node_id = nodes[root].children[i];\n                    nodes[node_id].suffix_link = root; //★root直下のsuffix_linkは必ずrootなので、queueには突っ込まない★\n                    for(int k = 0; k < 128; k++){\n                        if(nodes[node_id].children[k] != -1){\n                            MAKE_SL.add(new Info(nodes[node_id].children[k],k)); //ノードのidと、最後の経路をpushする\n                        }\n                    }\n                }\n            }\n            while(!MAKE_SL.isEmpty()){\n                node_id = MAKE_SL.peek().node_id; //★新たにsuffix_linkを張りたいノードのid★\n                tmp_ch = MAKE_SL.peek().ch;\n                MAKE_SL.poll();\n                for(int i = 0; i < 128; i++){\n                    if(nodes[node_id].children[i] != -1){\n                        MAKE_SL.add(new Info(nodes[node_id].children[i],i));\n                    }\n                }\n                //★親のsuffix_link先は、自分のsuffix_link先のpre_fixになっているので、親のsuffix_link情報を利用する★\n                //tmp_chへ下ることのできる、親からのsuffix_link先のノードを探す\n                for(tmp_loc = nodes[nodes[node_id].parent_id].suffix_link; tmp_loc != root; tmp_loc = nodes[tmp_loc].suffix_link){\n                    if(nodes[tmp_loc].children[tmp_ch] != -1){\n                        break;\n                    }\n                }\n                if(tmp_loc == root){\n                    if(nodes[root].children[tmp_ch] != -1){\n                        nodes[node_id].suffix_link = nodes[root].children[tmp_ch];\n                    }else{\n                        nodes[node_id].suffix_link = root;\n                    }\n                }else{\n                    nodes[node_id].suffix_link = nodes[tmp_loc].children[tmp_ch];\n                }\n            }\n            StringBuilder ans = new StringBuilder();\n            int ans_count = 0;\n            //T上の文字を走査する\n            tmp_loc = root;\n            for(int i = 0; i < T.length; i++){\n                tmp_ch = T[i];\n                if(nodes[tmp_loc].children[tmp_ch] != -1){ //次の文字が繋がる場合\n                    tmp_loc = nodes[tmp_loc].children[tmp_ch]; //次のノードに移動する\n                    if(nodes[tmp_loc].finish_FLG){\n                        ans.append(Integer.toString(i-P.length+1)).append(\"\\n\"); //左端の位置を出力\n                        ans_count++;\n                        tmp_loc = nodes[tmp_loc].suffix_link;\n                    }\n                }else{ //次の文字と一致しない場合→suffix_linkを辿る\n                    if(tmp_loc == root)continue;\n                    for(tmp_loc = nodes[tmp_loc].suffix_link; tmp_loc != root; tmp_loc = nodes[tmp_loc].suffix_link){\n                        if(nodes[tmp_loc].children[tmp_ch] != -1){\n                            break;\n                        }\n                    }\n                    if(nodes[tmp_loc].children[tmp_ch] != -1){ //tmp_chへと繋がるノードに辿り着いた場合\n                        tmp_loc = nodes[tmp_loc].children[tmp_ch];\n                        //少なくとも1文字遡るので、ここでfinish_FLGがtrueになることはない\n                    }else{\n                        //Do nothing (tmp_loc == rootであるはず)\n                    }\n                }\n            }\n            if(ans_count > 0){\n                System.out.print(ans.toString());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\nclass Node{\n    public int parent_id;\n    public int[] children;\n    public int suffix_link;\n    public boolean finish_FLG;\n    Node(){\n        children = new int[128];\n    }\n    public void init(){\n        for(int i = 0; i < children.length; i++){\n            children[i] = -1;\n        }\n        finish_FLG = false;\n    }\n};\nclass Info{\n    public int node_id;\n    public int ch;\n    Info(int arg_node_id,int arg_ch){\n        node_id = arg_node_id;\n        ch = arg_ch;\n    }\n};'),
('Pattern_Search', '// package track;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int H = sc.nextInt(), W = sc.nextInt();\n        String s[] = new String[H];\n        for(int i = 0; i < H; i++) {\n            s[i] = sc.next();\n        }\n        int R = sc.nextInt(), C = sc.nextInt();\n        long base1 = 10007, base2 = 11117;\n        long h[] = new long[R];\n        for(int i = 0; i < R; i++) {\n            String tmp = sc.next();\n            RollingHash rh = new RollingHash(tmp, base1);\n            h[i] = rh.getHash(0, C);\n        }\n                long table[][] = new long[W - C + 1][H];\n        for(int i = 0; i < H; i++) {\n            RollingHash rh = new RollingHash(s[i], base1);\n            for(int j = 0; j < W - C + 1; j++) {\n                table[j][i] = rh.getHash(j, j + C);\n            }\n        }\n                RollingHash[] rh = new RollingHash[W - C + 1];\n                for(int i = 0; i < W - C + 1; i++) {\n            rh[i] = new RollingHash(table[i], base2);\n        }\n                RollingHash pt = new RollingHash(h, base2);\n        long pattern = pt.getHash(0, R);\n                for(int i = 0; i < H - R + 1; i++) {\n            for(int j = 0; j < W - C + 1; j++) {\n                if(rh[j].getHash(i, i + R) == pattern) {\n                    System.out.println(i + \" \" + j);\n                }\n            }\n        }\n    }\n}\nclass RollingHash {\n    long base = 10007L;\n    final long mod = 1000000007L;\n    long[] power;\n    long[] hash;\n    RollingHash(String s, long base) {\n        this.base = base;\n        int n = s.length();\n        power = new long[n + 1];\n        hash = new long[n + 1];\n        power[0] = 1L;\n        for (int i = 0; i < n; i++) {\n            power[i + 1] = power[i] * base % mod;\n            hash[i + 1] = (hash[i] * base + s.charAt(i)) % mod;\n        }\n    }\n    RollingHash(long[] s, long base) {\n        this.base = base;\n        int n = s.length;\n        power = new long[n + 1];\n        hash = new long[n + 1];\n        power[0] = 1L;\n        for (int i = 0; i < n; i++) {\n            power[i + 1] = power[i] * base % mod;\n            hash[i + 1] = (hash[i] * base + s[i]) % mod;\n        }\n    }\n    long getHash(int l, int r) {\n        return ((hash[r] - hash[l] * power[r - l]) % mod + mod) % mod;\n    }\n}'),
('String_Search', '// package track;\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.function.Consumer;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String T = sc.next() + \"$\";\n        int[] sa = SuffixArray.suffixArray(T);\n        int Q = sc.nextInt();\n        for(int I = 0; I < Q; I++) {\n            String p = sc.next();\n            int low = 0, high = T.length();\n            int ans = 0;\n            while(high >= low) {\n                int mid = low + high >> 1;\n                if(mid >= T.length()) {\n                    break;\n                }\n                int res = 0;\n                for(int i = 0; i < p.length(); i++) {\n                    if(p.charAt(i) != T.charAt(sa[mid] + i)) {\n                        res = T.charAt(sa[mid] + i) - p.charAt(i);\n                        break;\n                    }\n                }\n                if(res == 0) {\n                    ans = 1;\n                    break;\n                }\n                else if(res > 0) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            System.out.println(ans);\n        }\n    }\n}\nclass SuffixArray {\n    private static int[] sais(int[] s, int upper) {\n        int n = s.length;\n        if (n == 0) return new int[0];\n        if (n == 1) return new int[]{0};\n        if (n == 2) {\n            if (s[0] < s[1]) {\n                return new int[]{0, 1};\n            } else {\n                return new int[]{1, 0};\n            }\n        }\n        int[] sa = new int[n];\n        boolean[] ls = new boolean[n];\n        for (int i = n - 2; i >= 0; i--) {\n            ls[i] = s[i] == s[i + 1] ? ls[i + 1] : s[i] < s[i + 1];\n        }\n        int[] sumL = new int[upper + 1];\n        int[] sumS = new int[upper + 1];\n        for (int i = 0; i < n; i++) {\n            if (ls[i]) {\n                sumL[s[i] + 1]++;\n            } else {\n                sumS[s[i]]++;\n            }\n        }\n        for (int i = 0; i <= upper; i++) {\n            sumS[i] += sumL[i];\n            if (i < upper) sumL[i + 1] += sumS[i];\n        }\n        Consumer<int[]> induce = lms -> {\n            Arrays.fill(sa, -1);\n            int[] buf = new int[upper + 1];\n            System.arraycopy(sumS, 0, buf, 0, upper + 1);\n            for (int d : lms) {\n                if (d == n) continue;\n                sa[buf[s[d]]++] = d;\n            }\n            System.arraycopy(sumL, 0, buf, 0, upper + 1);\n            sa[buf[s[n - 1]]++] = n - 1;\n            for (int i = 0; i < n; i++) {\n                int v = sa[i];\n                if (v >= 1 && !ls[v - 1]) {\n                    sa[buf[s[v - 1]]++] = v - 1;\n                }\n            }\n            System.arraycopy(sumL, 0, buf, 0, upper + 1);\n            for (int i = n - 1; i >= 0; i--) {\n                int v = sa[i];\n                if (v >= 1 && ls[v - 1]) {\n                    sa[--buf[s[v - 1] + 1]] = v - 1;\n                }\n            }\n        };\n        int[] lmsMap = new int[n + 1];\n        Arrays.fill(lmsMap, -1);\n        int m = 0;\n        for (int i = 1; i < n; i++) {\n            if (!ls[i - 1] && ls[i]) {\n                lmsMap[i] = m++;\n            }\n        }\n        int[] lms = new int[m];\n        {\n            int p = 0;\n            for (int i = 1; i < n; i++) {\n                if (!ls[i - 1] && ls[i]) {\n                    lms[p++] = i;\n                }\n            }\n        }\n        induce.accept(lms);\n        if (m > 0) {\n            int[] sortedLms = new int[m];\n            {\n                int p = 0;\n                for (int v : sa) {\n                    if (lmsMap[v] != -1) {\n                        sortedLms[p++] = v;\n                    }\n                }\n            }\n            int[] recS = new int[m];\n            int recUpper = 0;\n            recS[lmsMap[sortedLms[0]]] = 0;\n            for (int i = 1; i < m; i++) {\n                int l = sortedLms[i - 1], r = sortedLms[i];\n                int endL = (lmsMap[l] + 1 < m) ? lms[lmsMap[l] + 1] : n;\n                int endR = (lmsMap[r] + 1 < m) ? lms[lmsMap[r] + 1] : n;\n                boolean same = true;\n                if (endL - l != endR - r) {\n                    same = false;\n                } else {\n                    while (l < endL && s[l] == s[r]) {\n                        l++;\n                        r++;\n                    }\n                    if (l == n || s[l] != s[r]) same = false;\n                }\n                if (!same) {\n                    recUpper++;\n                }\n                recS[lmsMap[sortedLms[i]]] = recUpper;\n            }\n            int[] recSA = sais(recS, recUpper);\n            for (int i = 0; i < m; i++) {\n                sortedLms[i] = lms[recSA[i]];\n            }\n            induce.accept(sortedLms);\n        }\n        return sa;\n    }\n    public static int[] suffixArray(int[] s, int upper) {\n        assert (0 <= upper);\n        for (int d : s) {\n            assert (0 <= d && d <= upper);\n        }\n        return sais(s, upper);\n    }\n    public static int[] suffixArray(int[] s) {\n        int n = s.length;\n        Integer[] idx = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            idx[i] = i;\n        }\n        Arrays.sort(idx, (l, r) -> s[l] - s[r]);\n        int[] s2 = new int[n];\n        int now = 0;\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && s[idx[i - 1]] != s[idx[i]]) {\n                now++;\n            }\n            s2[idx[i]] = now;\n        }\n        return sais(s2, now);\n    }\n    public static int[] suffixArray(char[] s) {\n        int n = s.length;\n        int[] s2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            s2[i] = s[i];\n        }\n        return sais(s2, 255);\n    }\n    public static int[] suffixArray(java.lang.String s) {\n        return suffixArray(s.toCharArray());\n    }\n}'),
('Change-Making_Problem', '// package track;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int ans = 0;\n        int coin[] = {25, 10, 5, 1};\n        for(int i = 0; i < 4; i++) {\n            ans += n / coin[i];\n            n %= coin[i];\n        }\n        System.out.println(ans);\n    }\n}'),
('Fractional_Knapsack_Problem', '// package track;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int w = sc.nextInt();\n        Data[] d = new Data[n];\n        for(int i = 0; i < n; i++) {\n            int v = sc.nextInt(), we = sc.nextInt();\n            d[i] = new Data(v, we);\n        }\n        Arrays.sort(d);\n        double ans = 0;\n        for(Data e : d) {\n            if(w >= e.w) {\n                ans += e.v;\n                w -= e.w;\n            }\n            else {\n                ans += e.d * w;\n                w = 0;\n            }\n        }\n        System.out.printf(\"%.8f\\n\", ans);\n    }\n}\nclass Data implements Comparable<Data> {\n    double d;\n    int v, w;\n    Data(int v, int w) {\n        this.d = (double)v / w;\n        this.v = v;\n        this.w = w;\n    }\n    public int compareTo(Data rhs) {\n        if(d < rhs.d) return 1;\n        if(d > rhs.d) return -1;\n        return 0;\n    }\n}'),
('Activity_Selection_Problem', 'import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(in.readLine().trim());\n        Activity[] acs = new Activity[n];\n        for (int i = 0; i < acs.length; i++) {\n            StringTokenizer st = new StringTokenizer(in.readLine().trim());\n            acs[i] = new Activity(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n        }\n        Arrays.sort(acs);\n        int ans = maxActivities(n, acs);\n        out.write(String.format(\"%d\\n\", ans));\n        in.close();\n        out.close();\n    }\n    private static int maxActivities(int n, Activity[] acs) {\n        int ans = 0;\n        int start = 0;\n        for (int i = 0; i < n; i++) {\n            if (start >= acs[i].st) continue;\n            ans++;\n            start = acs[i].en;\n        }\n        return ans;\n    }\n    static class Activity implements Comparable<Activity> {\n        int st, en;\n        public Activity(int st, int en) {\n            this.st = st;\n            this.en = en;\n        }\n        @Override\n        public int compareTo(Activity o) {\n            return (this.en - o.en != 0) ? this.en - o.en : this.st - o.st;\n        }\n    }\n}'),
('Huffman_Coding', 'import java.util.*;\npublic class Main {\n    public static void main (String[] args) {\n        Scanner sc = new Scanner(System.in);\n        char[] arr = sc.next().toCharArray();\n        int[] alpha = new int[26];\n        for (char c : arr) {\n            alpha[c - \'a\']++;\n        }\n        PriorityQueue<Node> queue = new PriorityQueue<>();\n        for (int i = 0; i < 26; i++) {\n            if (alpha[i] > 0) {\n                queue.add(new Node(i, alpha[i]));\n            }\n        }\n        if (queue.size() == 1) {\n            System.out.println(queue.peek().count);\n            return;\n        }\n        ArrayList<Node> chars = new ArrayList<>();\n        while (queue.size() > 1) {\n            Node left = queue.poll();\n            Node right = queue.poll();\n            queue.add(new Node(left, right));\n            if (left.isAlpha()) {\n                chars.add(left);\n            }\n            if (right.isAlpha()) {\n                chars.add(right);\n            }\n        }\n        setLength(0, queue.peek());\n        long total = 0;\n        for (Node x : chars) {\n            total += x.getValue();\n        }\n        System.out.println(total);\n    }\n        static void setLength(int length, Node target) {\n        if (target == null) {\n            return;\n        }\n        target.length = length;\n        setLength(length + 1, target.left);\n        setLength(length + 1, target.right);\n    }\n        static class Node implements Comparable<Node> {\n        int idx;\n        Node left;\n        Node right;\n        int count;\n        int length;\n                public Node(int idx, Node left, Node right, int count, int length) {\n            this.idx = idx;\n            this.left = left;\n            this.right = right;\n            this.count = count;\n            this.length = length;\n        }\n                public Node(int idx, int count) {\n            this(idx, null, null, count, 0);\n        }\n                public Node(Node left, Node right) {\n            this(-1, left, right, left.count + right.count, 0);\n        }\n                public boolean isAlpha() {\n            return idx >= 0;\n        }\n                public int compareTo(Node another) {\n            return count - another.count;\n        }\n                public int getValue() {\n            return count * length;\n        }\n    }\n }'),
('Insertion_Sort', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM  = 2000000000;\n    public static final int MOD  = 1000000007;\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int array[] = new int[N];\n        for(int i = 0; i < N; i++)array[i] = scanner.nextInt();\n        out_put(array);\n        int base_value,loc;\n        for(int i = 1; i < N; i++){\n            base_value = array[i];\n            loc = i-1;\n            while(loc >= 0 && array[loc] > base_value){\n                array[loc+1] = array[loc];\n                loc--;\n            }\n            array[loc+1] = base_value;\n            out_put(array);\n        }\n    }\n    private static void out_put(int array[]){\n        System.out.printf(\"%d\", array[0]);\n        for(int i = 1; i < array.length; i++){\n            System.out.printf(\" %d\", array[i]);\n        }\n        System.out.printf(\"\\n\");\n    }\n}');
INSERT INTO `sourcecode_list` (`question_name`, `code`) VALUES
('Greatest_Common_Divisor', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM  = 2000000000;\n    public static final int MOD  = 1000000007;\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        int y = scanner.nextInt();\n        System.out.println(gcd(Math.max(x, y),Math.min(x, y)));\n    }\n    public static int gcd(int a,int b){\n        if(b == 0){\n            return a;\n        }else{\n            return gcd(b,a%b);\n        }\n    }\n}'),
('Prime_Numbers', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final long HUGE_NUM = 4000000000000000000L;\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int ans = 0;\n        for(int loop = 0; loop < N; loop++) {\n            int num = scanner.nextInt();\n            if(num == 2) {\n                ans++;\n                continue;\n            }\n            Boolean FLG = true;\n            for(int k = 2; k*k <= num; k++) {\n                if(num%k == 0) {\n                    FLG = false;\n                    break;\n                }\n            }\n            if(FLG) {\n                ans++;\n            }\n        }\n        System.out.println(ans);\n    }\n}'),
('Maximum_Profit', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n    public static final int BIG_NUM  = 2000000000;\n    public static final int MOD  = 1000000007;\n    public static void main(String[] args) {\n        int N,tmp,maximum = -BIG_NUM,minimum = BIG_NUM;\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            N = Integer.parseInt(br.readLine());\n            for(int loop = 0; loop < N; loop++){\n                tmp = Integer.parseInt(br.readLine());\n                maximum = Math.max(maximum, tmp-minimum);\n                minimum = Math.min(minimum, tmp);\n            }\n        } catch (NumberFormatException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(maximum);\n    }\n}'),
('Bubble_Sort', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final long HUGE_NUM = 4000000000000000000L;\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int A[] = new int[N];\n        for(int i = 0; i < N; i++) {\n            A[i] = scanner.nextInt();\n        }\n        int ans = 0;\n        for(int base = 0; base < N-1; base++) { //最小の数を引っ張ってくる場所\n            for(int i = N-1; i >= base+1; i--) {\n                if(A[i] < A[i-1]) {\n                    int tmp = A[i];\n                    A[i] = A[i-1];\n                    A[i-1] = tmp;\n                    ans++;\n                }\n            }\n        }\n        System.out.printf(\"%d\", A[0]);\n        for(int i = 1; i < N; i++) {\n            System.out.printf(\" %d\",A[i]);\n        }\n        System.out.println();\n        System.out.printf(\"%d\\n\", ans);\n    }\n}\nclass Edge{\n    Edge(int arg_to,int arg_cost){\n        this.to = arg_to;\n        this.cost = arg_cost;\n    }\n    public int to;\n    public int cost;\n}\nclass State implements Comparable<State>{\n    State(int arg_node,int arg_sum_dist){\n        this.node = arg_node;\n        this.sum_dist = arg_sum_dist;\n    }\n    public int compareTo(State arg) {\n        //■距離の昇順(PQ)\n        if(this.sum_dist < arg.sum_dist) {\n            return -1;\n        }else if(this.sum_dist > arg.sum_dist) {\n            return 1;\n        }else {\n            return 0;\n        }\n    }\n    public int node;\n    public int sum_dist;\n}'),
('Selection_Sort', 'import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int[] a=new int[n];\n                for(int i=0;i<n;i++){\n                a[i]=scan.nextInt();              \n                }\n                int count=selectionSort(a,n);\n               System.out.print(a[0]);\n                for(int i=1;i<n;i++){\n                    System.out.print(\" \"+a[i]);\n                }\n                System.out.println();\n                System.out.println(count); \n        }                 \n        public static int selectionSort(int[] a, int n){\n          int re=0;\n          for(int i=0;i<n;i++){\n              int min=i;\n              for(int j=i;j<n;j++){\n                  if(a[j]<a[min]){\n                      min=j;\n                  }\n              }\n              if(i!=min){\n                  re++;\n                  int temp= a[i];\n                  a[i]=a[min];\n                  a[min]=temp;\n              }\n          }\n        return re;\n        }\n}'),
('Stable_Sort', 'import java.util.Scanner;\npublic class Main {\n        public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n                int n = s.nextInt();\n        Carta cartas [] = new Carta[n];\n        for (int i = 0; i < n; i++) {\n            String st = s.next();\n            cartas[i] = new Carta(st.charAt(0),(st.charAt(1)-\'0\'));\n        }\n        Carta [] copy;\n        copy = bubbleSort(cartas);\n        for (int i = 0; i < copy.length; i++) {\n            if(i != 0) System.out.print(\" \");\n            System.out.print(copy[i]);\n        }\n        System.out.println(\"\\n\" + (stable(copy,cartas)?\"Stable\":\"Not stable\"));\n        copy = selectionSort(cartas);\n        for (int i = 0; i < copy.length; i++) {\n            if(i != 0) System.out.print(\" \");\n            System.out.print(copy[i]);\n        }\n        System.out.println(\"\\n\" + (stable(copy,cartas)?\"Stable\":\"Not stable\"));\n            }\n    public static boolean stable(Carta[] ...n){\n        for (int i = 0; i < n[0].length-1; i++) {\n            if(n[0][i].equals(n[0][i+1])){\n                //System.out.println(\"\\n\" + n[0][i] + \" - \" + n[0][i+1]);\n                int it , jt ;\n                it = jt = -1;\n                for (int j = 0; j < n[1].length; j++) {\n                    if(n[0][i].equals2(n[1][j])){\n//                        System.out.println(\"n[0][i] == n[1][j]\\n\" + n[0][i] + \" - \" + n[1][j]);\n//                        System.out.println(\"\\n\" + i + \" - \" + j);\n                        it = j;\n                    }else if(n[0][i+1].equals2(n[1][j])){\n//                        System.out.println(\"n[0][i+1] == n[1][j]\\n\" + n[0][i+1] + \" - \" + n[1][j]);\n//                        System.out.println(\"\\n\" + (i+1) + \" - \" + j);\n                        jt = j;\n                    }\n                    if(it!=-1 && jt!=-1) break;\n                }\n                if(it > jt){\n//                    System.out.println(\"\\n\"+it + \" - \" + jt);\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n        public static Carta[]  bubbleSort(Carta[] n){\n        Carta temp [] = new Carta[n.length];\n        System.arraycopy(n, 0, temp, 0, n.length);\n        for (int i = 0; i < temp.length-1; i++) {\n            for (int j = temp.length-1; j > i; j--) {\n                if(temp[j].compareTo(temp[j-1])<0){\n                    Carta temp2 = temp[j];\n                    temp[j] = temp[j-1];\n                    temp[j-1] = temp2;\n                }\n            }\n        }\n        return temp;\n    }\n        public static Carta[]  selectionSort(Carta[] n){\n        Carta temp [] = new Carta[n.length];\n        System.arraycopy(n, 0, temp, 0, n.length);\n        for (int i = 0; i < temp.length-1; i++) {\n            int mini = i;\n            for (int j = i; j < n.length; j++) {\n                if(temp[j].compareTo(temp[mini])<0){\n                    mini = j;\n                }\n            }\n            Carta temp2 = temp[i];\n            temp[i] = temp[mini];\n            temp[mini] = temp2;\n        }\n        return temp;\n    }\n        public static class Carta implements Comparable<Carta>{\n        char letra;  int valor;\n                public Carta(char letra, int valor) {\n            this.letra = letra;\n            this.valor = valor;\n        }\n                public char f(){\n            return letra;\n        }\n                public int s(){\n            return valor;\n        }\n                public boolean equals(Carta carta){\n            return valor == carta.s();\n        }\n                public boolean equals2(Carta carta){\n            return letra == carta.f() && valor == carta.s();\n        }\n                @Override\n        public String toString(){\n            return letra + \"\" + valor;\n        }\n        @Override\n        public int compareTo(Carta carta){\n            if(valor < carta.s())\n                return -1;\n            if(valor > carta.s())\n                return 1;\n            return 0;\n        }\n            }\n    }'),
('Exhaustive_Search', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final long HUGE_NUM = 4000000000000000000L;\n    public static final int MAX = 2000;\n    public static Boolean[] table = new Boolean[MAX+1];\n    public static int[] A;\n    public static int N;\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        N = scanner.nextInt();\n        A = new int[N];\n        for(int i = 0; i < N; i++) {\n            A[i] = scanner.nextInt();\n        }\n        for(int i = 0; i < table.length; i++) {\n            table[i] = false;\n        }\n        dfs(0,0);\n        int numQ = scanner.nextInt();\n        StringBuilder ans = new StringBuilder();\n        for(int loop = 0; loop < numQ; loop++) {\n            int x = scanner.nextInt();\n            if(table[x]) {\n                ans.append(\"yes\").append(\"\\n\");\n            }else {\n                ans.append(\"no\").append(\"\\n\");\n            }\n        }\n        System.out.print(ans.toString());\n    }\n    public static void dfs(int ind,int sum) {\n        table[sum] = true;\n        if(ind == N) {\n            return;\n        }\n        dfs(ind+1,sum); //足さない\n        if(sum+A[ind] <= MAX) {\n            dfs(ind+1,sum+A[ind]);\n        }\n    }\n}\nclass UnionFind{\n    UnionFind(int arg_N){\n        this.N = arg_N;\n        this.boss = new int[N];\n        this.height = new int[N];\n        this.num_member = new int[N];\n    }\n    public void init() {\n        for(int i = 0; i < N; i++) {\n            this.boss[i] = i;\n            this.height[i] = 0;\n            this.num_member[i] = 0;\n        }\n    }\n    public int get_boss(int id) {\n        if(this.boss[id] == id) {\n            return id;\n        }else {\n            return this.boss[id] = get_boss(this.boss[id]);\n        }\n    }\n    public Boolean isSame(int x,int y) {\n        return get_boss(x) == get_boss(y);\n    }\n    public void unite(int x,int y) {\n        int boss_x = get_boss(x);\n        int boss_y = get_boss(y);\n        if(boss_x == boss_y)return;\n        if(this.height[boss_x] > this.height[boss_y]){\n            this.num_member[boss_x] += this.num_member[boss_y];\n            this.boss[boss_y] = boss_x;\n        }else if(this.height[boss_x] < this.height[boss_y]){\n            this.num_member[boss_y] += this.num_member[boss_x];\n            this.boss[boss_x] = boss_y;\n        }else{ //height[boss_x] == height[boss_y]\n            this.num_member[boss_x] += this.num_member[boss_y];\n            this.boss[boss_y] = boss_x;\n            this.height[x]++;\n        }\n    }\n    private int N;\n    private int boss[],height[],num_member[];\n}\nclass Info{\n    Info(int arg_L,int arg_R,int arg_value){\n        this.L = arg_L;\n        this.R = arg_R;\n        this.value = arg_value;\n    }\n    public int L,R,value;\n}\nclass Edge implements Comparable<Edge>{\n    Edge(int arg_from,int arg_to,int arg_cost){\n        this.from = arg_from;\n        this.to = arg_to;\n        this.cost = arg_cost;\n    }\n    public int compareTo(Edge arg) {\n        //辺の重みの昇順\n        if(this.cost < arg.cost) {\n            return -1;\n        }else if(this.cost > arg.cost) {\n            return 1;\n        }else {\n            return 0;\n        }\n    }\n    public int from,to;\n    public int cost;\n}\nclass State implements Comparable<State>{\n    State(int arg_node,int arg_sum_dist){\n        this.node = arg_node;\n        this.sum_dist = arg_sum_dist;\n    }\n    public int compareTo(State arg) {\n        //■距離の昇順(PQ)\n        if(this.sum_dist < arg.sum_dist) {\n            return -1;\n        }else if(this.sum_dist > arg.sum_dist) {\n            return 1;\n        }else {\n            return 0;\n        }\n    }\n    public int node;\n    public int sum_dist;\n}'),
('Merge_Sort', 'import java.util.*;\npublic class Main\n{    \n    static int Mezclar(int[] a1, int[] a2, int[] a)\n    {          \n        int i=0 , j=0, k = 0;\n        while(i < a1.length && j < a2.length)\n        {\n            if(a1[i] < a2[j])\n            {\n                a[k] = a1[i];\n                i++;\n            }\n            else\n            {\n                a[k] = a2[j];\n                j++;\n            }\n            k++;            \n        }\n        while(i < a1.length)\n        {\n            a[k] = a1[i];\n            i++;    \n            k++;\n                  }\n        while(j < a2.length)\n        {\n            a[k] = a2[j];\n            j++;\n            k++;            \n        }\n        return a.length;\n    }\n     static int MergeSort(int[] a)\n    {        \n        int comparaciones = 0;\n        if(a.length > 1)\n        {\n            int[] a1 = Arrays.copyOfRange(a, 0, a.length/2);\n            int[] a2 = Arrays.copyOfRange(a, a.length/2, a.length);\n            comparaciones += MergeSort(a1);\n            comparaciones += MergeSort(a2);\n            comparaciones += Mezclar(a1, a2, a);\n        }\n        return comparaciones;\n    }\n           public static void main(String[] args) \n    {       \n        Scanner escaner  = new Scanner(System.in);        \n        int[] arreglo = new int[escaner.nextInt()];\n                for (int i = 0; i < arreglo.length; i++) \n            arreglo[i] = escaner.nextInt();\n                int comparaciones = MergeSort(arreglo);\n                if(arreglo.length > 0)\n        {\n            System.out.print(arreglo[0]);\n            for(int i = 1; i < arreglo.length; i++)\n                System.out.print(\" \"+arreglo[i]);                               \n        }\n        System.out.println();\n        System.out.println(comparaciones);       \n                          }    \n}'),
('Koch_Curve', '/**\n * ALDS1_5_C Koch Curve\n */\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nclass Vector {\n    double x;\n    double y;\n    Vector(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n    void print() {\n        System.out.printf(\"%.8f %.8f%n\", this.x, this.y);\n    }\n}\nclass Main {\n    static void drawCoch(int depth, Vector start, Vector goal) {\n        if (depth == 0) {\n            return;\n        }\n        Vector s = new Vector(2.0 / 3.0 * start.x + 1.0 / 3.0 * goal.x, 2.0 / 3.0 * start.y + 1.0 / 3.0 * goal.y);\n        Vector u = new Vector(1.0 / 3.0 * start.x + 2.0 / 3.0 * goal.x, 1.0 / 3.0 * start.y + 2.0 / 3.0 * goal.y);\n        Vector t = new Vector(1.0 / 2.0 * (goal.x + start.x) - Math.sqrt(3.0) / 6.0 * (goal.y - start.y),\n                            1.0 / 2.0 * (goal.y + start.y) + Math.sqrt(3.0) / 6.0 * (goal.x - start.x));\n        drawCoch(depth - 1, start, s);\n        s.print();\n        drawCoch(depth - 1, s, t);\n        t.print();\n        drawCoch(depth - 1, t, u);\n        u.print();\n        drawCoch(depth - 1, u, goal);\n    }\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        Vector start = new Vector(0.0, 0.0);\n        Vector goal = new Vector(100.0, 0.0);\n        start.print();\n        drawCoch(n, start, goal);\n        goal.print();\n    }\n}'),
('The_Number_of_Inversions', 'import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main {\n    static Scanner in;\n    static PrintWriter out;\n    static int n;\n    static int[] A,L,R;\n        static {\n        in = new Scanner(new BufferedInputStream(System.in));\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n    }\n        static long merge(int[] A, int n, int left, int mid, int right) {\n        /*for(int i = 0; i < n; i++) {\n            out.print(A[i] + \" \");\n        }\n        out.flush();\n        out.println();*/\n        int n1 = mid - left;\n        int n2 = right - mid;\n        L = new int[n1 + 2];\n        R = new int[n2 + 2];\n        for(int i = 0; i < n1; i++) L[i] = A[left + i];\n        for(int i = 0; i < n2; i++) R[i] = A[mid + i];\n        L[n1] = Integer.MAX_VALUE;\n        R[n2] = Integer.MAX_VALUE;\n        int i = 0;\n        int j = 0;\n        long cnt = 0;\n        for(int k = left; k < right; k++) {\n            if(L[i] <= R[j]) {\n                A[k] = L[i++];\n            }else {\n                A[k] = R[j++];\n                cnt += n1 - i;\n            }\n        }\n        return cnt;\n    }\n        static long mergeSort(int[] A, int n, int left, int right) {\n        if(left < right - 1) {\n            int mid = (left + right) / 2;\n            long a = mergeSort(A, n, left, mid);\n            long b = mergeSort(A, n, mid, right);\n            long c = merge(A, n, left, mid, right);\n            return a + b + c;\n        }\n        return 0;\n    }\n        public static void main(String[] args) {\n        n = in.nextInt();\n        A = new int[n];\n        for(int i = 0; i < n; i++) {\n            A[i] = in.nextInt();\n        }\n        long ans = mergeSort(A, n, 0, n);\n        /*for(int i = 0; i < n; i++) {\n            out.print(A[i] + \" \");\n        }\n        out.flush();\n        out.println();*/\n        out.println(ans);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}'),
('Counting_Sort', 'import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner; // scannerの方が速い(?)\nclass Main {\n    public static void main(String[] args) throws IOException {\n        long start = System.currentTimeMillis();\n        Scanner scan = new Scanner(System.in);\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = scan.nextInt(); // Integer.parseInt(br.readLine());\n        // String[] input = br.readLine().split(\" \");\n        int[] from = new int[n];\n        int[] to = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            from[i] = scan.nextInt(); // Integer.parseInt(input[i]);\n            max = Math.max(max, from[i]);\n        }\n        CountingSort(from, to, max);\n        StringBuilder sb = new StringBuilder();\n        sb.append(to[0]);\n        for (int i = 1; i < n; i++)\n                sb.append(\" \" + to[i]);\n        System.out.println(sb);\n    }\n    static void CountingSort(int[] A, int[] B, int k) {\n        int[] C = new int[k + 1];\n        int length = A.length;\n        /*\n        for (int i = 0; i < k + 1; i++) \n            C[i] = 0;\n        */\n        int i; // to avoid TLE\n        for (i = 0; i < length; i++) \n            C[A[i]]++;\n        for (i = 1; i < k + 1; i++) \n            C[i] += C[i - 1];\n                for (i = length - 1; i >= 0; i--)\n            B[--C[A[i]]] = A[i];\n            }\n}'),
('Partition', 'import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        Scanner scanner=new Scanner(System.in);\n        int line=scanner.nextInt();       \n        int[] valores=new int[line];                \n        for(int i=0;i<line;i++)\n            valores[i]=scanner.nextInt();\n            int p=partition(valores, 0, line-1);\n        for(int i=0;i<valores.length;++i){\n            if(i>0)\n                System.out.print(\" \");\n            if(i==p)\n                System.out.print(\"[\");\n            System.out.print(valores[i]);\n            if(i==p)\n                System.out.print(\"]\");\n        }\n        System.out.println();\n    }\n    public static int partition(int[] arr, int low, int high){\n    int pivot=arr[high];\n    int i=(low-1);\n    int t;\n    for(int j=low;j<high;j++)\n    {\n        if (arr[j]<=pivot)\n        {\n            i++;\n            t=arr[i];\n            arr[i]=arr[j];\n            arr[j]=t;\n        }\n    }\n    t=arr[i+1];\n    arr[i+1]=arr[high];\n    arr[high]=t;\n    return i+1;\n}\n}'),
('Quick_Sort', 'import java.util.*;\nclass S{\n    String r;\n    long b;\n    int t;\n    public S(String r,long b,int t) {\n        this.r=r;\n        this.b=b;\n        this.t=t;\n    }\n}\npublic class Main{\n    static boolean i(S a[]) {\n        for(int i=0;i<a.length-1;i++) {\n            if(a[i].b==a[i+1].b&&a[i].t>a[i+1].t) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static int q(S a[],int low,int high) {\n         int i=low-1;\n        long key = a[high].b;\n        for(int j=low;j<high;j++) {\n            if(a[j].b<=key) {\n                i++;\n                S temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }   \n        }\n        S temp=a[i+1];\n        a[i+1]=a[high];\n        a[high]=temp;\n        return i+1;\n    }\n    static void sort(S a[],int low,int high){\n        if(low<high) {\n            int q=q(a,low,high);\n            sort(a,low,q-1);\n            sort(a,q+1,high);\n        }\n    }\n    public static void main(String args[]) {\n        Scanner in=new Scanner(System.in);\n        int n=Integer.parseInt(in.nextLine());\n        S a[]=new S[n];\n        for(int i=0;i<n;i++) {\n            String r=in.nextLine();\n            String c[]=r.split(\" \");\n            a[i]=new S(r,Long.parseLong(c[1]),i);\n        }\n        sort(a,0,n-1);\n        if(i(a))System.out.println(\"Not stable\");\n        else System.out.println(\"Stable\");\n        for(S i:a) {\n            System.out.println(i.r);\n        }\n    }\n}'),
('Minimum_Cost_Sort', 'import java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Scanner;\nclass Main {\n    public static void main (String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Baggage[] w = new Baggage[n];\n        boolean[] checked = new boolean[n];\n        for (int i = 0; i < n; i ++) {\n            w[i] = new Baggage(sc.nextInt(), i);\n        }\n        Arrays.sort(w);\n        int i, j, swap;\n        int cost = 0;\n        int min = w[0].weight;\n        for (i = 0; i < n; i++) {\n            if (checked[i]) continue;\n            checked[i] = true;\n            swap = 0;\n            j = w[i].index;\n            while (j != i) {\n                checked[j] = true;\n                cost += w[j].weight;\n                swap++;\n                j = w[j].index;\n            }\n            cost += Math.min(w[i].weight * swap, min * swap + (min + w[i].weight) * 2);\n        }\n        System.out.println(cost);\n    }\n}\nclass Baggage implements Comparable<Baggage> {\n    public int weight;\n    public int index;\n    public Baggage(int weight, int index) {\n        this.weight = weight;\n        this.index = index;\n    }\n    @Override\n    public int compareTo(Baggage b) {\n        if (weight < b.weight) return -1;\n        else if (weight > b.weight) return 1;\n        else return 0;\n    }\n}'),
('Rooted_Trees', 'import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    private static final int BIG_NUM  = 2000000000;\n    private static final int MOD  = 1000000007;\n    private static Node nodes[];\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        nodes = new Node[N];\n        for(int i = 0; i < N; i++)nodes[i] = new Node();\n        int id,num,child_id;\n        for(int loop = 0; loop < N; loop++){\n            id = scanner.nextInt();\n            num = scanner.nextInt();\n            for(int i = 0; i < num; i++){\n                child_id = scanner.nextInt();\n                nodes[id].children.add(child_id);\n                nodes[child_id].setParent_id(id);\n            }\n        }\n        for(int i = 0; i < N; i++){\n            if(nodes[i].getParent_id() == -1){\n                calcDepth(i,0);\n            }\n        }\n        StringBuilder ans = new StringBuilder();\n        for(int i = 0; i < N; i++){\n            ans.append(\"node \").append(Integer.toString(i)).append(\": parent = \").append(Integer.toString(nodes[i].getParent_id()))\n            .append(\", depth = \").append(Integer.toString(nodes[i].getDepth())).append(\", \");\n            if(nodes[i].getParent_id() == -1){\n                ans.append(\"root, \");\n            }else if(nodes[i].children.size() == 0){\n                ans.append(\"leaf, \");\n            }else{\n                ans.append(\"internal node, \");\n            }\n            ans.append(\"[\");\n            if(nodes[i].children.size() > 0){\n                ans.append(Integer.toString(nodes[i].children.get(0)));\n                for(int k = 1; k < nodes[i].children.size(); k++){\n                    ans.append(\", \").append(Integer.toString(nodes[i].children.get(k)));\n                }\n            }\n            ans.append(\"]\\n\");\n        }\n        System.out.print(ans.toString());\n    }\n    static void calcDepth(int id,int value){\n        nodes[id].setDepth(value);\n        for(int i = 0; i < nodes[id].children.size(); i++){\n            calcDepth(nodes[id].children.get(i),value+1);\n        }\n    }\n}\nclass Node{\n    private int parent_id;\n    private int depth;\n    public ArrayList<Integer> children;\n    Node(){\n        children = new ArrayList<Integer>();\n        parent_id = -1;\n    }\n    public int getParent_id() {\n        return parent_id;\n    }\n    public void setParent_id(int parent_id) {\n        this.parent_id = parent_id;\n    }\n    public int getDepth() {\n        return depth;\n    }\n    public void setDepth(int depth) {\n        this.depth = depth;\n    }\n}'),
('Binary_Tree', 'import java.util.Scanner;\npublic class Main {\n    static class Node{\n        int parent;\n        int left;\n        int right;\n        public Node() {\n            this.parent = -1;\n            this.left = -1;\n            this.right = -1;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        T = new Node[n];\n        D = new int[n];\n        H = new int[n];\n        int t,l,r;\n        for(int i = 0 ; i < n; i ++){\n            T[i] = new Node();\n        }\n        for(int i = 0 ; i < n; i ++){\n            t = sc.nextInt();\n            l = sc.nextInt();\n            r = sc.nextInt();\n            T[t].left = l;\n            T[t].right = r;\n            if(l != -1){\n                T[l].parent = t;\n            }\n            if(r != -1){\n                T[r].parent = t;\n            }\n        }\n        for(int i = 0; i < n; i ++){\n            if(T[i].parent == -1){\n                R = i;\n                break;\n            }\n        }\n        setDepth(R,0);\n        setHeight(R);\n        print();\n    }\n    static Node[] T;\n    static int[] D,H;\n    static int n;\n    static int R;\n    static void print(){\n        for(int i = 0; i < n; i ++){\n            System.out.print(\"node \" + i +\": parent = \" + T[i].parent +\", sibling = \" + getSibling(i));\n            System.out.print(\", degree = \" + getDegree(i) +\", \");\n            System.out.print(\"depth = \" + D[i] +\", \");\n            System.out.print(\"height = \" + H[i] +\", \");\n            System.out.print(type(i));\n            System.out.println();\n        }\n    }\n    static int getSibling(int u){\n        if(T[u].parent != -1){\n            int p = T[u].parent;\n            if(T[p].left != -1 && T[p].left != u){\n                return T[p].left;\n            }\n            else if(T[p].right != -1 && T[p].right != u){\n                return T[p].right;\n            }\n        }\n        return -1;\n    }\n    static int getDegree(int u){\n        int d = 0;\n        if(T[u].right != -1){\n            d++;\n        }\n        if(T[u].left != -1){\n            d++;\n        }\n        return d;\n    }\n    static void setDepth(int u,int d){\n        if(u == -1) return;\n        D[u] = d;\n        setDepth(T[u].left,d + 1);\n        setDepth(T[u].right,d + 1);\n    }\n    static int setHeight(int u){\n        int h1= 0,h2 = 0;\n        if(T[u].left != -1){\n            h1 = setHeight(T[u].left) + 1;\n        }\n        if(T[u].right != -1){\n            h2 = setHeight(T[u].right) + 1;\n        }\n        H[u] = Math.max(h1,h2);\n        return Math.max(h1,h2);\n    }\n    static String type(int u){\n        String type;\n        if(T[u].parent == -1){\n            type = \"root\";\n        }\n        else if(T[u].left == -1 && T[u].right == -1){\n            type = \"leaf\";\n        }\n        else {\n            type = \"internal node\";\n        }\n        return type;\n    }\n}'),
('Tree_Walk', 'import java.util.Scanner;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final int MOD = 1000000007;\n    public static Node[] nodes;\n    public static StringBuilder ans;\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int V = sc.nextInt();\n        nodes = new Node[V];\n        int[] in_num = new int[V];\n        for(int i = 0; i < V; i++){\n            in_num[i] = 0;\n        }\n        int node_id,left_child,right_child;\n        for(int loop = 0; loop < V; loop++){\n            node_id = sc.nextInt();\n            left_child = sc.nextInt();\n            right_child = sc.nextInt();\n            nodes[node_id] = new Node(left_child,right_child);\n            if(left_child != -1){\n                in_num[left_child]++;\n            }\n            if(right_child != -1){\n                in_num[right_child]++;\n            }\n        }\n        int root = -1;\n        for(int i = 0; i < V; i++){\n            if(in_num[i] == 0){\n                root = i;\n                break;\n            }\n        }\n        ans = new StringBuilder();\n        ans.append(\"Preorder\\n\");\n        Preorder(root);\n        ans.append(\"\\nInorder\\n\");\n        Inorder(root);\n        ans.append(\"\\nPostorder\\n\");\n        Postorder(root);\n        ans.append(\"\\n\");\n        System.out.print(ans.toString());\n    }\n    public static void Preorder(int node_id){\n        ans.append(\" \").append(Integer.toString(node_id));\n        if(nodes[node_id].left_child != -1){\n            Preorder(nodes[node_id].left_child);\n        }\n        if(nodes[node_id].right_child != -1){\n            Preorder(nodes[node_id].right_child);\n        }\n    }\n    public static void Inorder(int node_id){\n        if(nodes[node_id].left_child != -1){\n            Inorder(nodes[node_id].left_child);\n        }\n        ans.append(\" \").append(Integer.toString(node_id));\n        if(nodes[node_id].right_child != -1){\n            Inorder(nodes[node_id].right_child);\n        }\n    }\n    public static void Postorder(int node_id){\n        if(nodes[node_id].left_child != -1){\n            Postorder(nodes[node_id].left_child);\n        }\n        if(nodes[node_id].right_child != -1){\n            Postorder(nodes[node_id].right_child);\n        }\n        ans.append(\" \").append(Integer.toString(node_id));\n    }\n}\nclass Node{\n    public int left_child;\n    public int right_child;\n    Node(int arg_left_child,int arg_right_child){\n        left_child = arg_left_child;\n        right_child = arg_right_child;\n    }\n}'),
('Reconstruction_of_a_Tree', 'import java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Scanner;\nclass Main {\n    static StringBuilder sb = new StringBuilder(\"\");\n    static int index = 0;\n    public static void main (String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] preorder = new int[n];\n        int[] inorder = new int[n];\n        for (int i = 0; i < n; i++) {\n            preorder[i] = sc.nextInt();\n        }\n        for (int i = 0; i < n; i++) {\n            inorder[i] = sc.nextInt();\n        }\n        Node[] nodes = new Node[n];\n        reconstruct(nodes, preorder, inorder, 0, n);\n        sb.deleteCharAt(0);\n        System.out.println(sb);\n    }\n    public static int reconstruct(Node[] nodes, int[] preorder, int[] inorder, int right, int left) {\n        if (left == right) return -1;\n        // find root\n        int root = 0;\n        outside: for (int i = 0; i < preorder.length; i++) {\n            for (int j = right; j < left; j++) {\n                if (preorder[i] == inorder[j]) {\n                    root = j;\n                    break outside;\n                }\n            }\n        }\n        int tempIndex = index;\n        index++;\n        nodes[tempIndex] = new Node(inorder[root], -1, -1);\n        nodes[tempIndex].left = reconstruct(nodes, preorder, inorder, right, root);\n        nodes[tempIndex].right = reconstruct(nodes, preorder, inorder, root + 1, left);\n        sb.append(\" \").append(nodes[tempIndex].id);\n        return tempIndex;\n    }\n}\nclass Node {\n    public int id;\n    public int left;\n    public int right;\n    public Node(int id, int left, int right) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n    }\n}'),
('Binary_Search_Tree_I', 'import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Scanner;\nclass Main {\n    static Node root = null;\n    static StringBuilder sb = new StringBuilder(\"\");\n    public static void main (String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int m = Integer.parseInt(br.readLine());\n        String input;\n        for (int i = 0; i < m; i++) {\n            input = br.readLine();\n            if (input.charAt(0) == \'i\') {\n                insert(new Node(Integer.parseInt(input.substring(7))));\n            } else {\n                print();\n            }\n        }\n        System.out.print(sb);\n    }\n    public static void insert(Node node) {\n        Node parent = null;\n        Node child = root;\n        while (child != null) {\n            parent = child;\n            if (node.key < child.key) {\n                child = child.left;\n            } else {\n                child = child.right;\n            }\n        }\n        if (parent == null) {\n            root = node;\n        } else if (node.key < parent.key) {\n            parent.left = node;\n        } else {\n            parent.right = node;\n        }\n    }\n    public static void print() {\n        printInorder(root);\n        sb.append(\"\\n\");\n        printPreorder(root);\n        sb.append(\"\\n\");\n    }\n    public static void printPreorder(Node node) {\n        if (node == null) return;\n        sb.append(\" \").append(node.key);\n        printPreorder(node.left);\n        printPreorder(node.right);\n    }\n    public static void printInorder(Node node) {\n        if (node == null) return;\n        printInorder(node.left);\n        sb.append(\" \").append(node.key);\n        printInorder(node.right);\n    }\n}\nclass Node {\n    public int key;\n    public Node left;\n    public Node right;\n    public Node(int key) {\n        this.key = key;\n        left = right = null;\n    }\n}'),
('Binary_Search_Tree_II', 'import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Scanner;\nclass Main {\n    static Node root = null;\n    static StringBuilder sb = new StringBuilder(\"\");\n    public static void main (String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int m = Integer.parseInt(br.readLine());\n        String input;\n        for (int i = 0; i < m; i++) {\n            input = br.readLine();\n            if (input.charAt(0) == \'i\') {\n                insert(new Node(Integer.parseInt(input.substring(7))));\n            } else if (input.charAt(0) == \'f\') {\n                if (find(Integer.parseInt(input.substring(5)))) {\n                    sb.append(\"yes\\n\");\n                } else {\n                    sb.append(\"no\\n\");\n                }\n            } else {\n                print();\n            }\n        }\n        System.out.print(sb);\n    }\n    public static void insert(Node node) {\n        Node parent = null;\n        Node child = root;\n        while (child != null) {\n            parent = child;\n            if (node.key < child.key) {\n                child = child.left;\n            } else {\n                child = child.right;\n            }\n        }\n        if (parent == null) {\n            root = node;\n        } else if (node.key < parent.key) {\n            parent.left = node;\n        } else {\n            parent.right = node;\n        }\n    }\n    public static boolean find(int key) {\n        Node node = root;\n        while (node != null) {\n            if (key == node.key) {\n                return true;\n            } else if (key < node.key) {\n                node = node.left;\n            } else {\n                node = node.right;\n            }\n        }\n        return false;\n    }\n    public static void print() {\n        printInorder(root);\n        sb.append(\"\\n\");\n        printPreorder(root);\n        sb.append(\"\\n\");\n    }\n    public static void printPreorder(Node node) {\n        if (node == null) return;\n        sb.append(\" \").append(node.key);\n        printPreorder(node.left);\n        printPreorder(node.right);\n    }\n    public static void printInorder(Node node) {\n        if (node == null) return;\n        printInorder(node.left);\n        sb.append(\" \").append(node.key);\n        printInorder(node.right);\n    }\n}\nclass Node {\n    public int key;\n    public Node left;\n    public Node right;\n    public Node(int key) {\n        this.key = key;\n        left = right = null;\n    }\n}'),
('Binary_Search_Tree_III', 'import java.util.Scanner;\npublic class Main {\n   static class Node{\n        int key;\n        Node parent;\n        Node left;\n        Node right;\n    }\n    static Node T;\n    static void insert(Node z){\n        Node y = null;\n        Node R = T;\n        while (R != null){\n            y = R;\n            if(z.key < R.key){\n                R = R.left;\n            }\n            else {\n                R = R.right;\n            }\n        }\n        z.parent = y;\n        if(y == null){\n            T = z;\n        }\n        else if(z.key < y.key){\n            y.left = z ;\n        }\n        else if(z.key > y.key){\n            y.right = z;\n        }\n    }\n    static int idx = 0;\n    static void inOrder(Node u){\n        if(u == null) return;\n        inOrder(u.left);\n        System.out.print(\" \" + u.key);\n        inOrder(u.right);\n    }\n    static void preOrder(Node u){\n        if(u == null) return;\n        System.out.print(\" \" + u.key);\n        preOrder(u.left);\n        preOrder(u.right);\n    }\n    static Node find(Node c,int key){\n        if(c == null) return null;\n        if(c.key == key){\n            return c;\n        }\n        else if(c.key > key){\n           return find(c.left,key);\n        }else{\n            return find(c.right,key);\n        }\n    }\n    static void delete(Node z){\n        //设要删除的结点 y\n        Node y ;\n        if(z.left == null || z.right == null){\n            y = z;\n        }\n        else {\n            // 要删除的对象 有两个子结点 则获取z 的后继结点\n            y = getSuccessor(z);\n        }\n        //确定 y 结点的子结点 x\n        Node x = null;\n        if(y.left != null){\n            x = y.left;\n        }\n        else {\n            x = y.right;\n        }\n        //设置x的父节点\n        if(x != null){\n            x.parent = y.parent;\n        }\n        if(y.parent == null){\n            T = x;\n        }\n        else if(y.parent.left == y){\n            y.parent.left = x;\n        }\n        else {\n            y.parent.right = x;\n        }\n        if(z != y){\n            z.key = y.key;\n        }\n        y = null;\n    }\n    static Node getSuccessor(Node x){\n        if(x.right != null){\n            return getMinimum(x.right);\n        }\n        return x;\n    }\n    static Node getMinimum(Node x){\n        while (x.left != null){\n            x = x.left;\n        }\n        return x;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Node temp;\n        int key = 0;\n        for(int i = 0 ; i < n; i ++){\n            String oper = sc.next();\n            if(\"insert\".equals(oper)){\n                key = sc.nextInt();\n                temp = new Node();\n                temp.key = key;\n                insert(temp);\n            }else if (\"print\".equals(oper)){\n                idx = 0;\n                inOrder(T);\n                System.out.println();\n                idx = 0;\n                preOrder(T);\n                System.out.println();\n            }else if(\"find\".equals(oper)){\n                key = sc.nextInt();\n                Node tmp = find(T,key);\n                System.out.println(tmp != null ? \"yes\" : \"no\");\n            }else if(\"delete\".equals(oper)){\n                key = sc.nextInt();\n                Node z = find(T,key);\n                if(z != null){\n                    delete(z);\n                }\n            }\n        }\n    }\n}'),
('Treap', 'import java.util.Scanner;\n class Node {\n    static Node root;\n     int key;\n    int priority;\n    Node left;\n    Node right;\n     Node(int key, int priority) {\n        this.key = key;\n        this.priority = priority;\n    }\n     private Node rightRotate() {\n        Node s = left;\n        left = s.right;\n        s.right = this;\n        return s;\n    }\n     private Node leftRotate() {\n        Node s = right;\n        right = s.left;\n        s.left = this;\n        return s;\n    }\n     Node insert(Node t) {\n        if(t == null) return this;\n        if(key == t.key) return t;\n         if(key < t.key) {\n            t.left = insert(t.left);\n            if(t.priority < t.left.priority) t = t.rightRotate();\n        }else {\n            t.right = insert(t.right);\n            if(t.priority < t.right.priority) t = t.leftRotate();\n        }\n         return t;\n    }\n     static Node find(int key) {\n        Node x = root;\n        while(x != null) {\n            if(key < x.key) x = x.left;\n            else if(x.key < key) x = x.right;\n            else return x;\n        }\n        return null;\n    }\n     static Node delete(Node t, int key) {\n        if(t == null) return null;\n        if(key < t.key) t.left = delete(t.left, key);\n        else if(key > t.key) t.right = delete(t.right, key);\n        else return _delete(t, key);\n        return t;\n    }\n     static Node _delete(Node t, int key) {\n        if(t.left == null && t.right == null) return null;\n        else if(t.left == null) t = t.leftRotate();\n        else if(t.right == null) t = t.rightRotate();\n        else {\n            if(t.left.priority > t.right.priority) t = t.rightRotate();\n            else t = t.leftRotate();\n        }\n        return delete(t, key);\n    }\n     static String inorder(Node x) {\n        String str = \"\";\n        if(x == null) return str;\n         if(x.left != null) str += inorder(x.left);\n        str += \" \" + x.key;\n        if(x.right != null)str += inorder(x.right);\n         return str;\n    }\n     static String preorder(Node x) {\n        String str = \"\";\n        if(x == null) return str;\n         str += \" \" + x.key;\n        if(x.left != null) str += preorder(x.left);\n        if(x.right != null) str += preorder(x.right);\n         return str;\n    }\n}\n public class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n          Node.root = null;\n        int m = sc.nextInt();\n        for(int i = 0; i < m; i++) {\n            String cmd = sc.next();\n            if(cmd.equals(\"insert\")) {\n                Node.root = new Node(sc.nextInt(), sc.nextInt()).insert(Node.root);\n            }else if(cmd.equals(\"find\")) {\n                System.out.println(Node.find(sc.nextInt()) != null? \"yes\" : \"no\");\n            }else if(cmd.equals(\"delete\")) {\n                Node.root = Node.delete(Node.root, sc.nextInt());\n            }else {\n                System.out.println(Node.inorder(Node.root));\n                System.out.println(Node.preorder(Node.root));\n            }\n        }\n         sc.close();\n    }\n}'),
('Complete_Binary_Tree', 'import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] T = new int[n + 1];\n        for(int i = 1; i <= n; i ++){\n            T[i] = sc.nextInt();\n        }\n        for(int i = 1; i <= n ; i ++){\n            System.out.print(\"node \" + i + \": key = \" + T[i] + \", \");\n            if(i/2 > 0){\n                System.out.print(\"parent key = \" + T[i/2] + \", \");\n            }\n            if(2*i <= n){\n                System.out.print(\"left key = \" + T[2*i] + \", \");\n            }\n            if((2*i + 1) <= n){\n                System.out.print(\"right key = \" + T[2*i + 1] + \", \");\n            }\n            System.out.println();\n        }\n    }\n}'),
('Maximum_Heap', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nimport static java.lang.Integer.parseInt;\nclass MaxHeap {\n    static int leftChild(int i) {\n        return i * 2;\n    }\n    static int rightChild(int i) {\n        return i * 2 + 1;\n    }\n    static void maxHeapify(int[] heap, int i) {\n        int leftChild = leftChild(i);\n        int rightChild = rightChild(i);\n        int largest = i;\n        if (leftChild < heap.length && heap[leftChild] > heap[i]) {\n            largest = leftChild;\n        }\n        if (rightChild < heap.length && heap[rightChild] > heap[largest]) {\n            largest = rightChild;\n        }\n        if (largest != i) {\n            int tmp = heap[i];\n            heap[i] = heap[largest];\n            heap[largest] = tmp;\n            maxHeapify(heap, largest);\n        }\n    }\n    static void buildMaxHeap(int[] heap) {\n        for (int i = (heap.length - 1) / 2; i >= 1; i--) {\n            maxHeapify(heap, i);\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader bRead = new BufferedReader(new InputStreamReader(System.in));\n        int h = parseInt(bRead.readLine());\n        int[] heap = new int[h + 1];\n        StringTokenizer st = new StringTokenizer(bRead.readLine());\n        for (int i = 1; i < h + 1; i++) {\n            heap[i] = parseInt(st.nextToken());\n        }\n        MaxHeap.buildMaxHeap(heap);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i < h + 1; i++) {\n            sb.append(\" \").append(heap[i]);\n        }\n        System.out.println(sb.toString());\n    }\n}');
INSERT INTO `sourcecode_list` (`question_name`, `code`) VALUES
('Priority_Queue', 'import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Main {\n    public static final int BIG_NUM = 2000000000;\n    public static final int MOD = 1000000007;\n    public static final long HUGE_NUM = 99999999999999999L;\n    public static final double EPS = 0.000000001;\n    public static final int SIZE = 2000005;\n    @SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            PQ Q = new PQ(SIZE);\n            String input_str = \"\";\n            String tmp_str[] = new String[2];\n            StringBuilder ans = new StringBuilder();\n            while(!(input_str = br.readLine()).equals(\"end\")){\n                tmp_str = input_str.split(\"\\\\s+\");\n                //空の場合と満杯の場合の出力は設問で未定義なのでチェックしない\n                if(tmp_str[0].equals(\"insert\")){\n                    Q.push(Integer.parseInt(tmp_str[1]));\n                }else{\n                    ans.append(Integer.toString(Q.pop())).append(\"\\n\");\n                }\n            }\n            System.out.print(ans.toString());\n        } catch (IOException e) {\n            // TODO 自動生成された catch ブロック\n            e.printStackTrace();\n        }\n    }\n}\nclass PQ{\n    public int table[];\n    public int num_nodes;\n    public final int root = 0;\n    public final int NONE = -1;\n    PQ(int arg_size){\n        table = new int[arg_size];\n        for(int i = 0; i < table.length; i++){\n            table[i] = NONE;\n        }\n        num_nodes = 0;\n    }\n    public void push(int value){\n        table[num_nodes] = value;\n        int loc = num_nodes++;\n        int parent = -1,tmp = 0;\n        //親が今回挿入するデータより小さい場合、親と子を入れ替える\n        while(loc != root){\n            parent = (loc-1)/2;\n            if(table[parent] >= table[loc]){\n                break;\n            }else{\n                tmp = table[parent];\n                table[parent] = table[loc];\n                table[loc] = tmp;\n                loc = parent;\n            }\n        }\n    }\n    public boolean isEmpty(){\n        return num_nodes == 0;\n    }\n    public boolean isFull(){\n        return num_nodes == table.length;\n    }\n    public int pop(){\n        int ret = table[root];\n        //とりあえず末尾のデータをtopに持ってくる\n        num_nodes--;\n        table[root] = table[num_nodes];\n        table[num_nodes] = NONE;\n        int loc = root;\n        int left = 0,right = 0;\n        int tmp = 0;\n        //親子の大小関係が正しくなるようにする\n        while(true){\n            left = 2*loc+1;\n            if(left >= table.length)break; //一番下の層\n            right = 2*loc+2;\n            if(table[loc] >= table[left] && table[loc] >= table[right]){ //親 >= 左右の子\n                break;\n            }else{ //少なくとも一方の子が親よりも大きい→左と右で大きい方の子と交換する\n                if(table[left] >= table[right]){\n                    tmp = table[loc];\n                    table[loc] = table[left];\n                    table[left] = tmp;\n                    loc = left;\n                }else{// table[left] < table[right]\n                    tmp = table[loc];\n                    table[loc] = table[right];\n                    table[right] = tmp;\n                    loc = right;\n                }\n            }\n        }\n        return ret;\n    }\n}\nclass UTIL{\n    //String→intへ変換\n    public static int getNUM(String tmp_str){\n        return Integer.parseInt(tmp_str);\n    }\n    //文字が半角数字か判定する関数\n    public static boolean isNumber(String tmp_str){\n        if(tmp_str == null || tmp_str.length() == 0){\n            return false;\n        }\n        Pattern pattern = Pattern.compile(\"\\\\A[0-9]+\\\\z\");\n        Matcher matcher = pattern.matcher(tmp_str);\n        return matcher.matches();\n    }\n}'),
('Heap_Sort', 'import java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\npublic class Main {\n    static void swap(int[] arr, int i, int j) {\n        int tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    static void maxHeapify(int[] heap, int n, int cur) {\n        int largest = cur;\n        int left = 2 * cur;\n        if (left <= n && heap[left] > heap[largest]) {\n            largest = left;\n        }\n        int right = 2 * cur + 1;\n        if (right <= n && heap[right] > heap[largest]) {\n            largest = right;\n        }\n        if (largest != cur) {\n            swap(heap, largest, cur);\n            maxHeapify(heap, n, largest);\n        }\n    }\n    static void heapSort(int[] heap) {\n        int n = heap.length - 1;\n        for (int i = n / 2; i >= 1; i--) {\n            maxHeapify(heap, n, i);\n        }\n        while (n >= 1) {\n            swap(heap, 1, n);\n            n--;\n            maxHeapify(heap, n, 1);\n        }\n    }\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int[] heap = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            heap[i] = s.nextInt();\n        }\n        heapSort(heap);\n        int heapSize = 1;\n        while (heapSize < n) {\n            int cur = heapSize;\n            while (cur >= 2) {\n                swap(heap, cur, cur / 2);\n                cur = cur / 2;\n            }\n            heapSize++;\n            swap(heap, 1, heapSize);\n        }\n        System.out.println(\n            Arrays.stream(heap).boxed()\n                .skip(1)\n                .map(String::valueOf)\n                .collect(Collectors.joining(\" \"))\n        );\n        s.close();\n    }\n}'),
('Projection', 'import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.concurrent.SynchronousQueue;\npublic class Main {\n    class P {\n        double x, y;\n        P(double x_, double y_) {\n            x = x_;\n            y = y_;\n        }\n        P add(P p) {\n            return new P(x + p.x, y + p.y);\n        }\n        P sub(P p) {\n            return new P(x - p.x, y - p.y);\n        }\n        P mul(double v) {\n            return new P(x * v, y * v);\n        }\n        P div(double v) {\n            return new P(x / v, y / v);\n        }\n        double dot(P p) {\n            return x * p.x + y * p.y;\n        }\n        double det(P p) {\n            return x * p.y - y * p.x;\n        }\n        double abs2() {\n            return x * x + y * y;\n        }\n        double abs() {\n            return Math.sqrt(abs2());\n        }\n        P norm() {\n            return div(abs());\n        }\n        P rot90() {\n            return new P(-y, x);\n        }\n        P proj(P src, P dst) {\n            P p_sd = dst.sub(src).norm();\n            return src.add(p_sd.mul(sub(src).dot(p_sd)));\n        }\n    }\n    void run() {\n        Scanner sc = new Scanner(System.in);\n        P src = new P(sc.nextDouble(), sc.nextDouble());\n        P dst = new P(sc.nextDouble(), sc.nextDouble());\n        int q = sc.nextInt();\n        while (q-- > 0) {\n            P p = new P(sc.nextDouble(), sc.nextDouble());\n            P x = p.proj(src, dst);\n            System.out.println(x.x + \" \" + x.y);\n        }\n    }\n    public static void main(String[] args) {\n        new Main().run();\n    }\n    static void tr(Object... objects) {\n        System.out.println(Arrays.deepToString(objects));\n    }\n}'),
('123', 'package edu.selab;\n\n/**\n * Hello world!\n *\n */\nimport java.math.*;\nimport java.util.Random;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n/**\n * Hello world!\n *\n */\npublic class App {\n\n	private static final int UPPER = 20;	//mark\n	private static final int LOWER = 0;\n	public int doRangeCheck(){\n		int result = Math.min(LOWER,12);\n		return Math.max(UPPER,result);\n	}\n\n	private int x;\n	private int y;\n	public void setX(){\n		this.y = 5;\n	}\n	public int getY(){\n		return this.x;	//mark\n	}\n\n	public App() {\n	}\n	public void m1() {\n		List<Integer> list = new ArrayList<Integer>();\n		list.add(1);\n		list.add(2);\n\n		String str = \"sonar test\";\n		String str1 = str.substring(-1,str.length());\n\n		Random rand = new Random(); \n  		int rValue = rand.nextInt(); //mark\n\n		Object obj = getData();\n		if(obj!=null) {\n		System.out.println(obj.toString());\n		}\n\n		int a = 0;\n		if(a==0)\n			a*=5;\n		else if(a==1)\n			a*=5;\n\n		try{\n		}finally{\n			for(int i = 0;i < 10; i  )\n				if(i==5)\n					break;\n			return ;		//mark\n		}\n	}\n\n	public Object getData() {\n		return null;\n	}\n\n	public static void main(String[] args) {\n		App app = new App();\n		app.m1();\n		try\n      {\n        Cipher c1 = Cipher.getInstance(\"DES\"); \n        Cipher c7 = Cipher.getInstance(\"DESede\"); \n        Cipher c13 = Cipher.getInstance(\"RC2\"); \n        Cipher c19 = Cipher.getInstance(\"RC4\"); \n        Cipher c25 = Cipher.getInstance(\"Blowfish\"); \n      }\n      catch(NoSuchAlgorithmException|NoSuchPaddingException e)\n      {\n      }\n	}\n}\n');

--
-- 已傾印資料表的索引
--

--
-- 資料表索引 `question_bank`
--
ALTER TABLE `question_bank`
  ADD PRIMARY KEY (`num`);

--
-- 在傾印的資料表使用自動遞增(AUTO_INCREMENT)
--

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `question_bank`
--
ALTER TABLE `question_bank`
  MODIFY `num` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=56;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
